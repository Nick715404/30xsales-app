"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effector";
exports.ids = ["vendor-chunks/effector"];
exports.modules = {

/***/ "(rsc)/./node_modules/effector/effector.mjs":
/*!********************************************!*\
  !*** ./node_modules/effector/effector.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettled: () => (/* binding */ C),\n/* harmony export */   attach: () => (/* binding */ v),\n/* harmony export */   clearNode: () => (/* binding */ vt),\n/* harmony export */   combine: () => (/* binding */ g),\n/* harmony export */   createApi: () => (/* binding */ k),\n/* harmony export */   createDomain: () => (/* binding */ w),\n/* harmony export */   createEffect: () => (/* binding */ b),\n/* harmony export */   createEvent: () => (/* binding */ p),\n/* harmony export */   createNode: () => (/* binding */ a),\n/* harmony export */   createStore: () => (/* binding */ h),\n/* harmony export */   createWatch: () => (/* binding */ D),\n/* harmony export */   fork: () => (/* binding */ O),\n/* harmony export */   forward: () => (/* binding */ St),\n/* harmony export */   fromObservable: () => (/* binding */ S),\n/* harmony export */   guard: () => (/* binding */ z),\n/* harmony export */   hydrate: () => (/* binding */ R),\n/* harmony export */   is: () => (/* binding */ ae),\n/* harmony export */   launch: () => (/* binding */ o),\n/* harmony export */   merge: () => (/* binding */ $),\n/* harmony export */   restore: () => (/* binding */ A),\n/* harmony export */   sample: () => (/* binding */ x),\n/* harmony export */   scopeBind: () => (/* binding */ F),\n/* harmony export */   serialize: () => (/* binding */ q),\n/* harmony export */   setGraphInspector: () => (/* binding */ he),\n/* harmony export */   setInspector: () => (/* binding */ ut),\n/* harmony export */   setStoreName: () => (/* binding */ i),\n/* harmony export */   split: () => (/* binding */ j),\n/* harmony export */   step: () => (/* binding */ Te),\n/* harmony export */   version: () => (/* binding */ Et),\n/* harmony export */   withFactory: () => (/* binding */ ke),\n/* harmony export */   withRegion: () => (/* binding */ n)\n/* harmony export */ });\nfunction e(e, t) {\n    for(const r in e)t(e[r], r);\n}\nfunction t(e, t) {\n    e.forEach(t);\n}\nfunction r(e, t, r) {\n    if (!e) throw Error(`${r ? r + \": \" : \"\"}${t}`);\n}\nfunction n(e, t) {\n    const r = E(e).meta || {};\n    ge = {\n        id: E(e).id,\n        parent: ge,\n        value: e,\n        template: r.template || be(),\n        sidRoot: r.sidRoot || ge && ge.sidRoot,\n        meta: r\n    };\n    try {\n        return t();\n    } finally{\n        ye(\"region\"), ge = H(ge);\n    }\n}\nfunction a({ node: e = [], from: r, source: n, parent: a = r || n, to: o, target: s, child: i = o || s, scope: c = {}, meta: l = {}, family: d = {\n    type: \"regular\"\n}, regional: u } = {}) {\n    const f = Se(a), p = Se(d.links), m = Se(d.owners), h = [];\n    t(e, (e)=>e && ie(h, e));\n    const g = {\n        id: fe(),\n        seq: h,\n        next: Se(i),\n        meta: l,\n        scope: c,\n        family: {\n            type: d.type || \"crosslink\",\n            links: p,\n            owners: m\n        }\n    };\n    return t(p, (e)=>ie(V(e), g)), t(m, (e)=>ie(T(e), g)), t(f, (e)=>ie(e.next, g)), u && ge && we(B(ge), [\n        g\n    ]), g;\n}\nfunction o(e, r, n) {\n    let a, o = at, s = null, i = et;\n    if (e.target && (r = e.params, n = e.defer, a = e.meta, o = \"page\" in e ? e.page : o, e.stack && (s = e.stack), i = U(e) || i, e = e.target), i && et && i !== et && (et = null), Array.isArray(e)) for(let t = 0; t < e.length; t++)Qe(\"pure\", o, E(e[t]), s, r[t], i, a);\n    else Qe(\"pure\", o, E(e), s, r, i, a);\n    if (n && !tt) return;\n    const c = {\n        isRoot: tt,\n        currentPage: at,\n        scope: et,\n        isWatch: rt,\n        isPure: nt\n    };\n    let l, d, u, f, p, m;\n    tt = 0;\n    e: for(; f = Ke();){\n        const { idx: e, stack: r, type: n } = f;\n        u = r.node, at = p = r.page, et = U(r), p ? m = p.reg : et && (m = et.reg);\n        const a = !!p, o = !!et, s = {\n            fail: 0,\n            scope: u.scope\n        };\n        l = d = 0;\n        for(let t = e; t < u.seq.length && !l; t++){\n            const i = u.seq[t];\n            if (i.order) {\n                const { priority: a, barrierID: o } = i.order, s = o ? p ? `${p.fullID}_${o}` : o : 0;\n                if (t !== e || n !== a) {\n                    o ? Ze.has(s) || (Ze.add(s), Xe(t, r, a, o)) : Xe(t, r, a, 0);\n                    continue e;\n                }\n                o && Ze.delete(s);\n            }\n            switch(i.type){\n                case \"mov\":\n                    {\n                        const e = i.data;\n                        let t;\n                        switch(e.from){\n                            case \"stack\":\n                                t = B(r);\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                t = r[e.from];\n                                break;\n                            case \"value\":\n                                t = e.store;\n                                break;\n                            case \"store\":\n                                if (m && !m[e.store.id]) if (a) {\n                                    const t = ct(p, e.store.id);\n                                    r.page = p = t, t ? m = t.reg : o ? (pt(et, e.store, 0, 1, e.softRead), m = et.reg) : m = void 0;\n                                } else o && pt(et, e.store, 0, 1, e.softRead);\n                                t = Be(m && m[e.store.id] || e.store);\n                        }\n                        switch(e.to){\n                            case \"stack\":\n                                r.value = t;\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                r[e.to] = t;\n                                break;\n                            case \"store\":\n                                lt(p, et, e.target, 0).current = t;\n                        }\n                        break;\n                    }\n                case \"compute\":\n                    const e1 = i.data;\n                    if (e1.fn) {\n                        rt = \"watch\" === u.meta.op, nt = e1.pure;\n                        const t = e1.safe ? (0, e1.fn)(B(r), s.scope, r) : mt(s, e1.fn, r);\n                        e1.filter ? d = !t : r.value = t, rt = c.isWatch, nt = c.isPure;\n                    }\n            }\n            l = s.fail || d;\n        }\n        if (dt && dt(r, s), !l) {\n            const e = B(r), n = U(r);\n            if (t(u.next, (t)=>{\n                Qe(\"child\", p, t, r, e, n);\n            }), n) {\n                u.meta.needFxCounter && Qe(\"child\", p, n.fxCount, r, e, n), u.meta.storeChange && Qe(\"child\", p, n.storeChange, r, e, n), u.meta.warnSerialize && Qe(\"child\", p, n.warnSerializeNode, r, e, n);\n                const a = n.additionalLinks[u.id];\n                a && t(a, (t)=>{\n                    Qe(\"child\", p, t, r, e, n);\n                });\n            }\n        }\n    }\n    tt = c.isRoot, at = c.currentPage, et = U(c);\n}\nfunction s(t, r = \"combine\") {\n    let n = r + \"(\", a = \"\", o = 0;\n    return e(t, (e)=>{\n        o < 25 && (null != e && (n += a, n += Q(e) ? K(e).fullName : e.toString()), o += 1, a = \", \");\n    }), n + \")\";\n}\nfunction i(e, t) {\n    e.shortName = t, Object.assign(K(e), c(t, H(e)));\n}\nfunction c(e, t) {\n    let r, n;\n    const a = e;\n    if (t) {\n        const a = K(t);\n        0 === e.length ? (r = a.path, n = a.fullName) : (r = a.path.concat([\n            e\n        ]), n = 0 === a.fullName.length ? e : a.fullName + \"/\" + e);\n    } else r = 0 === e.length ? [] : [\n        e\n    ], n = e;\n    return {\n        shortName: a,\n        fullName: n,\n        path: r\n    };\n}\nfunction l(e, t) {\n    if (!t) return e;\n    if (!t.name && !t.named && !t.loc) return e;\n    let r = `[${e}]`;\n    const n = t.named || t.name;\n    n && (r += ` unit '${n}'`);\n    const a = t.loc;\n    return !n && a && (r += ` (${a.file}:${a.line}:${a.column})`), r;\n}\nfunction d(e, t) {\n    const r = t ? e : e[0];\n    ze(r);\n    let n = r.or;\n    const a = r.and;\n    if (a) {\n        const r = t ? a : a[0];\n        if ($e(r) && \"and\" in r) {\n            const r = d(a, t);\n            e = r[0], n = {\n                ...n,\n                ...r[1]\n            };\n        } else e = a;\n    }\n    return [\n        e,\n        n\n    ];\n}\nfunction u(e) {\n    const t = ()=>e();\n    return t.unsubscribe = ()=>e(), t;\n}\nfunction f(e, ...t) {\n    const r = be();\n    if (r) {\n        const n = r.handlers[e];\n        if (n) return n(r, ...t);\n    }\n}\nfunction p(e, t) {\n    const n = ht({\n        or: t,\n        and: \"string\" == typeof e ? {\n            name: e\n        } : e\n    }), s = l(\"event\", n), i = (e, ...t)=>(r(!G(i, \"derived\"), \"call of derived event is not supported, use createEvent instead\", s), r(!nt, \"unit call from pure function is not supported, use operators like sample instead\", s), at ? ((e, t, r, n)=>{\n            const a = at;\n            let o = null;\n            if (t) for(o = at; o && o.template !== t;)o = H(o);\n            st(o);\n            const s = e.create(r, n);\n            return st(a), s;\n        })(i, c, e, t) : i.create(e, t)), c = be(), d = Object.assign(i, {\n        graphite: a({\n            meta: xt(n.actualOp || \"event\", i, n),\n            regional: 1\n        }),\n        create: (e)=>(o({\n                target: i,\n                params: e,\n                scope: et\n            }), e),\n        watch: (e)=>$t(i, e),\n        map: (e)=>zt(i, \"map\", e, [\n                Ve()\n            ]),\n        filter: (e)=>zt(i, \"filter\", e.fn ? e : e.fn, [\n                Ve(Oe, 1)\n            ]),\n        filterMap: (e)=>zt(i, \"filterMap\", e, [\n                Ve(),\n                _e((e)=>!xe(e), 1)\n            ]),\n        prepend (e) {\n            r(i.targetable, \".prepend of derived event is not supported, call source event instead\", s);\n            const t = p(\"* → \" + i.shortName, {\n                parent: H(i)\n            });\n            return f(\"eventPrepend\", E(t)), wt(t, i, [\n                Ve()\n            ], \"prepend\", e), Mt(i, t), t;\n        }\n    });\n    return null != n && n.domain && n.domain.hooks.event(d), J(d, \"id\", d.graphite.id), ye(d.graphite), d;\n}\nfunction m(e, n, a, o, s) {\n    return je(a, `${s} ${n}`, \"first argument\"), r(Me(o), \"second argument should be a function\", s), ce(!G(e, \"derived\"), `${n} in derived store`, `${n} in store created via createStore`, s), t(Array.isArray(a) ? a : [\n        a\n    ], (t)=>{\n        e.off(t), W(e).set(t, kt(jt(t, e, \"on\", Ie, o)));\n    }), e;\n}\nfunction h(e, n) {\n    const s = ht(n), i = Le(e), c = l(\"store\", s), d = p({\n        named: \"updates\",\n        derived: 1\n    });\n    f(\"storeBase\", i);\n    const u = i.id, g = \"skipVoid\" in s, y = g && !s.skipVoid;\n    ce(!(g && s.skipVoid), \"{skipVoid: true}\", \"updateFilter\", c);\n    const b = {\n        subscribers: new Map,\n        updates: d,\n        defaultState: e,\n        stateRef: i,\n        getState () {\n            let e, t = i;\n            if (at) {\n                let t = at;\n                for(; t && !t.reg[u];)t = H(t);\n                t && (e = t);\n            }\n            return !e && et && (pt(et, i, 1), e = et), e && (t = e.reg[u]), Be(t);\n        },\n        setState: (e)=>o({\n                target: b,\n                params: e,\n                defer: 1,\n                scope: et\n            }),\n        reset: (...e)=>(r(b.targetable, \".reset of derived store is not supported\", c), t(e, (e)=>m(b, \".reset\", e, ()=>b.defaultState, c)), b),\n        on: (e, t)=>(r(b.targetable, \".on of derived store is not supported\", c), m(b, \".on\", e, t, c)),\n        off (e) {\n            const t = W(b).get(e);\n            return t && (t(), W(b).delete(e)), b;\n        },\n        map (e, t) {\n            let r, n;\n            $e(e) && (r = e, e = e.fn);\n            const a = b.getState(), o = xe(a);\n            be() ? n = null : (!o || o && y) && (n = e(a));\n            const s = h(n, {\n                name: `${b.shortName} \\u2192 *`,\n                derived: 1,\n                ...t,\n                and: r\n            }), c = jt(b, s, \"map\", Oe, e);\n            return We(L(s), {\n                type: \"map\",\n                fn: e,\n                from: i\n            }), L(s).noInit = 1, f(\"storeMap\", i, c), s;\n        },\n        watch (e, t) {\n            if (ce(!t, \"watch second argument\", \"sample\", c), !t || !Q(e)) {\n                const t = $t(b, e);\n                return f(\"storeWatch\", i, e) || e(b.getState()), t;\n            }\n            return r(Me(t), \"second argument should be a function\", c), e.watch((e)=>t(b.getState(), e));\n        }\n    }, v = xt(\"store\", b, s), k = b.defaultConfig.updateFilter;\n    b.graphite = a({\n        scope: {\n            state: i,\n            fn: k\n        },\n        node: [\n            _e((e, t, r)=>(r.scope && !r.scope.reg[i.id] && (r.b = 1), e)),\n            Ee(i),\n            _e((e, t, { a: r, b: n })=>{\n                const a = xe(e);\n                return a && !g && console.error(`${c}: ${At}`), (a && y || !a) && (e !== r || n);\n            }, 1),\n            k && Ve(Ne, 1),\n            qe({\n                from: \"stack\",\n                target: i\n            })\n        ],\n        child: d,\n        meta: {\n            ...v,\n            defaultState: e\n        },\n        regional: 1\n    }), J(b, \"id\", b.graphite.id), J(b, \"rootStateRefId\", u);\n    const w = G(b, \"serialize\"), S = G(b, \"derived\"), $ = \"ignore\" === w, M = G(b, \"sid\");\n    M && (J(b, \"storeChange\", 1), i.sid = M), M || $ || S || J(b, \"warnSerialize\", 1);\n    const x = xe(e);\n    return r(S || !x || x && y, At, c), S && x && !g && console.error(`${c}: ${At}`), we(b, [\n        d\n    ]), null != s && s.domain && s.domain.hooks.store(b), S || (b.reinit = p({\n        named: \"reinit\"\n    }), b.reset(b.reinit)), i.meta = b.graphite.meta, ye(b.graphite), b;\n}\nfunction g(...e) {\n    let t, n, a;\n    [e, a] = d(e);\n    const o = l(\"combine\", a), s = e[e.length - 1], i = !Y(s) && $e(s), c = i && s, u = i ? e[e.length - 2] : s;\n    let f, p, m;\n    if (Me(u) ? (n = e.slice(0, i ? -2 : -1), t = u) : n = e, 1 === n.length) {\n        const e = n[0];\n        Y(e) || (f = e, p = 1);\n    }\n    if (!p && (f = n, t)) {\n        m = 1;\n        const e = t;\n        t = (t)=>e(...t);\n    }\n    return r($e(f), `${o}: shape should be an object`), Ct(Array.isArray(f), !m, f, a, t, c);\n}\nfunction y() {\n    const e = {};\n    return e.req = new Promise((t, r)=>{\n        e.rs = t, e.rj = r;\n    }), e.req.catch(()=>{}), e;\n}\nfunction b(e, t = {}) {\n    const n = ht(Me(e) ? {\n        handler: e\n    } : e, t), s = l(\"effect\", n), i = p(Me(e) ? {\n        handler: e\n    } : e, {\n        ...t,\n        actualOp: \"effect\"\n    }), c = E(i);\n    J(c, \"op\", i.kind = \"effect\"), i.use = (e)=>(r(Me(e), \".use argument should be a function\", s), b.scope.handler = e, i), i.use.getCurrent = ()=>b.scope.handler;\n    const d = i.finally = p({\n        named: \"finally\",\n        derived: 1\n    }), u = i.done = d.filterMap({\n        named: \"done\",\n        fn ({ status: e, params: t, result: r }) {\n            if (\"done\" === e) return {\n                params: t,\n                result: r\n            };\n        }\n    }), f = i.fail = d.filterMap({\n        named: \"fail\",\n        fn ({ status: e, params: t, error: r }) {\n            if (\"fail\" === e) return {\n                params: t,\n                error: r\n            };\n        }\n    }), m = i.doneData = u.map({\n        named: \"doneData\",\n        fn: ({ result: e })=>e\n    }), g = i.failData = f.map({\n        named: \"failData\",\n        fn: ({ error: e })=>e\n    }), b = a({\n        scope: {\n            handler: i.defaultConfig.handler || (()=>r(0, `no handler used in ${i.compositeName.fullName}`))\n        },\n        node: [\n            _e((e, t, r)=>{\n                let n = t.handler;\n                const a = U(r);\n                if (a) {\n                    const e = a.handlers.unitMap.get(i) || a.handlers.sidMap[i.sid];\n                    e && (n = e);\n                }\n                return e.handler = n, e;\n            }, 0, 1),\n            _e((e, t, r)=>{\n                if (t.runnerFn && !t.runnerFn(e, null, r)) return;\n                const { params: n, req: a, handler: o, args: s = [\n                    n\n                ] } = e, i = It(n, a, 1, d, r), c = It(n, a, 0, d, r), [l, u] = Nt(o, c, s);\n                l && ($e(u) && Me(u.then) ? u.then(i, c) : i(u));\n            }, 0, 1)\n        ],\n        meta: {\n            op: \"fx\",\n            fx: \"runner\"\n        }\n    });\n    c.scope.runner = b, ie(c.seq, _e((e, { runner: t }, r)=>{\n        const n = H(r) ? {\n            params: e,\n            req: {\n                rs (e) {},\n                rj (e) {}\n            }\n        } : e;\n        return r.meta || (r.meta = {\n            fxID: pe()\n        }), o({\n            target: t,\n            params: n,\n            defer: 1,\n            scope: U(r),\n            meta: r.meta\n        }), n.params;\n    })), i.create = (e)=>{\n        const t = y(), r = {\n            params: e,\n            req: t\n        };\n        if (et && !rt) {\n            const e = et;\n            t.req.finally(()=>{\n                ot(e);\n            }).catch(()=>{});\n        }\n        return o({\n            target: i,\n            params: r,\n            scope: et\n        }), t.req;\n    };\n    const v = i.inFlight = h(0, {\n        serialize: \"ignore\",\n        named: (G(i, \"name\") || i.graphite.id) + \".inFlight\"\n    }).on(i, (e)=>e + 1).on(d, (e)=>e - 1).map({\n        fn: (e)=>e,\n        named: \"inFlight\"\n    });\n    J(d, \"needFxCounter\", \"dec\"), J(i, \"needFxCounter\", 1);\n    const k = i.pending = v.map({\n        fn: (e)=>e > 0,\n        named: \"pending\"\n    });\n    return we(i, [\n        d,\n        u,\n        f,\n        m,\n        g,\n        k,\n        v\n    ]), null != n && n.domain && n.domain.hooks.effect(i), i;\n}\nfunction v(e) {\n    let t;\n    [e, t] = d(e, 1);\n    const n = l(\"attach\", t);\n    let { source: a, effect: s, mapParams: i, domain: u } = e;\n    ee(s) && r(xe(u), \"`domain` can only be used with a plain function\", n);\n    const f = b(e, t);\n    J(f, \"attached\", 1);\n    const { runner: p } = E(f).scope;\n    let m;\n    const h = (e, t, r)=>{\n        const { params: n, req: s, handler: c } = e, l = f.finally, d = It(n, s, 0, l, r), u = r.a, p = ee(c);\n        let m, h = 1;\n        if (i ? [h, m] = Nt(i, d, [\n            n,\n            u\n        ]) : m = a && p ? u : n, h) {\n            if (!p) return e.args = [\n                u,\n                m\n            ], 1;\n            o({\n                target: c,\n                params: {\n                    params: m,\n                    req: {\n                        rs: It(n, s, 1, l, r),\n                        rj: d\n                    }\n                },\n                page: r.page,\n                defer: 1,\n                meta: r.meta\n            });\n        }\n    };\n    if (a) {\n        let e;\n        p.scope.runnerFn = h, Y(a) ? (e = a, we(e, [\n            f\n        ])) : (e = g(a), we(f, [\n            e\n        ])), m = [\n            _e((e)=>e, 0, 1),\n            Ee(L(e))\n        ], delete p.seq[1].order;\n    } else m = [\n        _e(h, 1, 1)\n    ];\n    p.seq.splice(1, 0, ...m), f.use(s);\n    const y = H(s);\n    return y && (Object.assign(K(f), c(f.shortName, y)), f.defaultConfig.parent = y), Mt(s, f, \"effect\"), f;\n}\nfunction k(...t) {\n    let [[r, n], a] = d(t);\n    const o = {};\n    return e(n, (e, t)=>{\n        const n = o[t] = p(t, {\n            parent: H(r),\n            config: a\n        });\n        r.on(n, e), Mt(r, n);\n    }), o;\n}\nfunction w(r, n) {\n    const s = ht({\n        or: n,\n        and: \"string\" == typeof r ? {\n            name: r\n        } : r\n    }), i = a({\n        family: {\n            type: \"domain\"\n        },\n        regional: 1,\n        parent: (null == s ? void 0 : s.domain) || (null == s ? void 0 : s.parent)\n    }), c = {\n        history: {},\n        graphite: i,\n        hooks: {}\n    };\n    i.meta = xt(\"domain\", c, {\n        parent: (null == s ? void 0 : s.domain) || (null == s ? void 0 : s.parent),\n        or: {\n            ...s,\n            derived: 1\n        }\n    }), e({\n        Event: p,\n        Effect: b,\n        Store: h,\n        Domain: w\n    }, (e, r)=>{\n        const n = r.toLowerCase(), a = p({\n            named: `on${r}`\n        });\n        c.hooks[n] = a;\n        const s = new Set;\n        c.history[`${n}s`] = s, a.create = (e)=>(o(a, e), e), ie(E(a).seq, _e((e, t, r)=>(r.scope = null, e))), a.watch((e)=>{\n            we(c, [\n                e\n            ]), s.add(e), e.ownerSet || (e.ownerSet = s), H(e) || (e.parent = c);\n        }), we(c, [\n            a\n        ]), c[`onCreate${r}`] = (e)=>(t(s, e), a.watch(e)), c[`create${r}`] = c[n] = (t, r)=>{\n            const n = ht({\n                and: r,\n                or: t\n            });\n            return null != n && n.domain ? e(t, r) : a(e(t, {\n                parent: c,\n                or: n\n            }));\n        };\n    });\n    const l = H(c);\n    return l && e(c.hooks, (e, t)=>wt(e, l.hooks[t])), null != s && s.domain && s.domain.hooks.domain(c), c;\n}\nfunction S(e) {\n    ze(e);\n    const t = _ in e ? e[_]() : e;\n    r(t.subscribe, \"expect observable to have .subscribe\");\n    const n = p(), a = kt(n);\n    return t.subscribe({\n        next: n,\n        error: a,\n        complete: a\n    }), n;\n}\nfunction $(e, t) {\n    const r = l(\"merge\", t);\n    je(e, r, \"first argument\");\n    const n = p({\n        name: s(e, \"merge\"),\n        derived: 1,\n        and: t\n    });\n    return wt(e, n, [], \"merge\"), n;\n}\nfunction M(e, n) {\n    let a = 0;\n    return t(Rt, (t)=>{\n        t in e && (r(null != e[t], Ft(n, t)), a = 1);\n    }), a;\n}\nfunction x(...e) {\n    let t, r, n, a, [[o, s, i], c] = d(e), u = 1;\n    const f = l(\"sample\", c);\n    return xe(s) && $e(o) && M(o, f) && (s = o.clock, i = o.fn, \"batch\" in o ? u = o.batch : (ce(!(\"greedy\" in o), \"greedy in sample\", \"batch\", f), u = !o.greedy), a = o.filter, t = o.target, r = o.name, n = o.sid, o = o.source), qt(\"sample\", s, o, a, t, i, r, c, u, 1, 0, n);\n}\nfunction z(...e) {\n    let [[t, r], n] = d(e);\n    const a = l(\"guard\", n);\n    return ce(0, \"guard\", \"sample\", a), r || (r = t, t = r.source), M(r, a), qt(\"guard\", r.clock, t, r.filter, r.target, null, r.name, n, !r.greedy, 0, 1);\n}\nfunction A(t, n, a) {\n    const o = l(\"restore\", a);\n    if (r(!Y(t), \"restore($store) is not supported\", o), Z(t) || ee(t)) {\n        const e = H(t), r = h(n, {\n            parent: e,\n            name: t.shortName,\n            and: a\n        });\n        return wt(ee(t) ? t.doneData : t, r), e && e.hooks.store(r), r;\n    }\n    const s = Array.isArray(t) ? [] : {};\n    return e(t, (e, t)=>s[t] = Y(e) ? e : h(e, {\n            name: t\n        })), s;\n}\nfunction j(...t) {\n    const n = \"split\";\n    let o, s, [[i, c], u] = d(t);\n    const m = l(n, u), h = !c;\n    h && (o = i.cases, c = i.match, s = i.clock, i = i.source);\n    const g = Y(c), y = !Q(c) && Me(c), b = !g && !y && $e(c);\n    r(Q(i), \"source must be a unit\", m), o || (o = {}), h ? e(o, (e, t)=>Ce(m, e, `cases.${t}`)) : (r(b, \"match should be an object\", m), e(c, (e, t)=>o[t] = p({\n            derived: 1,\n            named: `cases.${t}`,\n            and: u\n        })), o.__ = p({\n        derived: 1,\n        named: \"cases.__\",\n        and: u\n    }));\n    const v = new Set([].concat(i, s || [], Object.values(o))), k = Object.keys(g || y ? o : c);\n    let w;\n    if (g || y) g && v.add(c), w = [\n        g && Ee(L(c), 0, 1),\n        De({\n            safe: g,\n            filter: 1,\n            pure: !g,\n            fn (e, t, r) {\n                const n = String(g ? r.a : c(e));\n                _t(t, oe(k, n) ? n : \"__\", e, r);\n            }\n        })\n    ];\n    else if (b) {\n        const t = Le({});\n        t.type = \"shape\";\n        const r = [];\n        let n;\n        e(c, (e, a)=>{\n            if (Q(e)) {\n                n = 1, ie(r, a), v.add(e);\n                const o = wt(e, [], [\n                    Ee(t),\n                    _e((e, t, { a: r })=>r[a] = e)\n                ]);\n                if (Y(e)) {\n                    t.current[a] = e.getState();\n                    const r = L(e);\n                    We(t, {\n                        from: r,\n                        field: a,\n                        type: \"field\"\n                    }), f(\"splitMatchStore\", r, o);\n                }\n            }\n        }), n && f(\"splitBase\", t), w = [\n            n && Ee(t, 0, 1),\n            Ve((e, t, n)=>{\n                for(let a = 0; a < k.length; a++){\n                    const o = k[a];\n                    if (oe(r, o) ? n.a[o] : c[o](e)) return void _t(t, o, e, n);\n                }\n                _t(t, \"__\", e, n);\n            }, 1)\n        ];\n    } else r(0, \"expect match to be unit, function or object\");\n    const S = a({\n        meta: {\n            op: n\n        },\n        parent: s ? [] : i,\n        scope: o,\n        node: w,\n        family: {\n            owners: Array.from(v)\n        },\n        regional: 1\n    });\n    if (s && qt(n, s, i, null, S, null, n, u, 0, 0, 0), !h) return o;\n}\nfunction C(e, { scope: t, params: r } = {}) {\n    if (!Q(e)) return Promise.reject(new Error(\"first argument should be unit\"));\n    if (!(ee(e) || Z(e) || Y(e) || ne(e))) return Promise.reject(new Error(\"first argument accepts only effects, events, stores or scopes\"));\n    if (ne(e)) t = e;\n    else if (!te(e)) {\n        const t = l(\"allSettled\", E(e).meta);\n        return Promise.reject(Error(`${t}: unit should be targetable`));\n    }\n    const n = y();\n    n.parentFork = et;\n    const { fxCount: a } = t;\n    ie(a.scope.defers, n);\n    const s = [], i = [];\n    return ne(e) || (ie(s, e), ie(i, ee(e) ? {\n        params: r,\n        req: {\n            rs (e) {\n                n.value = {\n                    status: \"done\",\n                    value: e\n                };\n            },\n            rj (e) {\n                n.value = {\n                    status: \"fail\",\n                    value: e\n                };\n            }\n        }\n    } : r)), ie(s, a), ie(i, null), o({\n        target: s,\n        params: i,\n        scope: t\n    }), n.req;\n}\nfunction N(e, r, n) {\n    const a = [];\n    (function e(o) {\n        oe(a, o) || (ie(a, o), \"store\" === G(o, \"op\") && (n || G(o, \"sid\")) && r(o, G(o, \"sid\")), t(o.next, e), t(V(o), e), t(T(o), e));\n    })(e);\n}\nfunction I(e, n) {\n    const a = Array.isArray(e) ? new Map(e) : e, o = new Map;\n    let s = 0;\n    if (a instanceof Map) {\n        const e = {};\n        return t(a, (t, a)=>{\n            r(Q(a), \"Map key should be a unit\"), n && n(a, t), a.sid && (a.sid in e && (s = 1), e[a.sid] = t), o.set(a, t);\n        }), {\n            sidMap: e,\n            unitMap: o,\n            hasSidDoubles: s\n        };\n    }\n    return {\n        sidMap: a,\n        unitMap: o\n    };\n}\nfunction O(e, n) {\n    let o, s = e;\n    re(e) && (ce(0, \"fork(domain)\", \"fork()\"), o = e, s = n);\n    const i = ((e)=>{\n        const r = a({\n            scope: {\n                defers: [],\n                inFlight: 0,\n                fxID: 0\n            },\n            node: [\n                _e((e, t, r)=>{\n                    r.parent ? \"dec\" === r.parent.node.meta.needFxCounter ? t.inFlight -= 1 : (t.inFlight += 1, t.fxID += 1) : t.fxID += 1;\n                }),\n                De({\n                    priority: \"sampler\",\n                    batch: 1\n                }),\n                _e((e, r)=>{\n                    const { defers: n, fxID: a } = r;\n                    r.inFlight > 0 || 0 === n.length || Promise.resolve().then(()=>{\n                        r.fxID === a && t(n.splice(0, n.length), (e)=>{\n                            ot(e.parentFork), e.rs(e.value);\n                        });\n                    });\n                }, 0, 1)\n            ]\n        }), n = a({\n            node: [\n                _e((e, t, r)=>{\n                    const n = r.parent;\n                    if (n) {\n                        const t = n.node;\n                        if (Vt(n)) {\n                            const n = U(r), a = t.meta.sid;\n                            n.sidIdMap[a] = t.scope.state.id, n.values.sidMap[a] = e;\n                            const o = t.meta.serialize;\n                            o && n.sidSerializeSettings.set(a, \"ignore\" === o ? {\n                                ignore: 1\n                            } : {\n                                ignore: 0,\n                                write: o.write\n                            });\n                        }\n                    }\n                })\n            ]\n        }), o = a({\n            node: [\n                _e((e, t, r)=>{\n                    const n = U(r);\n                    n && r.parent && Vt(r.parent) && (n.warnSerialize = 1);\n                })\n            ]\n        }), s = {\n            cloneOf: e,\n            reg: {},\n            values: {\n                sidMap: {},\n                idMap: {}\n            },\n            sidIdMap: {},\n            sidSerializeSettings: new Map,\n            getState (e) {\n                if (\"current\" in e) return lt(at, s, e, 0).current;\n                const t = E(e);\n                return lt(at, s, t.scope.state, 1).current;\n            },\n            kind: \"scope\",\n            graphite: a({\n                family: {\n                    type: \"domain\",\n                    links: [\n                        r,\n                        n,\n                        o\n                    ]\n                },\n                meta: {\n                    unit: \"fork\"\n                },\n                scope: {\n                    forkInFlightCounter: r\n                }\n            }),\n            additionalLinks: {},\n            handlers: {\n                sidMap: {},\n                unitMap: new Map\n            },\n            fxCount: r,\n            storeChange: n,\n            warnSerializeNode: o\n        };\n        return s;\n    })(o);\n    if (s) {\n        if (s.values) {\n            const { sidMap: e, unitMap: n, hasSidDoubles: a } = I(s.values, (e)=>r(Y(e) && te(e), \"Values map can contain only writable stores as keys\"));\n            Object.assign(i.values.sidMap, e), t(n, (e, t)=>{\n                if (i.values.idMap[t.stateRef.id] = e, i.sidIdMap[G(t, \"sid\")] = t.stateRef.id, \"ignore\" === G(t, \"serialize\")) {\n                    const e = G(t, \"sid\");\n                    i.sidSerializeSettings.set(e, {\n                        ignore: 1\n                    });\n                }\n            }), i.fromSerialize = !(Array.isArray(s.values) || s.values instanceof Map), i.hasSidDoubles = a;\n        }\n        s.handlers && (ce(s.handlers instanceof Map || Array.isArray(s.handlers), \"object with handlers\", \"array\"), i.handlers = I(s.handlers, (e)=>r(ee(e), \"Handlers map can contain only effects as keys\")));\n    }\n    return i;\n}\nfunction R(e, { values: n }) {\n    r($e(n), \"values property should be an object\");\n    const { sidMap: a, unitMap: s } = I(n), i = Object.getOwnPropertyNames(a), c = {};\n    t(s, (e, t)=>{\n        c[t.stateRef.id] = t;\n    });\n    const l = [], d = [];\n    let u, f, p;\n    ne(e) ? (u = e, p = 1, r(u.cloneOf, \"scope should be created from domain\"), ce(0, \"hydrate(fork(domain), { values })\", \"fork({ values })\"), f = E(u.cloneOf)) : re(e) ? (ce(0, \"hydrate(domain, { values })\", \"fork({ values })\"), f = E(e)) : r(0, \"first argument of hydrate should be domain or scope\"), N(f, (e, t)=>{\n        if (t && oe(i, t)) {\n            ie(l, e);\n            const r = G(e, \"serialize\");\n            r && \"ignore\" !== r && (a[t] = r.read(a[t])), ie(d, a[t]);\n        } else e.scope.state.id in c && (ie(l, e), ie(d, s.get(c[e.scope.state.id])));\n    }, 1), o({\n        target: l,\n        params: d,\n        scope: u\n    }), p && Object.assign(u.values.sidMap, a);\n}\nfunction F(e, { scope: t, safe: n } = {}) {\n    r(t || et || n, \"scopeBind: scope not found\");\n    const a = t || et;\n    return (t)=>{\n        function r() {\n            ot(s);\n        }\n        let n, o = 0;\n        const s = et;\n        ot(a);\n        try {\n            n = e(t);\n        } catch (e) {\n            n = e, o = 1;\n        }\n        if (r(), o) throw n;\n        return n instanceof Promise && n.then(r, r), n;\n    };\n}\nfunction q(t, n = {}) {\n    t.warnSerialize && console.error(\"There is a store without sid in this scope, its value is omitted\"), r(!t.hasSidDoubles, \"duplicate sid found in this scope\");\n    const a = n.ignore ? n.ignore.map(({ sid: e })=>e) : [], o = {};\n    return e(t.values.sidMap, (e, r)=>{\n        var n;\n        if (oe(a, r)) return;\n        const s = t.sidIdMap[r], i = null !== (n = t.sidSerializeSettings.get(r)) && void 0 !== n ? n : {\n            ignore: 0,\n            write: Tt\n        };\n        i.ignore || (o[r] = (0, i.write)(s && s in t.reg ? t.reg[s].current : e));\n    }), \"onlyChanges\" in n && (ce(0, \"onlyChanges\"), n.onlyChanges || (r(t.cloneOf, \"scope should be created from domain\"), N(E(t.cloneOf), (e, r)=>{\n        r in o || oe(a, r) || G(e, \"isCombine\") || \"ignore\" === G(e, \"serialize\") || (o[r] = t.getState(e));\n    }))), o;\n}\nfunction D({ unit: e, fn: t, scope: r, batch: n }) {\n    const o = [\n        Te.run({\n            fn: (e)=>t(e)\n        })\n    ];\n    n && o.unshift(Te.compute({\n        priority: \"sampler\",\n        batch: 1\n    })), Y(e) && o.unshift(Te.mov({\n        store: e.stateRef,\n        to: \"stack\"\n    }));\n    const s = Array.isArray(e) ? e : [\n        e\n    ];\n    if (r) {\n        const e = [], t = r.additionalLinks;\n        return s.forEach((r)=>{\n            const n = t[r.graphite.id] || [];\n            t[r.graphite.id] = n;\n            const s = a({\n                node: P(o, r),\n                meta: {\n                    watchOp: r.kind\n                }\n            });\n            n.push(s), e.push(()=>{\n                const e = n.indexOf(s);\n                -1 !== e && n.splice(e, 1), vt(s);\n            });\n        }), u(()=>{\n            e.forEach((e)=>e());\n        });\n    }\n    {\n        const e = a({\n            node: o,\n            parent: s,\n            family: {\n                owners: s\n            }\n        });\n        return u(()=>{\n            vt(e);\n        });\n    }\n}\nfunction P(e, t) {\n    return Y(t) ? [\n        Te.mov({\n            store: t.stateRef,\n            to: \"stack\"\n        }),\n        ...e\n    ] : e;\n}\nconst _ = \"undefined\" != typeof Symbol && Symbol.observable || \"@@observable\", E = (e)=>e.graphite || e, V = (e)=>e.family.owners, T = (e)=>e.family.links, L = (e)=>e.stateRef, B = (e)=>e.value, W = (e)=>e.subscribers, H = (e)=>e.parent, U = (e)=>e.scope, G = (e, t)=>E(e).meta[t], J = (e, t, r)=>E(e).meta[t] = r, K = (e)=>e.compositeName, Q = (e)=>(Me(e) || $e(e)) && \"kind\" in e, X = (e)=>(t)=>Q(t) && t.kind === e, Y = X(\"store\"), Z = X(\"event\"), ee = X(\"effect\"), te = (e)=>Q(e) && !!e.targetable, re = X(\"domain\"), ne = X(\"scope\");\nvar ae = {\n    __proto__: null,\n    unit: Q,\n    store: Y,\n    event: Z,\n    effect: ee,\n    targetable: te,\n    domain: re,\n    scope: ne,\n    attached: (e)=>ee(e) && 1 == G(e, \"attached\")\n};\nconst oe = (e, t)=>e.includes(t), se = (e, t)=>{\n    const r = e.indexOf(t);\n    -1 !== r && e.splice(r, 1);\n}, ie = (e, t)=>e.push(t), ce = (e, t, r, n)=>!e && console.error(`${n ? n + \": \" : \"\"}${t} is deprecated${r ? `, use ${r} instead` : \"\"}`), le = ()=>{\n    let e = 0;\n    return ()=>\"\" + ++e;\n}, de = le(), ue = le(), fe = le(), pe = le();\nlet me;\nconst he = (e)=>{\n    me = e;\n};\nlet ge = null;\nconst ye = (e)=>{\n    me && me(e, ge);\n}, be = ()=>ge && ge.template, ve = (e)=>(e && ge && ge.sidRoot && (e = `${ge.sidRoot}|${e}`), e), ke = ({ sid: e, name: t, loc: r, method: o, fn: s })=>n(a({\n        meta: {\n            sidRoot: ve(e),\n            sid: e,\n            name: t,\n            loc: r,\n            method: o,\n            type: \"factory\"\n        }\n    }), s), we = (e, r)=>{\n    const n = E(e);\n    t(r, (e)=>{\n        const t = E(e);\n        \"domain\" !== n.family.type && (t.family.type = \"crosslink\"), ie(V(t), n), ie(T(n), t);\n    });\n}, Se = (e = [])=>(Array.isArray(e) ? e : [\n        e\n    ]).flat().map(E), $e = (e)=>\"object\" == typeof e && null !== e, Me = (e)=>\"function\" == typeof e, xe = (e)=>void 0 === e, ze = (e)=>r($e(e) || Me(e), \"expect first argument be an object\"), Ae = (e, t, n, a)=>r(!(!$e(e) && !Me(e) || !(\"family\" in e) && !(\"graphite\" in e)), `${t}: expect ${n} to be a unit (store, event or effect)${a}`), je = (e, r, n)=>{\n    Array.isArray(e) ? t(e, (e, t)=>Ae(e, r, `${t} item of ${n}`, \"\")) : Ae(e, r, n, \" or array of units\");\n}, Ce = (e, n, a = \"target\")=>t(Se(n), (t)=>r(!G(t, \"derived\"), `${e}: derived unit in \"${a}\" is not supported, use createStore/createEvent instead\"`)), Ne = (e, { fn: t }, { a: r })=>t(e, r), Ie = (e, { fn: t }, { a: r })=>t(r, e), Oe = (e, { fn: t })=>t(e), Re = (e, t, r, n)=>{\n    const a = {\n        id: ue(),\n        type: e,\n        data: t\n    };\n    return r && (a.order = {\n        priority: r\n    }, n && (a.order.barrierID = ++Fe)), a;\n};\nlet Fe = 0;\nconst qe = ({ from: e = \"store\", store: t, target: r, to: n = r ? \"store\" : \"stack\", batch: a, priority: o })=>Re(\"mov\", {\n        from: e,\n        store: t,\n        to: n,\n        target: r\n    }, o, a), De = ({ fn: e, batch: t, priority: r, safe: n = 0, filter: a = 0, pure: o = 0 })=>Re(\"compute\", {\n        fn: e,\n        safe: n,\n        filter: a,\n        pure: o\n    }, r, t), Pe = ({ fn: e })=>De({\n        fn: e,\n        priority: \"effect\"\n    }), _e = (e, t, r)=>De({\n        fn: e,\n        safe: 1,\n        filter: t,\n        priority: r && \"effect\"\n    }), Ee = (e, t, r)=>qe({\n        store: e,\n        to: t ? \"stack\" : \"a\",\n        priority: r && \"sampler\",\n        batch: 1\n    }), Ve = (e = Oe, t)=>De({\n        fn: e,\n        pure: 1,\n        filter: t\n    }), Te = {\n    mov: qe,\n    compute: De,\n    filter: ({ fn: e, pure: t })=>De({\n            fn: e,\n            filter: 1,\n            pure: t\n        }),\n    run: Pe\n}, Le = (e)=>({\n        id: ue(),\n        current: e,\n        initial: e\n    }), Be = ({ current: e })=>e, We = (e, t)=>{\n    e.before || (e.before = []), ie(e.before, t);\n};\nlet He = null;\nconst Ue = (e, t)=>{\n    if (!e) return t;\n    if (!t) return e;\n    let r;\n    return (e.v.type === t.v.type && e.v.id > t.v.id || Ye(e.v.type) > Ye(t.v.type)) && (r = e, e = t, t = r), r = Ue(e.r, t), e.r = e.l, e.l = r, e;\n}, Ge = [];\nlet Je = 0;\nfor(; Je < 6;)ie(Ge, {\n    first: null,\n    last: null,\n    size: 0\n}), Je += 1;\nconst Ke = ()=>{\n    for(let e = 0; e < 6; e++){\n        const t = Ge[e];\n        if (t.size > 0) {\n            if (3 === e || 4 === e) {\n                t.size -= 1;\n                const e = He.v;\n                return He = Ue(He.l, He.r), e;\n            }\n            1 === t.size && (t.last = null);\n            const r = t.first;\n            return t.first = r.r, t.size -= 1, r.v;\n        }\n    }\n}, Qe = (e, t, r, n, a, o, s)=>Xe(0, {\n        a: null,\n        b: null,\n        node: r,\n        parent: n,\n        value: a,\n        page: t,\n        scope: o,\n        meta: s\n    }, e, 0), Xe = (e, t, r, n)=>{\n    const a = Ye(r), o = Ge[a], s = {\n        v: {\n            idx: e,\n            stack: t,\n            type: r,\n            id: n\n        },\n        l: null,\n        r: null\n    };\n    3 === a || 4 === a ? He = Ue(He, s) : (0 === o.size ? o.first = s : o.last.r = s, o.last = s), o.size += 1;\n}, Ye = (e)=>{\n    switch(e){\n        case \"child\":\n            return 0;\n        case \"pure\":\n            return 1;\n        case \"read\":\n            return 2;\n        case \"barrier\":\n            return 3;\n        case \"sampler\":\n            return 4;\n        case \"effect\":\n            return 5;\n        default:\n            return -1;\n    }\n}, Ze = new Set;\nlet et, tt = 1, rt = 0, nt = 0, at = null;\nconst ot = (e)=>{\n    et = e;\n}, st = (e)=>{\n    at = e;\n}, ct = (e, t)=>{\n    if (e) {\n        for(; e && !e.reg[t];)e = e.parent;\n        if (e) return e;\n    }\n    return null;\n}, lt = (e, t, r, n)=>{\n    const a = ct(e, r.id);\n    return a ? a.reg[r.id] : t ? (pt(t, r, n), t.reg[r.id]) : r;\n};\nlet dt;\nconst ut = (e)=>{\n    dt = e;\n}, ft = (e)=>e, pt = (e, r, n, a, o)=>{\n    const s = e.reg;\n    if (s[r.id]) return;\n    const i = r.sid, c = {\n        id: r.id,\n        current: r.initial,\n        meta: r.meta\n    };\n    if (c.id in e.values.idMap) c.current = e.values.idMap[c.id];\n    else if (i && i in e.values.sidMap && !(i in e.sidIdMap)) {\n        var l;\n        const t = null == r || null === (l = r.meta) || void 0 === l ? void 0 : l.serialize;\n        c.current = (e.fromSerialize && \"ignore\" !== t && (null == t ? void 0 : t.read) || ft)(e.values.sidMap[i]);\n    } else if (r.before && !o) {\n        let o = 0;\n        const i = n || !r.noInit || a;\n        t(r.before, (t)=>{\n            switch(t.type){\n                case \"map\":\n                    {\n                        const r = t.from;\n                        if ((r || t.fn) && (r && pt(e, r, n, a), i)) {\n                            const e = r && s[r.id].current;\n                            c.current = t.fn ? t.fn(e) : e;\n                        }\n                        break;\n                    }\n                case \"field\":\n                    pt(e, t.from, n, a), o || (o = 1, c.current = Array.isArray(c.current) ? [\n                        ...c.current\n                    ] : {\n                        ...c.current\n                    }), i && (c.current[t.field] = s[s[t.from.id].id].current);\n            }\n        });\n    }\n    i && (e.sidIdMap[i] = r.id), s[r.id] = c;\n}, mt = (e, t, r)=>{\n    try {\n        return t(B(r), e.scope, r);\n    } catch (t) {\n        console.error(t), e.fail = 1, e.failReason = t;\n    }\n}, ht = (t, r = {})=>($e(t) && (ht(t.or, r), e(t, (e, t)=>{\n        xe(e) || \"or\" === t || \"and\" === t || (r[t] = e);\n    }), ht(t.and, r)), r), gt = (e, t)=>{\n    se(e.next, t), se(V(e), t), se(T(e), t);\n}, yt = (e, t, r)=>{\n    let n;\n    e.next.length = 0, e.seq.length = 0, e.scope = null;\n    let a = T(e);\n    for(; n = a.pop();)gt(n, e), (t || r && \"sample\" !== e.meta.op || \"crosslink\" === n.family.type) && yt(n, t, \"on\" !== n.meta.op && r);\n    for(a = V(e); n = a.pop();)gt(n, e), r && \"crosslink\" === n.family.type && yt(n, t, \"on\" !== n.meta.op && r);\n}, bt = (e)=>e.clear(), vt = (e, { deep: t } = {})=>{\n    let r = 0;\n    if (e.ownerSet && e.ownerSet.delete(e), Y(e)) bt(W(e));\n    else if (re(e)) {\n        r = 1;\n        const t = e.history;\n        bt(t.events), bt(t.effects), bt(t.stores), bt(t.domains);\n    }\n    yt(E(e), !!t, r);\n}, kt = (e)=>u(()=>vt(e)), wt = (e, t, r, n, o)=>a({\n        node: r,\n        parent: e,\n        child: t,\n        scope: {\n            fn: o\n        },\n        meta: {\n            op: n\n        },\n        family: {\n            owners: [\n                e,\n                t\n            ],\n            links: t\n        },\n        regional: 1\n    }), St = (e)=>{\n    const t = \"forward\", [{ from: r, to: n }, o] = d(e, 1), s = l(t, o);\n    return ce(0, t, \"sample\", s), je(r, s, '\"from\"'), je(n, s, '\"to\"'), Ce(s, n, \"to\"), kt(a({\n        parent: r,\n        child: n,\n        meta: {\n            op: t,\n            config: o\n        },\n        family: {},\n        regional: 1\n    }));\n}, $t = (e, t)=>(r(Me(t), \".watch argument should be a function\"), kt(a({\n        scope: {\n            fn: t\n        },\n        node: [\n            Pe({\n                fn: Oe\n            })\n        ],\n        parent: e,\n        meta: {\n            op: \"watch\"\n        },\n        family: {\n            owners: e\n        },\n        regional: 1\n    }))), Mt = (e, t, r = \"event\")=>{\n    H(e) && H(e).hooks[r](t);\n}, xt = (e, t, r)=>{\n    const n = ht(r), a = \"domain\" === e, o = de(), { sid: s = null, named: i = null, domain: l = null, parent: d = l } = n, u = i || n.name || (a ? \"\" : o), f = c(u, d), p = {\n        op: t.kind = e,\n        name: t.shortName = u,\n        sid: t.sid = ve(s),\n        named: i,\n        unitId: t.id = o,\n        serialize: n.serialize,\n        derived: n.derived,\n        config: n\n    };\n    if (t.targetable = !n.derived, t.parent = d, t.compositeName = f, t.defaultConfig = n, t.getType = ()=>(ce(0, \"getType\", \"compositeName.fullName\"), f.fullName), !a) {\n        t.subscribe = (e)=>(ze(e), t.watch(Me(e) ? e : (t)=>e.next && e.next(t))), t[_] = ()=>t;\n        const e = be();\n        e && (p.nativeTemplate = e);\n    }\n    return p;\n}, zt = (e, t, r, n)=>{\n    let a;\n    $e(r) && (a = r, r = r.fn);\n    const o = p({\n        name: `${e.shortName} \\u2192 *`,\n        derived: 1,\n        and: a\n    });\n    return wt(e, o, n, t, r), o;\n}, At = \"undefined is used to skip updates. To allow undefined as a value provide explicit { skipVoid: false } option\", jt = (e, t, r, n, a)=>{\n    const o = L(t), s = qe({\n        store: o,\n        to: \"a\",\n        priority: \"read\"\n    });\n    \"map\" === r && (s.data.softRead = 1);\n    const i = [\n        s,\n        Ve(n)\n    ];\n    return f(\"storeOnMap\", o, i, Y(e) && L(e)), wt(e, t, i, r, a);\n}, Ct = (t, n, a, o, i, c)=>{\n    const d = l(\"combine\", o), u = t ? (e)=>[\n            ...e\n        ] : (e)=>({\n            ...e\n        }), p = t ? [] : {}, m = u(p), g = Le(m), y = Le(1);\n    g.type = t ? \"list\" : \"shape\", g.noInit = 1, f(\"combineBase\", g, y);\n    const b = h(m, {\n        name: s(a),\n        derived: 1,\n        ...c,\n        and: o\n    }), v = L(b);\n    v.noInit = 1, J(b, \"isCombine\", 1);\n    const k = Ee(g);\n    k.order = {\n        priority: \"barrier\"\n    };\n    const w = qe({\n        store: v,\n        to: \"b\",\n        priority: \"read\"\n    });\n    w.data.softRead = 1;\n    const S = [\n        _e((e, t, r)=>(r.scope && !r.scope.reg[g.id] && (r.c = 1), e)),\n        k,\n        qe({\n            store: y,\n            to: \"b\"\n        }),\n        _e((e, { key: t }, r)=>{\n            if (r.c || e !== r.a[t]) return n && r.b && (r.a = u(r.a)), r.a[t] = e, 1;\n        }, 1),\n        qe({\n            from: \"a\",\n            target: g\n        }),\n        qe({\n            from: \"value\",\n            store: 0,\n            target: y\n        }),\n        qe({\n            from: \"value\",\n            store: 1,\n            target: y,\n            priority: \"barrier\",\n            batch: 1\n        }),\n        Ee(g, 1, 1),\n        i && Ve(),\n        w\n    ];\n    if (e(a, (e, t)=>{\n        if (!Y(e)) return r(!Q(e) && !xe(e), `combine expects a store in a field ${t}`, d), void (m[t] = p[t] = e);\n        p[t] = e.defaultState, m[t] = e.getState();\n        const n = wt(e, b, S, \"combine\", i);\n        n.scope.key = t;\n        const a = L(e);\n        We(g, {\n            type: \"field\",\n            field: t,\n            from: a\n        }), f(\"combineField\", a, n);\n    }), b.defaultShape = a, We(v, {\n        type: \"map\",\n        from: g,\n        fn: i\n    }), !be()) if (i) {\n        const e = i(m);\n        !xe(e) || c && \"skipVoid\" in c || console.error(`${d}: ${At}`), v.current = e, v.initial = e, b.defaultState = e;\n    } else b.defaultState = p;\n    return b;\n}, Nt = (e, t, r)=>{\n    try {\n        return [\n            1,\n            e(...r)\n        ];\n    } catch (e) {\n        return t(e), [\n            0,\n            null\n        ];\n    }\n}, It = (e, t, r, n, a)=>(s)=>{\n        o({\n            target: [\n                n,\n                Ot\n            ],\n            params: [\n                r ? {\n                    status: \"done\",\n                    params: e,\n                    result: s\n                } : {\n                    status: \"fail\",\n                    params: e,\n                    error: s\n                },\n                {\n                    value: s,\n                    fn: r ? t.rs : t.rj\n                }\n            ],\n            defer: 1,\n            page: a.page,\n            scope: a.scope,\n            meta: a.meta\n        });\n    }, Ot = a({\n    node: [\n        Pe({\n            fn: ({ fn: e, value: t })=>e(t)\n        })\n    ],\n    meta: {\n        op: \"fx\",\n        fx: \"sidechain\"\n    }\n}), Rt = [\n    \"source\",\n    \"clock\",\n    \"target\"\n], Ft = (e, t)=>e + `: ${t} should be defined`, qt = (e, t, n, a, o, s, i, c, d, u, m, y)=>{\n    const b = l(e, c), v = !!o;\n    r(!xe(n) || !xe(t), Ft(b, \"either source or clock\"));\n    let k = 0;\n    xe(n) ? k = 1 : Q(n) || (n = g(n)), xe(t) ? t = n : (je(t, b, \"clock\"), Array.isArray(t) && (t = $(t))), k && (n = t), c || i || (i = n.shortName);\n    let w = \"none\";\n    (m || a) && (Q(a) ? w = \"unit\" : (r(Me(a), \"`filter` should be function or unit\"), w = \"fn\")), o ? (je(o, b, \"target\"), Ce(b, o)) : \"none\" === w && u && Y(n) && Y(t) ? o = h(s ? s(Be(L(n)), Be(L(t))) : Be(L(n)), {\n        name: i,\n        sid: y,\n        or: c\n    }) : (o = p({\n        name: i,\n        derived: 1,\n        or: c\n    }), f(\"sampleTarget\", E(o)));\n    const S = Le();\n    let M = [];\n    if (\"unit\" === w) {\n        const [r, n, s] = Pt(a, o, t, S, e);\n        s || M.push(...Dt(n)), M.push(...Dt(r));\n    }\n    const x = [];\n    if (k) d && x.push(Ee(S, 1, 1));\n    else {\n        const [r, a, s] = Pt(n, o, t, S, e);\n        s || x.push(...Dt(a)), x.push(Ee(r, 1, d));\n    }\n    const z = wt(t, o, [\n        f(\"sampleSourceLoader\"),\n        qe({\n            from: \"stack\",\n            target: S\n        }),\n        ...x,\n        ...M,\n        Ee(S),\n        \"fn\" === w && Ve((e, t, { a: r })=>a(e, r), 1),\n        s && Ve(Ne),\n        f(\"sampleSourceUpward\", v)\n    ], e, s);\n    return we(n, [\n        z\n    ]), Object.assign(z.meta, c, {\n        joint: 1\n    }), o;\n}, Dt = (e)=>[\n        Ee(e),\n        _e((e, t, { a: r })=>r, 1)\n    ], Pt = (e, t, r, n, o)=>{\n    const s = Y(e), i = s ? L(e) : Le(), c = Le(s);\n    return s || a({\n        parent: e,\n        node: [\n            qe({\n                from: \"stack\",\n                target: i\n            }),\n            qe({\n                from: \"value\",\n                store: 1,\n                target: c\n            })\n        ],\n        family: {\n            owners: [\n                e,\n                t,\n                r\n            ],\n            links: t\n        },\n        meta: {\n            op: o\n        },\n        regional: 1\n    }), f(\"sampleSource\", c, i, n), [\n        i,\n        c,\n        s\n    ];\n}, _t = (e, t, r, n)=>{\n    const a = e[t];\n    a && o({\n        target: a,\n        params: Array.isArray(a) ? a.map(()=>r) : r,\n        defer: 1,\n        stack: n\n    });\n}, Et = \"23.2.0\", Vt = (e)=>!e.node.meta.isCombine || e.parent && \"combine\" !== e.parent.node.meta.op, Tt = (e)=>e;\n //# sourceMappingURL=effector.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZWZmZWN0b3IvZWZmZWN0b3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxFQUFFQSxDQUFDLEVBQUNDLENBQUM7SUFBRSxJQUFJLE1BQU1DLEtBQUtGLEVBQUVDLEVBQUVELENBQUMsQ0FBQ0UsRUFBRSxFQUFDQTtBQUFFO0FBQUMsU0FBU0QsRUFBRUQsQ0FBQyxFQUFDQyxDQUFDO0lBQUVELEVBQUVHLE9BQU8sQ0FBQ0Y7QUFBRTtBQUFDLFNBQVNDLEVBQUVGLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsSUFBRyxDQUFDRixHQUFFLE1BQU1JLE1BQU0sQ0FBQyxFQUFFRixJQUFFQSxJQUFFLE9BQUssR0FBRyxFQUFFRCxFQUFFLENBQUM7QUFBQztBQUFDLFNBQVNJLEVBQUVMLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE1BQU1DLElBQUVJLEVBQUVOLEdBQUdPLElBQUksSUFBRSxDQUFDO0lBQUVDLEtBQUc7UUFBQ0MsSUFBR0gsRUFBRU4sR0FBR1MsRUFBRTtRQUFDQyxRQUFPRjtRQUFHRyxPQUFNWDtRQUFFWSxVQUFTVixFQUFFVSxRQUFRLElBQUVDO1FBQUtDLFNBQVFaLEVBQUVZLE9BQU8sSUFBRU4sTUFBSUEsR0FBR00sT0FBTztRQUFDUCxNQUFLTDtJQUFDO0lBQUUsSUFBRztRQUFDLE9BQU9EO0lBQUcsU0FBUTtRQUFDYyxHQUFHLFdBQVVQLEtBQUdRLEVBQUVSO0lBQUc7QUFBQztBQUFDLFNBQVNTLEVBQUUsRUFBQ0MsTUFBS2xCLElBQUUsRUFBRSxFQUFDbUIsTUFBS2pCLENBQUMsRUFBQ2tCLFFBQU9mLENBQUMsRUFBQ0ssUUFBT08sSUFBRWYsS0FBR0csQ0FBQyxFQUFDZ0IsSUFBR0MsQ0FBQyxFQUFDQyxRQUFPQyxDQUFDLEVBQUNDLE9BQU1DLElBQUVKLEtBQUdFLENBQUMsRUFBQ0csT0FBTUMsSUFBRSxDQUFDLENBQUMsRUFBQ3JCLE1BQUtzQixJQUFFLENBQUMsQ0FBQyxFQUFDQyxRQUFPQyxJQUFFO0lBQUNDLE1BQUs7QUFBUyxDQUFDLEVBQUNDLFVBQVNDLENBQUMsRUFBQyxHQUFDLENBQUMsQ0FBQztJQUFFLE1BQU1DLElBQUVDLEdBQUduQixJQUFHb0IsSUFBRUQsR0FBR0wsRUFBRU8sS0FBSyxHQUFFQyxJQUFFSCxHQUFHTCxFQUFFUyxNQUFNLEdBQUVDLElBQUUsRUFBRTtJQUFDeEMsRUFBRUQsR0FBR0EsQ0FBQUEsSUFBR0EsS0FBRzBDLEdBQUdELEdBQUV6QztJQUFLLE1BQU0yQyxJQUFFO1FBQUNsQyxJQUFHbUM7UUFBS0MsS0FBSUo7UUFBRUssTUFBS1YsR0FBR1Y7UUFBR25CLE1BQUtzQjtRQUFFRixPQUFNQztRQUFFRSxRQUFPO1lBQUNFLE1BQUtELEVBQUVDLElBQUksSUFBRTtZQUFZTSxPQUFNRDtZQUFFRyxRQUFPRDtRQUFDO0lBQUM7SUFBRSxPQUFPdEMsRUFBRW9DLEdBQUdyQyxDQUFBQSxJQUFHMEMsR0FBR0ssRUFBRS9DLElBQUcyQyxLQUFLMUMsRUFBRXNDLEdBQUd2QyxDQUFBQSxJQUFHMEMsR0FBR00sRUFBRWhELElBQUcyQyxLQUFLMUMsRUFBRWtDLEdBQUduQyxDQUFBQSxJQUFHMEMsR0FBRzFDLEVBQUU4QyxJQUFJLEVBQUNILEtBQUtULEtBQUcxQixNQUFJeUMsR0FBR0MsRUFBRTFDLEtBQUk7UUFBQ21DO0tBQUUsR0FBRUE7QUFBQztBQUFDLFNBQVNyQixFQUFFdEIsQ0FBQyxFQUFDRSxDQUFDLEVBQUNHLENBQUM7SUFBRSxJQUFJWSxHQUFFSyxJQUFFNkIsSUFBRzNCLElBQUUsTUFBS0UsSUFBRTBCO0lBQUcsSUFBR3BELEVBQUV1QixNQUFNLElBQUdyQixDQUFBQSxJQUFFRixFQUFFcUQsTUFBTSxFQUFDaEQsSUFBRUwsRUFBRXNELEtBQUssRUFBQ3JDLElBQUVqQixFQUFFTyxJQUFJLEVBQUNlLElBQUUsVUFBU3RCLElBQUVBLEVBQUV1RCxJQUFJLEdBQUNqQyxHQUFFdEIsRUFBRXdELEtBQUssSUFBR2hDLENBQUFBLElBQUV4QixFQUFFd0QsS0FBSyxHQUFFOUIsSUFBRStCLEVBQUV6RCxNQUFJMEIsR0FBRTFCLElBQUVBLEVBQUV1QixNQUFNLEdBQUVHLEtBQUcwQixNQUFJMUIsTUFBSTBCLE1BQUtBLENBQUFBLEtBQUcsSUFBRyxHQUFHTSxNQUFNQyxPQUFPLENBQUMzRCxJQUFHLElBQUksSUFBSUMsSUFBRSxHQUFFQSxJQUFFRCxFQUFFNEQsTUFBTSxFQUFDM0QsSUFBSTRELEdBQUcsUUFBT3ZDLEdBQUVoQixFQUFFTixDQUFDLENBQUNDLEVBQUUsR0FBRXVCLEdBQUV0QixDQUFDLENBQUNELEVBQUUsRUFBQ3lCLEdBQUVUO1NBQVE0QyxHQUFHLFFBQU92QyxHQUFFaEIsRUFBRU4sSUFBR3dCLEdBQUV0QixHQUFFd0IsR0FBRVQ7SUFBRyxJQUFHWixLQUFHLENBQUN5RCxJQUFHO0lBQU8sTUFBTWxDLElBQUU7UUFBQ21DLFFBQU9EO1FBQUdFLGFBQVliO1FBQUd4QixPQUFNeUI7UUFBR2EsU0FBUUM7UUFBR0MsUUFBT0M7SUFBRTtJQUFFLElBQUl2QyxHQUFFRSxHQUFFRyxHQUFFQyxHQUFFRSxHQUFFRTtJQUFFdUIsS0FBRztJQUFFOUQsR0FBRSxNQUFLbUMsSUFBRWtDLE1BQU07UUFBQyxNQUFLLEVBQUNDLEtBQUl0RSxDQUFDLEVBQUN3RCxPQUFNdEQsQ0FBQyxFQUFDOEIsTUFBSzNCLENBQUMsRUFBQyxHQUFDOEI7UUFBRUQsSUFBRWhDLEVBQUVnQixJQUFJLEVBQUNpQyxLQUFHZCxJQUFFbkMsRUFBRXFELElBQUksRUFBQ0gsS0FBR0ssRUFBRXZELElBQUdtQyxJQUFFRSxJQUFFRixFQUFFa0MsR0FBRyxHQUFDbkIsTUFBS2IsQ0FBQUEsSUFBRWEsR0FBR21CLEdBQUc7UUFBRSxNQUFNdEQsSUFBRSxDQUFDLENBQUNvQixHQUFFZixJQUFFLENBQUMsQ0FBQzhCLElBQUc1QixJQUFFO1lBQUNnRCxNQUFLO1lBQUU3QyxPQUFNTyxFQUFFUCxLQUFLO1FBQUE7UUFBRUUsSUFBRUUsSUFBRTtRQUFFLElBQUksSUFBSTlCLElBQUVELEdBQUVDLElBQUVpQyxFQUFFVyxHQUFHLENBQUNlLE1BQU0sSUFBRSxDQUFDL0IsR0FBRTVCLElBQUk7WUFBQyxNQUFNeUIsSUFBRVEsRUFBRVcsR0FBRyxDQUFDNUMsRUFBRTtZQUFDLElBQUd5QixFQUFFK0MsS0FBSyxFQUFDO2dCQUFDLE1BQUssRUFBQ0MsVUFBU3pELENBQUMsRUFBQzBELFdBQVVyRCxDQUFDLEVBQUMsR0FBQ0ksRUFBRStDLEtBQUssRUFBQ2pELElBQUVGLElBQUVlLElBQUUsQ0FBQyxFQUFFQSxFQUFFdUMsTUFBTSxDQUFDLENBQUMsRUFBRXRELEVBQUUsQ0FBQyxHQUFDQSxJQUFFO2dCQUFFLElBQUdyQixNQUFJRCxLQUFHSyxNQUFJWSxHQUFFO29CQUFDSyxJQUFFdUQsR0FBR0MsR0FBRyxDQUFDdEQsTUFBS3FELENBQUFBLEdBQUdFLEdBQUcsQ0FBQ3ZELElBQUd3RCxHQUFHL0UsR0FBRUMsR0FBRWUsR0FBRUssRUFBQyxJQUFHMEQsR0FBRy9FLEdBQUVDLEdBQUVlLEdBQUU7b0JBQUcsU0FBU2pCO2dCQUFDO2dCQUFDc0IsS0FBR3VELEdBQUdJLE1BQU0sQ0FBQ3pEO1lBQUU7WUFBQyxPQUFPRSxFQUFFTSxJQUFJO2dCQUFFLEtBQUk7b0JBQU07d0JBQUMsTUFBTWhDLElBQUUwQixFQUFFd0QsSUFBSTt3QkFBQyxJQUFJakY7d0JBQUUsT0FBT0QsRUFBRW1CLElBQUk7NEJBQUUsS0FBSTtnQ0FBUWxCLElBQUVpRCxFQUFFaEQ7Z0NBQUc7NEJBQU0sS0FBSTs0QkFBSSxLQUFJO2dDQUFJRCxJQUFFQyxDQUFDLENBQUNGLEVBQUVtQixJQUFJLENBQUM7Z0NBQUM7NEJBQU0sS0FBSTtnQ0FBUWxCLElBQUVELEVBQUVtRixLQUFLO2dDQUFDOzRCQUFNLEtBQUk7Z0NBQVEsSUFBRzVDLEtBQUcsQ0FBQ0EsQ0FBQyxDQUFDdkMsRUFBRW1GLEtBQUssQ0FBQzFFLEVBQUUsQ0FBQyxFQUFDLElBQUdRLEdBQUU7b0NBQUMsTUFBTWhCLElBQUVtRixHQUFHL0MsR0FBRXJDLEVBQUVtRixLQUFLLENBQUMxRSxFQUFFO29DQUFFUCxFQUFFcUQsSUFBSSxHQUFDbEIsSUFBRXBDLEdBQUVBLElBQUVzQyxJQUFFdEMsRUFBRXNFLEdBQUcsR0FBQ2pELElBQUcrRCxDQUFBQSxHQUFHakMsSUFBR3BELEVBQUVtRixLQUFLLEVBQUMsR0FBRSxHQUFFbkYsRUFBRXNGLFFBQVEsR0FBRS9DLElBQUVhLEdBQUdtQixHQUFHLElBQUVoQyxJQUFFLEtBQUs7Z0NBQUMsT0FBTWpCLEtBQUcrRCxHQUFHakMsSUFBR3BELEVBQUVtRixLQUFLLEVBQUMsR0FBRSxHQUFFbkYsRUFBRXNGLFFBQVE7Z0NBQUVyRixJQUFFc0YsR0FBR2hELEtBQUdBLENBQUMsQ0FBQ3ZDLEVBQUVtRixLQUFLLENBQUMxRSxFQUFFLENBQUMsSUFBRVQsRUFBRW1GLEtBQUs7d0JBQUM7d0JBQUMsT0FBT25GLEVBQUVxQixFQUFFOzRCQUFFLEtBQUk7Z0NBQVFuQixFQUFFUyxLQUFLLEdBQUNWO2dDQUFFOzRCQUFNLEtBQUk7NEJBQUksS0FBSTtnQ0FBSUMsQ0FBQyxDQUFDRixFQUFFcUIsRUFBRSxDQUFDLEdBQUNwQjtnQ0FBRTs0QkFBTSxLQUFJO2dDQUFRdUYsR0FBR25ELEdBQUVlLElBQUdwRCxFQUFFdUIsTUFBTSxFQUFDLEdBQUdrRSxPQUFPLEdBQUN4Rjt3QkFBQzt3QkFBQztvQkFBSztnQkFBQyxLQUFJO29CQUFVLE1BQU1ELEtBQUUwQixFQUFFd0QsSUFBSTtvQkFBQyxJQUFHbEYsR0FBRTBGLEVBQUUsRUFBQzt3QkFBQ3hCLEtBQUcsWUFBVWhDLEVBQUUzQixJQUFJLENBQUNvRixFQUFFLEVBQUN2QixLQUFHcEUsR0FBRTRGLElBQUk7d0JBQUMsTUFBTTNGLElBQUVELEdBQUU2RixJQUFJLEdBQUMsQ0FBQyxHQUFFN0YsR0FBRTBGLEVBQUUsRUFBRXhDLEVBQUVoRCxJQUFHc0IsRUFBRUcsS0FBSyxFQUFDekIsS0FBRzRGLEdBQUd0RSxHQUFFeEIsR0FBRTBGLEVBQUUsRUFBQ3hGO3dCQUFHRixHQUFFK0YsTUFBTSxHQUFDaEUsSUFBRSxDQUFDOUIsSUFBRUMsRUFBRVMsS0FBSyxHQUFDVixHQUFFaUUsS0FBR3RDLEVBQUVxQyxPQUFPLEVBQUNHLEtBQUd4QyxFQUFFdUMsTUFBTTtvQkFBQTtZQUFDO1lBQUN0QyxJQUFFTCxFQUFFZ0QsSUFBSSxJQUFFekM7UUFBQztRQUFDLElBQUdpRSxNQUFJQSxHQUFHOUYsR0FBRXNCLElBQUcsQ0FBQ0ssR0FBRTtZQUFDLE1BQU03QixJQUFFa0QsRUFBRWhELElBQUdHLElBQUVvRCxFQUFFdkQ7WUFBRyxJQUFHRCxFQUFFaUMsRUFBRVksSUFBSSxFQUFFN0MsQ0FBQUE7Z0JBQUk0RCxHQUFHLFNBQVF4QixHQUFFcEMsR0FBRUMsR0FBRUYsR0FBRUs7WUFBRSxJQUFJQSxHQUFFO2dCQUFDNkIsRUFBRTNCLElBQUksQ0FBQzBGLGFBQWEsSUFBRXBDLEdBQUcsU0FBUXhCLEdBQUVoQyxFQUFFNkYsT0FBTyxFQUFDaEcsR0FBRUYsR0FBRUssSUFBRzZCLEVBQUUzQixJQUFJLENBQUM0RixXQUFXLElBQUV0QyxHQUFHLFNBQVF4QixHQUFFaEMsRUFBRThGLFdBQVcsRUFBQ2pHLEdBQUVGLEdBQUVLLElBQUc2QixFQUFFM0IsSUFBSSxDQUFDNkYsYUFBYSxJQUFFdkMsR0FBRyxTQUFReEIsR0FBRWhDLEVBQUVnRyxpQkFBaUIsRUFBQ25HLEdBQUVGLEdBQUVLO2dCQUFHLE1BQU1ZLElBQUVaLEVBQUVpRyxlQUFlLENBQUNwRSxFQUFFekIsRUFBRSxDQUFDO2dCQUFDUSxLQUFHaEIsRUFBRWdCLEdBQUdoQixDQUFBQTtvQkFBSTRELEdBQUcsU0FBUXhCLEdBQUVwQyxHQUFFQyxHQUFFRixHQUFFSztnQkFBRTtZQUFHO1FBQUM7SUFBQztJQUFDeUQsS0FBR2xDLEVBQUVtQyxNQUFNLEVBQUNaLEtBQUd2QixFQUFFb0MsV0FBVyxFQUFDWixLQUFHSyxFQUFFN0I7QUFBRTtBQUFDLFNBQVNKLEVBQUV2QixDQUFDLEVBQUNDLElBQUUsU0FBUztJQUFFLElBQUlHLElBQUVILElBQUUsS0FBSWUsSUFBRSxJQUFHSyxJQUFFO0lBQUUsT0FBT3RCLEVBQUVDLEdBQUdELENBQUFBO1FBQUlzQixJQUFFLE1BQUssU0FBTXRCLEtBQUlLLENBQUFBLEtBQUdZLEdBQUVaLEtBQUdrRyxFQUFFdkcsS0FBR3dHLEVBQUV4RyxHQUFHeUcsUUFBUSxHQUFDekcsRUFBRTBHLFFBQVEsRUFBQyxHQUFHcEYsS0FBRyxHQUFFTCxJQUFFLElBQUc7SUFBRSxJQUFJWixJQUFFO0FBQUc7QUFBQyxTQUFTcUIsRUFBRTFCLENBQUMsRUFBQ0MsQ0FBQztJQUFFRCxFQUFFMkcsU0FBUyxHQUFDMUcsR0FBRTJHLE9BQU9DLE1BQU0sQ0FBQ0wsRUFBRXhHLElBQUc0QixFQUFFM0IsR0FBRWUsRUFBRWhCO0FBQUk7QUFBQyxTQUFTNEIsRUFBRTVCLENBQUMsRUFBQ0MsQ0FBQztJQUFFLElBQUlDLEdBQUVHO0lBQUUsTUFBTVksSUFBRWpCO0lBQUUsSUFBR0MsR0FBRTtRQUFDLE1BQU1nQixJQUFFdUYsRUFBRXZHO1FBQUcsTUFBSUQsRUFBRTRELE1BQU0sR0FBRTFELENBQUFBLElBQUVlLEVBQUU2RixJQUFJLEVBQUN6RyxJQUFFWSxFQUFFd0YsUUFBUSxJQUFHdkcsQ0FBQUEsSUFBRWUsRUFBRTZGLElBQUksQ0FBQ0MsTUFBTSxDQUFDO1lBQUMvRztTQUFFLEdBQUVLLElBQUUsTUFBSVksRUFBRXdGLFFBQVEsQ0FBQzdDLE1BQU0sR0FBQzVELElBQUVpQixFQUFFd0YsUUFBUSxHQUFDLE1BQUl6RyxDQUFBQTtJQUFFLE9BQU1FLElBQUUsTUFBSUYsRUFBRTRELE1BQU0sR0FBQyxFQUFFLEdBQUM7UUFBQzVEO0tBQUUsRUFBQ0ssSUFBRUw7SUFBRSxPQUFNO1FBQUMyRyxXQUFVMUY7UUFBRXdGLFVBQVNwRztRQUFFeUcsTUFBSzVHO0lBQUM7QUFBQztBQUFDLFNBQVMyQixFQUFFN0IsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsSUFBRyxDQUFDQSxHQUFFLE9BQU9EO0lBQUUsSUFBRyxDQUFDQyxFQUFFK0csSUFBSSxJQUFFLENBQUMvRyxFQUFFZ0gsS0FBSyxJQUFFLENBQUNoSCxFQUFFaUgsR0FBRyxFQUFDLE9BQU9sSDtJQUFFLElBQUlFLElBQUUsQ0FBQyxDQUFDLEVBQUVGLEVBQUUsQ0FBQyxDQUFDO0lBQUMsTUFBTUssSUFBRUosRUFBRWdILEtBQUssSUFBRWhILEVBQUUrRyxJQUFJO0lBQUMzRyxLQUFJSCxDQUFBQSxLQUFHLENBQUMsT0FBTyxFQUFFRyxFQUFFLENBQUMsQ0FBQztJQUFFLE1BQU1ZLElBQUVoQixFQUFFaUgsR0FBRztJQUFDLE9BQU0sQ0FBQzdHLEtBQUdZLEtBQUlmLENBQUFBLEtBQUcsQ0FBQyxFQUFFLEVBQUVlLEVBQUVrRyxJQUFJLENBQUMsQ0FBQyxFQUFFbEcsRUFBRW1HLElBQUksQ0FBQyxDQUFDLEVBQUVuRyxFQUFFb0csTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFFbkg7QUFBQztBQUFDLFNBQVM2QixFQUFFL0IsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsTUFBTUMsSUFBRUQsSUFBRUQsSUFBRUEsQ0FBQyxDQUFDLEVBQUU7SUFBQ3NILEdBQUdwSDtJQUFHLElBQUlHLElBQUVILEVBQUVxSCxFQUFFO0lBQUMsTUFBTXRHLElBQUVmLEVBQUVzSCxHQUFHO0lBQUMsSUFBR3ZHLEdBQUU7UUFBQyxNQUFNZixJQUFFRCxJQUFFZ0IsSUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFBQyxJQUFHd0csR0FBR3ZILE1BQUksU0FBUUEsR0FBRTtZQUFDLE1BQU1BLElBQUU2QixFQUFFZCxHQUFFaEI7WUFBR0QsSUFBRUUsQ0FBQyxDQUFDLEVBQUUsRUFBQ0csSUFBRTtnQkFBQyxHQUFHQSxDQUFDO2dCQUFDLEdBQUdILENBQUMsQ0FBQyxFQUFFO1lBQUE7UUFBQyxPQUFNRixJQUFFaUI7SUFBQztJQUFDLE9BQU07UUFBQ2pCO1FBQUVLO0tBQUU7QUFBQTtBQUFDLFNBQVM2QixFQUFFbEMsQ0FBQztJQUFFLE1BQU1DLElBQUUsSUFBSUQ7SUFBSSxPQUFPQyxFQUFFeUgsV0FBVyxHQUFDLElBQUkxSCxLQUFJQztBQUFDO0FBQUMsU0FBU2tDLEVBQUVuQyxDQUFDLEVBQUMsR0FBR0MsQ0FBQztJQUFFLE1BQU1DLElBQUVXO0lBQUssSUFBR1gsR0FBRTtRQUFDLE1BQU1HLElBQUVILEVBQUV5SCxRQUFRLENBQUMzSCxFQUFFO1FBQUMsSUFBR0ssR0FBRSxPQUFPQSxFQUFFSCxNQUFLRDtJQUFFO0FBQUM7QUFBQyxTQUFTb0MsRUFBRXJDLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE1BQU1JLElBQUV1SCxHQUFHO1FBQUNMLElBQUd0SDtRQUFFdUgsS0FBSSxZQUFVLE9BQU94SCxJQUFFO1lBQUNnSCxNQUFLaEg7UUFBQyxJQUFFQTtJQUFDLElBQUd3QixJQUFFSyxFQUFFLFNBQVF4QixJQUFHcUIsSUFBRSxDQUFDMUIsR0FBRSxHQUFHQyxJQUFLQyxDQUFBQSxFQUFFLENBQUMySCxFQUFFbkcsR0FBRSxZQUFXLG1FQUFrRUYsSUFBR3RCLEVBQUUsQ0FBQ2tFLElBQUcsb0ZBQW1GNUMsSUFBRzJCLEtBQUcsQ0FBQyxDQUFDbkQsR0FBRUMsR0FBRUMsR0FBRUc7WUFBSyxNQUFNWSxJQUFFa0M7WUFBRyxJQUFJN0IsSUFBRTtZQUFLLElBQUdyQixHQUFFLElBQUlxQixJQUFFNkIsSUFBRzdCLEtBQUdBLEVBQUVWLFFBQVEsS0FBR1gsR0FBR3FCLElBQUVOLEVBQUVNO1lBQUd3RyxHQUFHeEc7WUFBRyxNQUFNRSxJQUFFeEIsRUFBRStILE1BQU0sQ0FBQzdILEdBQUVHO1lBQUcsT0FBT3lILEdBQUc3RyxJQUFHTztRQUFDLEdBQUdFLEdBQUVFLEdBQUU1QixHQUFFQyxLQUFHeUIsRUFBRXFHLE1BQU0sQ0FBQy9ILEdBQUVDLEVBQUMsR0FBRzJCLElBQUVmLE1BQUtrQixJQUFFNkUsT0FBT0MsTUFBTSxDQUFDbkYsR0FBRTtRQUFDc0csVUFBUy9HLEVBQUU7WUFBQ1YsTUFBSzBILEdBQUc1SCxFQUFFNkgsUUFBUSxJQUFFLFNBQVF4RyxHQUFFckI7WUFBRzRCLFVBQVM7UUFBQztRQUFHOEYsUUFBTy9ILENBQUFBLElBQUlzQixDQUFBQSxFQUFFO2dCQUFDQyxRQUFPRztnQkFBRTJCLFFBQU9yRDtnQkFBRTJCLE9BQU15QjtZQUFFLElBQUdwRCxDQUFBQTtRQUFHbUksT0FBTW5JLENBQUFBLElBQUdvSSxHQUFHMUcsR0FBRTFCO1FBQUdxSSxLQUFJckksQ0FBQUEsSUFBR3NJLEdBQUc1RyxHQUFFLE9BQU0xQixHQUFFO2dCQUFDdUk7YUFBSztRQUFFeEMsUUFBTy9GLENBQUFBLElBQUdzSSxHQUFHNUcsR0FBRSxVQUFTMUIsRUFBRTBGLEVBQUUsR0FBQzFGLElBQUVBLEVBQUUwRixFQUFFLEVBQUM7Z0JBQUM2QyxHQUFHQyxJQUFHO2FBQUc7UUFBRUMsV0FBVXpJLENBQUFBLElBQUdzSSxHQUFHNUcsR0FBRSxhQUFZMUIsR0FBRTtnQkFBQ3VJO2dCQUFLRyxHQUFJMUksQ0FBQUEsSUFBRyxDQUFDMkksR0FBRzNJLElBQUk7YUFBRztRQUFFNEksU0FBUTVJLENBQUM7WUFBRUUsRUFBRXdCLEVBQUVtSCxVQUFVLEVBQUMseUVBQXdFckg7WUFBRyxNQUFNdkIsSUFBRW9DLEVBQUUsU0FBWVgsRUFBRWlGLFNBQVMsRUFBQztnQkFBQ2pHLFFBQU9NLEVBQUVVO1lBQUU7WUFBRyxPQUFPUyxFQUFFLGdCQUFlN0IsRUFBRUwsS0FBSTZJLEdBQUc3SSxHQUFFeUIsR0FBRTtnQkFBQzZHO2FBQUssRUFBQyxXQUFVdkksSUFBRytJLEdBQUdySCxHQUFFekIsSUFBR0E7UUFBQztJQUFDO0lBQUcsT0FBTyxRQUFNSSxLQUFHQSxFQUFFMkksTUFBTSxJQUFFM0ksRUFBRTJJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLENBQUNuSCxJQUFHb0gsRUFBRXBILEdBQUUsTUFBS0EsRUFBRWlHLFFBQVEsQ0FBQ3ZILEVBQUUsR0FBRU0sR0FBR2dCLEVBQUVpRyxRQUFRLEdBQUVqRztBQUFDO0FBQUMsU0FBU1EsRUFBRXZDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDWSxDQUFDLEVBQUNLLENBQUMsRUFBQ0UsQ0FBQztJQUFFLE9BQU80SCxHQUFHbkksR0FBRSxDQUFDLEVBQUVPLEVBQUUsQ0FBQyxFQUFFbkIsRUFBRSxDQUFDLEVBQUMsbUJBQWtCSCxFQUFFbUosR0FBRy9ILElBQUcsd0NBQXVDRSxJQUFHOEgsR0FBRyxDQUFDekIsRUFBRTdILEdBQUUsWUFBVyxDQUFDLEVBQUVLLEVBQUUsaUJBQWlCLENBQUMsRUFBQyxDQUFDLEVBQUVBLEVBQUUsaUNBQWlDLENBQUMsRUFBQ21CLElBQUd2QixFQUFFeUQsTUFBTUMsT0FBTyxDQUFDMUMsS0FBR0EsSUFBRTtRQUFDQTtLQUFFLEVBQUVoQixDQUFBQTtRQUFJRCxFQUFFdUosR0FBRyxDQUFDdEosSUFBR3VKLEVBQUV4SixHQUFHeUosR0FBRyxDQUFDeEosR0FBRXlKLEdBQUdDLEdBQUcxSixHQUFFRCxHQUFFLE1BQUs0SixJQUFHdEk7SUFBSSxJQUFJdEI7QUFBQztBQUFDLFNBQVN5QyxFQUFFekMsQ0FBQyxFQUFDSyxDQUFDO0lBQUUsTUFBTW1CLElBQUVvRyxHQUFHdkgsSUFBR3FCLElBQUVtSSxHQUFHN0osSUFBRzRCLElBQUVDLEVBQUUsU0FBUUwsSUFBR08sSUFBRU0sRUFBRTtRQUFDNEUsT0FBTTtRQUFVNkMsU0FBUTtJQUFDO0lBQUczSCxFQUFFLGFBQVlUO0lBQUcsTUFBTVEsSUFBRVIsRUFBRWpCLEVBQUUsRUFBQ2tDLElBQUUsY0FBYW5CLEdBQUV1SSxJQUFFcEgsS0FBRyxDQUFDbkIsRUFBRXdJLFFBQVE7SUFBQ1YsR0FBRyxDQUFFM0csQ0FBQUEsS0FBR25CLEVBQUV3SSxRQUFRLEdBQUUsb0JBQW1CLGdCQUFlcEk7SUFBRyxNQUFNcUksSUFBRTtRQUFDQyxhQUFZLElBQUlDO1FBQUlDLFNBQVFySTtRQUFFc0ksY0FBYXJLO1FBQUVzSyxVQUFTNUk7UUFBRTZJO1lBQVcsSUFBSXZLLEdBQUVDLElBQUV5QjtZQUFFLElBQUd5QixJQUFHO2dCQUFDLElBQUlsRCxJQUFFa0Q7Z0JBQUcsTUFBS2xELEtBQUcsQ0FBQ0EsRUFBRXNFLEdBQUcsQ0FBQ3JDLEVBQUUsRUFBRWpDLElBQUVlLEVBQUVmO2dCQUFHQSxLQUFJRCxDQUFBQSxJQUFFQyxDQUFBQTtZQUFFO1lBQUMsT0FBTSxDQUFDRCxLQUFHb0QsTUFBS2lDLENBQUFBLEdBQUdqQyxJQUFHMUIsR0FBRSxJQUFHMUIsSUFBRW9ELEVBQUMsR0FBR3BELEtBQUlDLENBQUFBLElBQUVELEVBQUV1RSxHQUFHLENBQUNyQyxFQUFFLEdBQUVxRCxHQUFHdEY7UUFBRTtRQUFFdUssVUFBU3hLLENBQUFBLElBQUdzQixFQUFFO2dCQUFDQyxRQUFPMEk7Z0JBQUU1RyxRQUFPckQ7Z0JBQUVzRCxPQUFNO2dCQUFFM0IsT0FBTXlCO1lBQUU7UUFBR3FILE9BQU0sQ0FBQyxHQUFHekssSUFBS0UsQ0FBQUEsRUFBRStKLEVBQUVwQixVQUFVLEVBQUMsNENBQTJDakgsSUFBRzNCLEVBQUVELEdBQUdBLENBQUFBLElBQUd1QyxFQUFFMEgsR0FBRSxVQUFTakssR0FBRyxJQUFJaUssRUFBRUksWUFBWSxFQUFFekksS0FBS3FJLENBQUFBO1FBQUdTLElBQUcsQ0FBQzFLLEdBQUVDLElBQUtDLENBQUFBLEVBQUUrSixFQUFFcEIsVUFBVSxFQUFDLHlDQUF3Q2pILElBQUdXLEVBQUUwSCxHQUFFLE9BQU1qSyxHQUFFQyxHQUFFMkIsRUFBQztRQUFHMkgsS0FBSXZKLENBQUM7WUFBRSxNQUFNQyxJQUFFdUosRUFBRVMsR0FBR1UsR0FBRyxDQUFDM0s7WUFBRyxPQUFPQyxLQUFJQSxDQUFBQSxLQUFJdUosRUFBRVMsR0FBR2hGLE1BQU0sQ0FBQ2pGLEVBQUMsR0FBR2lLO1FBQUM7UUFBRTVCLEtBQUlySSxDQUFDLEVBQUNDLENBQUM7WUFBRSxJQUFJQyxHQUFFRztZQUFFb0gsR0FBR3pILE1BQUtFLENBQUFBLElBQUVGLEdBQUVBLElBQUVBLEVBQUUwRixFQUFFO1lBQUUsTUFBTXpFLElBQUVnSixFQUFFTSxRQUFRLElBQUdqSixJQUFFcUgsR0FBRzFIO1lBQUdKLE9BQUtSLElBQUUsT0FBSyxDQUFDLENBQUNpQixLQUFHQSxLQUFHeUksQ0FBQUEsS0FBSzFKLENBQUFBLElBQUVMLEVBQUVpQixFQUFDO1lBQUcsTUFBTU8sSUFBRWlCLEVBQUVwQyxHQUFFO2dCQUFDMkcsTUFBSyxDQUFDLEVBQUVpRCxFQUFFdEQsU0FBUyxDQUFDLFNBQVMsQ0FBQztnQkFBQ21ELFNBQVE7Z0JBQUUsR0FBRzdKLENBQUM7Z0JBQUN1SCxLQUFJdEg7WUFBQyxJQUFHMEIsSUFBRStILEdBQUdNLEdBQUV6SSxHQUFFLE9BQU1nSCxJQUFHeEk7WUFBRyxPQUFPNEssR0FBR0MsRUFBRXJKLElBQUc7Z0JBQUNRLE1BQUs7Z0JBQU0wRCxJQUFHMUY7Z0JBQUVtQixNQUFLTztZQUFDLElBQUdtSixFQUFFckosR0FBR3NKLE1BQU0sR0FBQyxHQUFFM0ksRUFBRSxZQUFXVCxHQUFFRSxJQUFHSjtRQUFDO1FBQUUyRyxPQUFNbkksQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBR3FKLEdBQUcsQ0FBQ3JKLEdBQUUseUJBQXdCLFVBQVMyQixJQUFHLENBQUMzQixLQUFHLENBQUNzRyxFQUFFdkcsSUFBRztnQkFBQyxNQUFNQyxJQUFFbUksR0FBRzZCLEdBQUVqSztnQkFBRyxPQUFPbUMsRUFBRSxjQUFhVCxHQUFFMUIsTUFBSUEsRUFBRWlLLEVBQUVNLFFBQVEsS0FBSXRLO1lBQUM7WUFBQyxPQUFPQyxFQUFFbUosR0FBR3BKLElBQUcsd0NBQXVDMkIsSUFBRzVCLEVBQUVtSSxLQUFLLENBQUVuSSxDQUFBQSxJQUFHQyxFQUFFZ0ssRUFBRU0sUUFBUSxJQUFHdks7UUFBSTtJQUFDLEdBQUUrSyxJQUFFOUMsR0FBRyxTQUFRZ0MsR0FBRXpJLElBQUd3SixJQUFFZixFQUFFZ0IsYUFBYSxDQUFDQyxZQUFZO0lBQUNqQixFQUFFakMsUUFBUSxHQUFDL0csRUFBRTtRQUFDVSxPQUFNO1lBQUN3SixPQUFNeko7WUFBRWdFLElBQUdzRjtRQUFDO1FBQUU5SixNQUFLO1lBQUN3SCxHQUFJLENBQUMxSSxHQUFFQyxHQUFFQyxJQUFLQSxDQUFBQSxFQUFFeUIsS0FBSyxJQUFFLENBQUN6QixFQUFFeUIsS0FBSyxDQUFDNEMsR0FBRyxDQUFDN0MsRUFBRWpCLEVBQUUsQ0FBQyxJQUFHUCxDQUFBQSxFQUFFK0osQ0FBQyxHQUFDLElBQUdqSyxDQUFBQTtZQUFLb0wsR0FBRzFKO1lBQUdnSCxHQUFJLENBQUMxSSxHQUFFQyxHQUFFLEVBQUNnQixHQUFFZixDQUFDLEVBQUMrSixHQUFFNUosQ0FBQyxFQUFDO2dCQUFJLE1BQU1ZLElBQUUwSCxHQUFHM0k7Z0JBQUcsT0FBT2lCLEtBQUcsQ0FBQzBCLEtBQUcwSSxRQUFRQyxLQUFLLENBQUMsQ0FBQyxFQUFFMUosRUFBRSxFQUFFLEVBQUUySixHQUFHLENBQUMsR0FBRSxDQUFDdEssS0FBRzhJLEtBQUcsQ0FBQzlJLENBQUFBLEtBQUtqQixDQUFBQSxNQUFJRSxLQUFHRyxDQUFBQTtZQUFFLEdBQUc7WUFBRzJLLEtBQUd6QyxHQUFHaUQsSUFBRztZQUFHQyxHQUFHO2dCQUFDdEssTUFBSztnQkFBUUksUUFBT0c7WUFBQztTQUFHO1FBQUNELE9BQU1NO1FBQUV4QixNQUFLO1lBQUMsR0FBR3dLLENBQUM7WUFBQ1YsY0FBYXJLO1FBQUM7UUFBRWlDLFVBQVM7SUFBQyxJQUFHa0gsRUFBRWMsR0FBRSxNQUFLQSxFQUFFakMsUUFBUSxDQUFDdkgsRUFBRSxHQUFFMEksRUFBRWMsR0FBRSxrQkFBaUIvSDtJQUFHLE1BQU13SixJQUFFN0QsRUFBRW9DLEdBQUUsY0FBYTBCLElBQUU5RCxFQUFFb0MsR0FBRSxZQUFXMkIsSUFBRSxhQUFXRixHQUFFRyxJQUFFaEUsRUFBRW9DLEdBQUU7SUFBTzRCLEtBQUkxQyxDQUFBQSxFQUFFYyxHQUFFLGVBQWMsSUFBR3ZJLEVBQUVvSyxHQUFHLEdBQUNELENBQUFBLEdBQUdBLEtBQUdELEtBQUdELEtBQUd4QyxFQUFFYyxHQUFFLGlCQUFnQjtJQUFHLE1BQU04QixJQUFFcEQsR0FBRzNJO0lBQUcsT0FBT0UsRUFBRXlMLEtBQUcsQ0FBQ0ksS0FBR0EsS0FBR2hDLEdBQUV3QixJQUFHM0osSUFBRytKLEtBQUdJLEtBQUcsQ0FBQ3BKLEtBQUcwSSxRQUFRQyxLQUFLLENBQUMsQ0FBQyxFQUFFMUosRUFBRSxFQUFFLEVBQUUySixHQUFHLENBQUMsR0FBRXRJLEdBQUdnSCxHQUFFO1FBQUNsSTtLQUFFLEdBQUUsUUFBTVAsS0FBR0EsRUFBRXdILE1BQU0sSUFBRXhILEVBQUV3SCxNQUFNLENBQUNDLEtBQUssQ0FBQzlELEtBQUssQ0FBQzhFLElBQUcwQixLQUFJMUIsQ0FBQUEsRUFBRStCLE1BQU0sR0FBQzNKLEVBQUU7UUFBQzRFLE9BQU07SUFBUSxJQUFHZ0QsRUFBRVEsS0FBSyxDQUFDUixFQUFFK0IsTUFBTSxJQUFHdEssRUFBRW5CLElBQUksR0FBQzBKLEVBQUVqQyxRQUFRLENBQUN6SCxJQUFJLEVBQUNRLEdBQUdrSixFQUFFakMsUUFBUSxHQUFFaUM7QUFBQztBQUFDLFNBQVN0SCxFQUFFLEdBQUczQyxDQUFDO0lBQUUsSUFBSUMsR0FBRUksR0FBRVk7SUFBRSxDQUFDakIsR0FBRWlCLEVBQUUsR0FBQ2MsRUFBRS9CO0lBQUcsTUFBTXNCLElBQUVPLEVBQUUsV0FBVVosSUFBR08sSUFBRXhCLENBQUMsQ0FBQ0EsRUFBRTRELE1BQU0sR0FBQyxFQUFFLEVBQUNsQyxJQUFFLENBQUN1SyxFQUFFekssTUFBSWlHLEdBQUdqRyxJQUFHSSxJQUFFRixLQUFHRixHQUFFVSxJQUFFUixJQUFFMUIsQ0FBQyxDQUFDQSxFQUFFNEQsTUFBTSxHQUFDLEVBQUUsR0FBQ3BDO0lBQUUsSUFBSVcsR0FBRUUsR0FBRUU7SUFBRSxJQUFHOEcsR0FBR25ILEtBQUk3QixDQUFBQSxJQUFFTCxFQUFFa00sS0FBSyxDQUFDLEdBQUV4SyxJQUFFLENBQUMsSUFBRSxDQUFDLElBQUd6QixJQUFFaUMsQ0FBQUEsSUFBRzdCLElBQUVMLEdBQUUsTUFBSUssRUFBRXVELE1BQU0sRUFBQztRQUFDLE1BQU01RCxJQUFFSyxDQUFDLENBQUMsRUFBRTtRQUFDNEwsRUFBRWpNLE1BQUttQyxDQUFBQSxJQUFFbkMsR0FBRXFDLElBQUU7SUFBRTtJQUFDLElBQUcsQ0FBQ0EsS0FBSUYsQ0FBQUEsSUFBRTlCLEdBQUVKLENBQUFBLEdBQUc7UUFBQ3NDLElBQUU7UUFBRSxNQUFNdkMsSUFBRUM7UUFBRUEsSUFBRUEsQ0FBQUEsSUFBR0QsS0FBS0M7SUFBRTtJQUFDLE9BQU9DLEVBQUV1SCxHQUFHdEYsSUFBRyxDQUFDLEVBQUViLEVBQUUsMkJBQTJCLENBQUMsR0FBRTZLLEdBQUd6SSxNQUFNQyxPQUFPLENBQUN4QixJQUFHLENBQUNJLEdBQUVKLEdBQUVsQixHQUFFaEIsR0FBRTJCO0FBQUU7QUFBQyxTQUFTbUk7SUFBSSxNQUFNL0osSUFBRSxDQUFDO0lBQUUsT0FBT0EsRUFBRW9NLEdBQUcsR0FBQyxJQUFJQyxRQUFTLENBQUNwTSxHQUFFQztRQUFLRixFQUFFc00sRUFBRSxHQUFDck0sR0FBRUQsRUFBRXVNLEVBQUUsR0FBQ3JNO0lBQUMsSUFBSUYsRUFBRW9NLEdBQUcsQ0FBQ0ksS0FBSyxDQUFFLEtBQUssSUFBSXhNO0FBQUM7QUFBQyxTQUFTaUssRUFBRWpLLENBQUMsRUFBQ0MsSUFBRSxDQUFDLENBQUM7SUFBRSxNQUFNSSxJQUFFdUgsR0FBR3lCLEdBQUdySixLQUFHO1FBQUN5TSxTQUFRek07SUFBQyxJQUFFQSxHQUFFQyxJQUFHdUIsSUFBRUssRUFBRSxVQUFTeEIsSUFBR3FCLElBQUVXLEVBQUVnSCxHQUFHckosS0FBRztRQUFDeU0sU0FBUXpNO0lBQUMsSUFBRUEsR0FBRTtRQUFDLEdBQUdDLENBQUM7UUFBQ2lJLFVBQVM7SUFBUSxJQUFHdEcsSUFBRXRCLEVBQUVvQjtJQUFHeUgsRUFBRXZILEdBQUUsTUFBS0YsRUFBRWdMLElBQUksR0FBQyxXQUFVaEwsRUFBRWlMLEdBQUcsR0FBQzNNLENBQUFBLElBQUlFLENBQUFBLEVBQUVtSixHQUFHckosSUFBRyxzQ0FBcUN3QixJQUFHeUksRUFBRXRJLEtBQUssQ0FBQzhLLE9BQU8sR0FBQ3pNLEdBQUUwQixDQUFBQSxHQUFHQSxFQUFFaUwsR0FBRyxDQUFDQyxVQUFVLEdBQUMsSUFBSTNDLEVBQUV0SSxLQUFLLENBQUM4SyxPQUFPO0lBQUMsTUFBTTFLLElBQUVMLEVBQUVtTCxPQUFPLEdBQUN4SyxFQUFFO1FBQUM0RSxPQUFNO1FBQVU2QyxTQUFRO0lBQUMsSUFBRzVILElBQUVSLEVBQUVvTCxJQUFJLEdBQUMvSyxFQUFFMEcsU0FBUyxDQUFDO1FBQUN4QixPQUFNO1FBQU92QixJQUFHLEVBQUNxSCxRQUFPL00sQ0FBQyxFQUFDcUQsUUFBT3BELENBQUMsRUFBQytNLFFBQU85TSxDQUFDLEVBQUM7WUFBRSxJQUFHLFdBQVNGLEdBQUUsT0FBTTtnQkFBQ3FELFFBQU9wRDtnQkFBRStNLFFBQU85TTtZQUFDO1FBQUM7SUFBQyxJQUFHaUMsSUFBRVQsRUFBRThDLElBQUksR0FBQ3pDLEVBQUUwRyxTQUFTLENBQUM7UUFBQ3hCLE9BQU07UUFBT3ZCLElBQUcsRUFBQ3FILFFBQU8vTSxDQUFDLEVBQUNxRCxRQUFPcEQsQ0FBQyxFQUFDcUwsT0FBTXBMLENBQUMsRUFBQztZQUFFLElBQUcsV0FBU0YsR0FBRSxPQUFNO2dCQUFDcUQsUUFBT3BEO2dCQUFFcUwsT0FBTXBMO1lBQUM7UUFBQztJQUFDLElBQUdxQyxJQUFFYixFQUFFdUwsUUFBUSxHQUFDL0ssRUFBRW1HLEdBQUcsQ0FBQztRQUFDcEIsT0FBTTtRQUFXdkIsSUFBRyxDQUFDLEVBQUNzSCxRQUFPaE4sQ0FBQyxFQUFDLEdBQUdBO0lBQUMsSUFBRzJDLElBQUVqQixFQUFFd0wsUUFBUSxHQUFDL0ssRUFBRWtHLEdBQUcsQ0FBQztRQUFDcEIsT0FBTTtRQUFXdkIsSUFBRyxDQUFDLEVBQUM0RixPQUFNdEwsQ0FBQyxFQUFDLEdBQUdBO0lBQUMsSUFBR2lLLElBQUVoSixFQUFFO1FBQUNVLE9BQU07WUFBQzhLLFNBQVEvSyxFQUFFdUosYUFBYSxDQUFDd0IsT0FBTyxJQUFHLEtBQUl2TSxFQUFFLEdBQUUsQ0FBQyxtQkFBbUIsRUFBRXdCLEVBQUV5TCxhQUFhLENBQUMxRyxRQUFRLENBQUMsQ0FBQztRQUFFO1FBQUV2RixNQUFLO1lBQUN3SCxHQUFJLENBQUMxSSxHQUFFQyxHQUFFQztnQkFBSyxJQUFJRyxJQUFFSixFQUFFd00sT0FBTztnQkFBQyxNQUFNeEwsSUFBRXdDLEVBQUV2RDtnQkFBRyxJQUFHZSxHQUFFO29CQUFDLE1BQU1qQixJQUFFaUIsRUFBRTBHLFFBQVEsQ0FBQ3lGLE9BQU8sQ0FBQ3pDLEdBQUcsQ0FBQ2pKLE1BQUlULEVBQUUwRyxRQUFRLENBQUMwRixNQUFNLENBQUMzTCxFQUFFb0ssR0FBRyxDQUFDO29CQUFDOUwsS0FBSUssQ0FBQUEsSUFBRUwsQ0FBQUE7Z0JBQUU7Z0JBQUMsT0FBT0EsRUFBRXlNLE9BQU8sR0FBQ3BNLEdBQUVMO1lBQUMsR0FBRyxHQUFFO1lBQUcwSSxHQUFJLENBQUMxSSxHQUFFQyxHQUFFQztnQkFBSyxJQUFHRCxFQUFFcU4sUUFBUSxJQUFFLENBQUNyTixFQUFFcU4sUUFBUSxDQUFDdE4sR0FBRSxNQUFLRSxJQUFHO2dCQUFPLE1BQUssRUFBQ21ELFFBQU9oRCxDQUFDLEVBQUMrTCxLQUFJbkwsQ0FBQyxFQUFDd0wsU0FBUW5MLENBQUMsRUFBQ2lNLE1BQUsvTCxJQUFFO29CQUFDbkI7aUJBQUUsRUFBQyxHQUFDTCxHQUFFMEIsSUFBRThMLEdBQUduTixHQUFFWSxHQUFFLEdBQUVjLEdBQUU3QixJQUFHMEIsSUFBRTRMLEdBQUduTixHQUFFWSxHQUFFLEdBQUVjLEdBQUU3QixJQUFHLENBQUMyQixHQUFFSyxFQUFFLEdBQUN1TCxHQUFHbk0sR0FBRU0sR0FBRUo7Z0JBQUdLLEtBQUk0RixDQUFBQSxHQUFHdkYsTUFBSW1ILEdBQUduSCxFQUFFd0wsSUFBSSxJQUFFeEwsRUFBRXdMLElBQUksQ0FBQ2hNLEdBQUVFLEtBQUdGLEVBQUVRLEVBQUM7WUFBRSxHQUFHLEdBQUU7U0FBRztRQUFDM0IsTUFBSztZQUFDb0YsSUFBRztZQUFLZ0ksSUFBRztRQUFRO0lBQUM7SUFBRy9MLEVBQUVELEtBQUssQ0FBQ2lNLE1BQU0sR0FBQzNELEdBQUV2SCxHQUFHZCxFQUFFaUIsR0FBRyxFQUFDNkYsR0FBSSxDQUFDMUksR0FBRSxFQUFDNE4sUUFBTzNOLENBQUMsRUFBQyxFQUFDQztRQUFLLE1BQU1HLElBQUVXLEVBQUVkLEtBQUc7WUFBQ21ELFFBQU9yRDtZQUFFb00sS0FBSTtnQkFBQ0UsSUFBR3RNLENBQUMsR0FBRTtnQkFBRXVNLElBQUd2TSxDQUFDLEdBQUU7WUFBQztRQUFDLElBQUVBO1FBQUUsT0FBT0UsRUFBRUssSUFBSSxJQUFHTCxDQUFBQSxFQUFFSyxJQUFJLEdBQUM7WUFBQ3NOLE1BQUtDO1FBQUksSUFBR3hNLEVBQUU7WUFBQ0MsUUFBT3RCO1lBQUVvRCxRQUFPaEQ7WUFBRWlELE9BQU07WUFBRTNCLE9BQU04QixFQUFFdkQ7WUFBR0ssTUFBS0wsRUFBRUssSUFBSTtRQUFBLElBQUdGLEVBQUVnRCxNQUFNO0lBQUEsS0FBSzNCLEVBQUVxRyxNQUFNLEdBQUMvSCxDQUFBQTtRQUFJLE1BQU1DLElBQUU4SixLQUFJN0osSUFBRTtZQUFDbUQsUUFBT3JEO1lBQUVvTSxLQUFJbk07UUFBQztRQUFFLElBQUdtRCxNQUFJLENBQUNjLElBQUc7WUFBQyxNQUFNbEUsSUFBRW9EO1lBQUduRCxFQUFFbU0sR0FBRyxDQUFDUyxPQUFPLENBQUU7Z0JBQUtrQixHQUFHL047WUFBRSxHQUFJd00sS0FBSyxDQUFFLEtBQUs7UUFBRztRQUFDLE9BQU9sTCxFQUFFO1lBQUNDLFFBQU9HO1lBQUUyQixRQUFPbkQ7WUFBRXlCLE9BQU15QjtRQUFFLElBQUduRCxFQUFFbU0sR0FBRztJQUFBO0lBQUUsTUFBTXJCLElBQUVySixFQUFFc00sUUFBUSxHQUFDdkwsRUFBRSxHQUFFO1FBQUN3TCxXQUFVO1FBQVNoSCxPQUFNLENBQUNZLEVBQUVuRyxHQUFFLFdBQVNBLEVBQUVzRyxRQUFRLENBQUN2SCxFQUFFLElBQUU7SUFBVyxHQUFHaUssRUFBRSxDQUFDaEosR0FBRzFCLENBQUFBLElBQUdBLElBQUUsR0FBSTBLLEVBQUUsQ0FBQzNJLEdBQUcvQixDQUFBQSxJQUFHQSxJQUFFLEdBQUlxSSxHQUFHLENBQUM7UUFBQzNDLElBQUcxRixDQUFBQSxJQUFHQTtRQUFFaUgsT0FBTTtJQUFVO0lBQUdrQyxFQUFFcEgsR0FBRSxpQkFBZ0IsUUFBT29ILEVBQUV6SCxHQUFFLGlCQUFnQjtJQUFHLE1BQU1zSixJQUFFdEosRUFBRXdNLE9BQU8sR0FBQ25ELEVBQUUxQyxHQUFHLENBQUM7UUFBQzNDLElBQUcxRixDQUFBQSxJQUFHQSxJQUFFO1FBQUVpSCxPQUFNO0lBQVM7SUFBRyxPQUFPaEUsR0FBR3ZCLEdBQUU7UUFBQ0s7UUFBRUc7UUFBRUM7UUFBRUk7UUFBRUk7UUFBRXFJO1FBQUVEO0tBQUUsR0FBRSxRQUFNMUssS0FBR0EsRUFBRTJJLE1BQU0sSUFBRTNJLEVBQUUySSxNQUFNLENBQUNDLEtBQUssQ0FBQ2tGLE1BQU0sQ0FBQ3pNLElBQUdBO0FBQUM7QUFBQyxTQUFTcUosRUFBRS9LLENBQUM7SUFBRSxJQUFJQztJQUFFLENBQUNELEdBQUVDLEVBQUUsR0FBQzhCLEVBQUUvQixHQUFFO0lBQUcsTUFBTUssSUFBRXdCLEVBQUUsVUFBUzVCO0lBQUcsSUFBRyxFQUFDbUIsUUFBT0gsQ0FBQyxFQUFDa04sUUFBTzNNLENBQUMsRUFBQzRNLFdBQVUxTSxDQUFDLEVBQUNzSCxRQUFPOUcsQ0FBQyxFQUFDLEdBQUNsQztJQUFFcU8sR0FBRzdNLE1BQUl0QixFQUFFeUksR0FBR3pHLElBQUcsbURBQWtEN0I7SUFBRyxNQUFNOEIsSUFBRThILEVBQUVqSyxHQUFFQztJQUFHa0osRUFBRWhILEdBQUUsWUFBVztJQUFHLE1BQUssRUFBQ3lMLFFBQU92TCxDQUFDLEVBQUMsR0FBQy9CLEVBQUU2QixHQUFHUixLQUFLO0lBQUMsSUFBSVk7SUFBRSxNQUFNRSxJQUFFLENBQUN6QyxHQUFFQyxHQUFFQztRQUFLLE1BQUssRUFBQ21ELFFBQU9oRCxDQUFDLEVBQUMrTCxLQUFJNUssQ0FBQyxFQUFDaUwsU0FBUTdLLENBQUMsRUFBQyxHQUFDNUIsR0FBRTZCLElBQUVNLEVBQUUwSyxPQUFPLEVBQUM5SyxJQUFFeUwsR0FBR25OLEdBQUVtQixHQUFFLEdBQUVLLEdBQUUzQixJQUFHZ0MsSUFBRWhDLEVBQUVlLENBQUMsRUFBQ29CLElBQUVnTSxHQUFHek07UUFBRyxJQUFJVyxHQUFFRSxJQUFFO1FBQUUsSUFBR2YsSUFBRSxDQUFDZSxHQUFFRixFQUFFLEdBQUNrTCxHQUFHL0wsR0FBRUssR0FBRTtZQUFDMUI7WUFBRTZCO1NBQUUsSUFBRUssSUFBRXRCLEtBQUdvQixJQUFFSCxJQUFFN0IsR0FBRW9DLEdBQUU7WUFBQyxJQUFHLENBQUNKLEdBQUUsT0FBT3JDLEVBQUV1TixJQUFJLEdBQUM7Z0JBQUNyTDtnQkFBRUs7YUFBRSxFQUFDO1lBQUVqQixFQUFFO2dCQUFDQyxRQUFPSztnQkFBRXlCLFFBQU87b0JBQUNBLFFBQU9kO29CQUFFNkosS0FBSTt3QkFBQ0UsSUFBR2tCLEdBQUduTixHQUFFbUIsR0FBRSxHQUFFSyxHQUFFM0I7d0JBQUdxTSxJQUFHeEs7b0JBQUM7Z0JBQUM7Z0JBQUV3QixNQUFLckQsRUFBRXFELElBQUk7Z0JBQUNELE9BQU07Z0JBQUUvQyxNQUFLTCxFQUFFSyxJQUFJO1lBQUE7UUFBRTtJQUFDO0lBQUUsSUFBR1UsR0FBRTtRQUFDLElBQUlqQjtRQUFFcUMsRUFBRVYsS0FBSyxDQUFDMkwsUUFBUSxHQUFDN0ssR0FBRXdKLEVBQUVoTCxLQUFJakIsQ0FBQUEsSUFBRWlCLEdBQUVnQyxHQUFHakQsR0FBRTtZQUFDbUM7U0FBRSxLQUFJbkMsQ0FBQUEsSUFBRTJDLEVBQUUxQixJQUFHZ0MsR0FBR2QsR0FBRTtZQUFDbkM7U0FBRSxJQUFHdUMsSUFBRTtZQUFDbUcsR0FBSTFJLENBQUFBLElBQUdBLEdBQUcsR0FBRTtZQUFHb0wsR0FBR1AsRUFBRTdLO1NBQUksRUFBQyxPQUFPcUMsRUFBRVEsR0FBRyxDQUFDLEVBQUUsQ0FBQzRCLEtBQUs7SUFBQSxPQUFNbEMsSUFBRTtRQUFDbUcsR0FBR2pHLEdBQUUsR0FBRTtLQUFHO0lBQUNKLEVBQUVRLEdBQUcsQ0FBQ3lMLE1BQU0sQ0FBQyxHQUFFLE1BQUsvTCxJQUFHSixFQUFFd0ssR0FBRyxDQUFDbkw7SUFBRyxNQUFNdUksSUFBRS9JLEVBQUVRO0lBQUcsT0FBT3VJLEtBQUluRCxDQUFBQSxPQUFPQyxNQUFNLENBQUNMLEVBQUVyRSxJQUFHUCxFQUFFTyxFQUFFd0UsU0FBUyxFQUFDb0QsS0FBSTVILEVBQUU4SSxhQUFhLENBQUN2SyxNQUFNLEdBQUNxSixDQUFBQSxHQUFHaEIsR0FBR3ZILEdBQUVXLEdBQUUsV0FBVUE7QUFBQztBQUFDLFNBQVM2SSxFQUFFLEdBQUcvSyxDQUFDO0lBQUUsSUFBRyxDQUFDLENBQUNDLEdBQUVHLEVBQUUsRUFBQ1ksRUFBRSxHQUFDYyxFQUFFOUI7SUFBRyxNQUFNcUIsSUFBRSxDQUFDO0lBQUUsT0FBT3RCLEVBQUVLLEdBQUcsQ0FBQ0wsR0FBRUM7UUFBSyxNQUFNSSxJQUFFaUIsQ0FBQyxDQUFDckIsRUFBRSxHQUFDb0MsRUFBRXBDLEdBQUU7WUFBQ1MsUUFBT00sRUFBRWQ7WUFBR3FPLFFBQU90TjtRQUFDO1FBQUdmLEVBQUV3SyxFQUFFLENBQUNySyxHQUFFTCxJQUFHK0ksR0FBRzdJLEdBQUVHO0lBQUUsSUFBSWlCO0FBQUM7QUFBQyxTQUFTb0ssRUFBRXhMLENBQUMsRUFBQ0csQ0FBQztJQUFFLE1BQU1tQixJQUFFb0csR0FBRztRQUFDTCxJQUFHbEg7UUFBRW1ILEtBQUksWUFBVSxPQUFPdEgsSUFBRTtZQUFDOEcsTUFBSzlHO1FBQUMsSUFBRUE7SUFBQyxJQUFHd0IsSUFBRVQsRUFBRTtRQUFDYSxRQUFPO1lBQUNFLE1BQUs7UUFBUTtRQUFFQyxVQUFTO1FBQUV2QixRQUFPLENBQUMsUUFBTWMsSUFBRSxLQUFLLElBQUVBLEVBQUV3SCxNQUFNLEtBQUksU0FBTXhILElBQUUsS0FBSyxJQUFFQSxFQUFFZCxNQUFNO0lBQUMsSUFBR2tCLElBQUU7UUFBQzRNLFNBQVEsQ0FBQztRQUFFeEcsVUFBU3RHO1FBQUV1SCxPQUFNLENBQUM7SUFBQztJQUFFdkgsRUFBRW5CLElBQUksR0FBQzBILEdBQUcsVUFBU3JHLEdBQUU7UUFBQ2xCLFFBQU8sQ0FBQyxRQUFNYyxJQUFFLEtBQUssSUFBRUEsRUFBRXdILE1BQU0sS0FBSSxTQUFNeEgsSUFBRSxLQUFLLElBQUVBLEVBQUVkLE1BQU07UUFBRTZHLElBQUc7WUFBQyxHQUFHL0YsQ0FBQztZQUFDc0ksU0FBUTtRQUFDO0lBQUMsSUFBRzlKLEVBQUU7UUFBQ3lPLE9BQU1wTTtRQUFFcU0sUUFBT3pFO1FBQUUwRSxPQUFNbE07UUFBRW1NLFFBQU9sRDtJQUFDLEdBQUcsQ0FBQzFMLEdBQUVFO1FBQUssTUFBTUcsSUFBRUgsRUFBRTJPLFdBQVcsSUFBRzVOLElBQUVvQixFQUFFO1lBQUM0RSxPQUFNLENBQUMsRUFBRSxFQUFFL0csRUFBRSxDQUFDO1FBQUE7UUFBRzBCLEVBQUVxSCxLQUFLLENBQUM1SSxFQUFFLEdBQUNZO1FBQUUsTUFBTU8sSUFBRSxJQUFJc047UUFBSWxOLEVBQUU0TSxPQUFPLENBQUMsQ0FBQyxFQUFFbk8sRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDbUIsR0FBRVAsRUFBRThHLE1BQU0sR0FBQy9ILENBQUFBLElBQUlzQixDQUFBQSxFQUFFTCxHQUFFakIsSUFBR0EsQ0FBQUEsR0FBRzBDLEdBQUdwQyxFQUFFVyxHQUFHNEIsR0FBRyxFQUFDNkYsR0FBSSxDQUFDMUksR0FBRUMsR0FBRUMsSUFBS0EsQ0FBQUEsRUFBRXlCLEtBQUssR0FBQyxNQUFLM0IsQ0FBQUEsS0FBTWlCLEVBQUVrSCxLQUFLLENBQUVuSSxDQUFBQTtZQUFJaUQsR0FBR3JCLEdBQUU7Z0JBQUM1QjthQUFFLEdBQUV3QixFQUFFdUQsR0FBRyxDQUFDL0UsSUFBR0EsRUFBRStPLFFBQVEsSUFBRy9PLENBQUFBLEVBQUUrTyxRQUFRLEdBQUN2TixDQUFBQSxHQUFHUixFQUFFaEIsTUFBS0EsQ0FBQUEsRUFBRVUsTUFBTSxHQUFDa0IsQ0FBQUE7UUFBRSxJQUFJcUIsR0FBR3JCLEdBQUU7WUFBQ1g7U0FBRSxHQUFFVyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUxQixFQUFFLENBQUMsQ0FBQyxHQUFDRixDQUFBQSxJQUFJQyxDQUFBQSxFQUFFdUIsR0FBRXhCLElBQUdpQixFQUFFa0gsS0FBSyxDQUFDbkksRUFBQyxHQUFHNEIsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFMUIsRUFBRSxDQUFDLENBQUMsR0FBQzBCLENBQUMsQ0FBQ3ZCLEVBQUUsR0FBQyxDQUFDSixHQUFFQztZQUFLLE1BQU1HLElBQUV1SCxHQUFHO2dCQUFDSixLQUFJdEg7Z0JBQUVxSCxJQUFHdEg7WUFBQztZQUFHLE9BQU8sUUFBTUksS0FBR0EsRUFBRTJJLE1BQU0sR0FBQ2hKLEVBQUVDLEdBQUVDLEtBQUdlLEVBQUVqQixFQUFFQyxHQUFFO2dCQUFDUyxRQUFPa0I7Z0JBQUUyRixJQUFHbEg7WUFBQztRQUFHO0lBQUM7SUFBSSxNQUFNd0IsSUFBRWIsRUFBRVk7SUFBRyxPQUFPQyxLQUFHN0IsRUFBRTRCLEVBQUVxSCxLQUFLLEVBQUUsQ0FBQ2pKLEdBQUVDLElBQUk2SSxHQUFHOUksR0FBRTZCLEVBQUVvSCxLQUFLLENBQUNoSixFQUFFLElBQUksUUFBTXVCLEtBQUdBLEVBQUV3SCxNQUFNLElBQUV4SCxFQUFFd0gsTUFBTSxDQUFDQyxLQUFLLENBQUNELE1BQU0sQ0FBQ3BILElBQUdBO0FBQUM7QUFBQyxTQUFTK0osRUFBRTNMLENBQUM7SUFBRXNILEdBQUd0SDtJQUFHLE1BQU1DLElBQUUrTyxLQUFLaFAsSUFBRUEsQ0FBQyxDQUFDZ1AsRUFBRSxLQUFHaFA7SUFBRUUsRUFBRUQsRUFBRWdQLFNBQVMsRUFBQztJQUF3QyxNQUFNNU8sSUFBRWdDLEtBQUlwQixJQUFFeUksR0FBR3JKO0lBQUcsT0FBT0osRUFBRWdQLFNBQVMsQ0FBQztRQUFDbk0sTUFBS3pDO1FBQUVpTCxPQUFNcks7UUFBRWlPLFVBQVNqTztJQUFDLElBQUdaO0FBQUM7QUFBQyxTQUFTdUwsRUFBRTVMLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE1BQU1DLElBQUUyQixFQUFFLFNBQVE1QjtJQUFHbUosR0FBR3BKLEdBQUVFLEdBQUU7SUFBa0IsTUFBTUcsSUFBRWdDLEVBQUU7UUFBQzJFLE1BQUt4RixFQUFFeEIsR0FBRTtRQUFTOEosU0FBUTtRQUFFdEMsS0FBSXZIO0lBQUM7SUFBRyxPQUFPNkksR0FBRzlJLEdBQUVLLEdBQUUsRUFBRSxFQUFDLFVBQVNBO0FBQUM7QUFBQyxTQUFTd0wsRUFBRTdMLENBQUMsRUFBQ0ssQ0FBQztJQUFFLElBQUlZLElBQUU7SUFBRSxPQUFPaEIsRUFBRWtQLElBQUlsUCxDQUFBQTtRQUFJQSxLQUFLRCxLQUFJRSxDQUFBQSxFQUFFLFFBQU1GLENBQUMsQ0FBQ0MsRUFBRSxFQUFDbVAsR0FBRy9PLEdBQUVKLEtBQUlnQixJQUFFO0lBQUUsSUFBSUE7QUFBQztBQUFDLFNBQVM4SyxFQUFFLEdBQUcvTCxDQUFDO0lBQUUsSUFBSUMsR0FBRUMsR0FBRUcsR0FBRVksR0FBRSxDQUFDLENBQUNLLEdBQUVFLEdBQUVFLEVBQUUsRUFBQ0UsRUFBRSxHQUFDRyxFQUFFL0IsSUFBR2tDLElBQUU7SUFBRSxNQUFNQyxJQUFFTixFQUFFLFVBQVNEO0lBQUcsT0FBTytHLEdBQUduSCxNQUFJaUcsR0FBR25HLE1BQUl1SyxFQUFFdkssR0FBRWEsTUFBS1gsQ0FBQUEsSUFBRUYsRUFBRStOLEtBQUssRUFBQzNOLElBQUVKLEVBQUVvRSxFQUFFLEVBQUMsV0FBVXBFLElBQUVZLElBQUVaLEVBQUVnTyxLQUFLLEdBQUVoRyxDQUFBQSxHQUFHLENBQUUsYUFBV2hJLENBQUFBLEdBQUcsb0JBQW1CLFNBQVFhLElBQUdELElBQUUsQ0FBQ1osRUFBRWlPLE1BQU0sR0FBRXRPLElBQUVLLEVBQUV5RSxNQUFNLEVBQUM5RixJQUFFcUIsRUFBRUMsTUFBTSxFQUFDckIsSUFBRW9CLEVBQUUwRixJQUFJLEVBQUMzRyxJQUFFaUIsRUFBRXdLLEdBQUcsRUFBQ3hLLElBQUVBLEVBQUVGLE1BQU0sR0FBRW9PLEdBQUcsVUFBU2hPLEdBQUVGLEdBQUVMLEdBQUVoQixHQUFFeUIsR0FBRXhCLEdBQUUwQixHQUFFTSxHQUFFLEdBQUUsR0FBRTdCO0FBQUU7QUFBQyxTQUFTb1AsRUFBRSxHQUFHelAsQ0FBQztJQUFFLElBQUcsQ0FBQyxDQUFDQyxHQUFFQyxFQUFFLEVBQUNHLEVBQUUsR0FBQzBCLEVBQUUvQjtJQUFHLE1BQU1pQixJQUFFWSxFQUFFLFNBQVF4QjtJQUFHLE9BQU9pSixHQUFHLEdBQUUsU0FBUSxVQUFTckksSUFBR2YsS0FBSUEsQ0FBQUEsSUFBRUQsR0FBRUEsSUFBRUMsRUFBRWtCLE1BQU0sR0FBRXlLLEVBQUUzTCxHQUFFZSxJQUFHdU8sR0FBRyxTQUFRdFAsRUFBRW1QLEtBQUssRUFBQ3BQLEdBQUVDLEVBQUU2RixNQUFNLEVBQUM3RixFQUFFcUIsTUFBTSxFQUFDLE1BQUtyQixFQUFFOEcsSUFBSSxFQUFDM0csR0FBRSxDQUFDSCxFQUFFcVAsTUFBTSxFQUFDLEdBQUU7QUFBRTtBQUFDLFNBQVNHLEVBQUV6UCxDQUFDLEVBQUNJLENBQUMsRUFBQ1ksQ0FBQztJQUFFLE1BQU1LLElBQUVPLEVBQUUsV0FBVVo7SUFBRyxJQUFHZixFQUFFLENBQUMrTCxFQUFFaE0sSUFBRyxvQ0FBbUNxQixJQUFHcU8sRUFBRTFQLE1BQUlvTyxHQUFHcE8sSUFBRztRQUFDLE1BQU1ELElBQUVnQixFQUFFZixJQUFHQyxJQUFFdUMsRUFBRXBDLEdBQUU7WUFBQ0ssUUFBT1Y7WUFBRWdILE1BQUsvRyxFQUFFMEcsU0FBUztZQUFDYSxLQUFJdkc7UUFBQztRQUFHLE9BQU82SCxHQUFHdUYsR0FBR3BPLEtBQUdBLEVBQUVnTixRQUFRLEdBQUNoTixHQUFFQyxJQUFHRixLQUFHQSxFQUFFaUosS0FBSyxDQUFDOUQsS0FBSyxDQUFDakYsSUFBR0E7SUFBQztJQUFDLE1BQU1zQixJQUFFa0MsTUFBTUMsT0FBTyxDQUFDMUQsS0FBRyxFQUFFLEdBQUMsQ0FBQztJQUFFLE9BQU9ELEVBQUVDLEdBQUcsQ0FBQ0QsR0FBRUMsSUFBSXVCLENBQUMsQ0FBQ3ZCLEVBQUUsR0FBQ2dNLEVBQUVqTSxLQUFHQSxJQUFFeUMsRUFBRXpDLEdBQUU7WUFBQ2dILE1BQUsvRztRQUFDLEtBQUt1QjtBQUFDO0FBQUMsU0FBU29PLEVBQUUsR0FBRzNQLENBQUM7SUFBRSxNQUFNSSxJQUFFO0lBQVEsSUFBSWlCLEdBQUVFLEdBQUUsQ0FBQyxDQUFDRSxHQUFFRSxFQUFFLEVBQUNNLEVBQUUsR0FBQ0gsRUFBRTlCO0lBQUcsTUFBTXNDLElBQUVWLEVBQUV4QixHQUFFNkIsSUFBR08sSUFBRSxDQUFDYjtJQUFFYSxLQUFJbkIsQ0FBQUEsSUFBRUksRUFBRW1PLEtBQUssRUFBQ2pPLElBQUVGLEVBQUVvTyxLQUFLLEVBQUN0TyxJQUFFRSxFQUFFMk4sS0FBSyxFQUFDM04sSUFBRUEsRUFBRU4sTUFBTTtJQUFFLE1BQU11QixJQUFFc0osRUFBRXJLLElBQUdtSSxJQUFFLENBQUN4RCxFQUFFM0UsTUFBSXlILEdBQUd6SCxJQUFHcUksSUFBRSxDQUFDdEgsS0FBRyxDQUFDb0gsS0FBR3RDLEdBQUc3RjtJQUFHMUIsRUFBRXFHLEVBQUU3RSxJQUFHLHlCQUF3QmEsSUFBR2pCLEtBQUlBLENBQUFBLElBQUUsQ0FBQyxJQUFHbUIsSUFBRXpDLEVBQUVzQixHQUFHLENBQUN0QixHQUFFQyxJQUFJOFAsR0FBR3hOLEdBQUV2QyxHQUFFLENBQUMsTUFBTSxFQUFFQyxFQUFFLENBQUMsS0FBS0MsQ0FBQUEsRUFBRStKLEdBQUUsNkJBQTRCMUgsSUFBR3ZDLEVBQUU0QixHQUFHLENBQUM1QixHQUFFQyxJQUFJcUIsQ0FBQyxDQUFDckIsRUFBRSxHQUFDb0MsRUFBRTtZQUFDeUgsU0FBUTtZQUFFN0MsT0FBTSxDQUFDLE1BQU0sRUFBRWhILEVBQUUsQ0FBQztZQUFDdUgsS0FBSXRGO1FBQUMsS0FBS1osRUFBRTBPLEVBQUUsR0FBQzNOLEVBQUU7UUFBQ3lILFNBQVE7UUFBRTdDLE9BQU07UUFBV08sS0FBSXRGO0lBQUMsRUFBQztJQUFHLE1BQU02SSxJQUFFLElBQUkrRCxJQUFJLEVBQUUsQ0FBQy9ILE1BQU0sQ0FBQ3JGLEdBQUVGLEtBQUcsRUFBRSxFQUFDb0YsT0FBT3FKLE1BQU0sQ0FBQzNPLE1BQUswSixJQUFFcEUsT0FBT3NKLElBQUksQ0FBQ3ZOLEtBQUdvSCxJQUFFekksSUFBRU07SUFBRyxJQUFJOEo7SUFBRSxJQUFHL0ksS0FBR29ILEdBQUVwSCxLQUFHb0ksRUFBRWhHLEdBQUcsQ0FBQ25ELElBQUc4SixJQUFFO1FBQUMvSSxLQUFHeUksR0FBR1AsRUFBRWpKLElBQUcsR0FBRTtRQUFHdU8sR0FBRztZQUFDdEssTUFBS2xEO1lBQUVvRCxRQUFPO1lBQUVILE1BQUssQ0FBQ2pEO1lBQUUrQyxJQUFHMUYsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUM7Z0JBQUUsTUFBTUcsSUFBRStQLE9BQU96TixJQUFFekMsRUFBRWUsQ0FBQyxHQUFDVyxFQUFFNUI7Z0JBQUlxUSxHQUFHcFEsR0FBRXFRLEdBQUd0RixHQUFFM0ssS0FBR0EsSUFBRSxNQUFLTCxHQUFFRTtZQUFFO1FBQUM7S0FBRztTQUFNLElBQUcrSixHQUFFO1FBQUMsTUFBTWhLLElBQUU0SixHQUFHLENBQUM7UUFBRzVKLEVBQUUrQixJQUFJLEdBQUM7UUFBUSxNQUFNOUIsSUFBRSxFQUFFO1FBQUMsSUFBSUc7UUFBRUwsRUFBRTRCLEdBQUcsQ0FBQzVCLEdBQUVpQjtZQUFLLElBQUdzRixFQUFFdkcsSUFBRztnQkFBQ0ssSUFBRSxHQUFFcUMsR0FBR3hDLEdBQUVlLElBQUc4SixFQUFFaEcsR0FBRyxDQUFDL0U7Z0JBQUcsTUFBTXNCLElBQUV3SCxHQUFHOUksR0FBRSxFQUFFLEVBQUM7b0JBQUNvTCxHQUFHbkw7b0JBQUd5SSxHQUFJLENBQUMxSSxHQUFFQyxHQUFFLEVBQUNnQixHQUFFZixDQUFDLEVBQUMsR0FBR0EsQ0FBQyxDQUFDZSxFQUFFLEdBQUNqQjtpQkFBSTtnQkFBRSxJQUFHaU0sRUFBRWpNLElBQUc7b0JBQUNDLEVBQUV3RixPQUFPLENBQUN4RSxFQUFFLEdBQUNqQixFQUFFdUssUUFBUTtvQkFBRyxNQUFNckssSUFBRTJLLEVBQUU3SztvQkFBRzRLLEdBQUczSyxHQUFFO3dCQUFDa0IsTUFBS2pCO3dCQUFFcVEsT0FBTXRQO3dCQUFFZSxNQUFLO29CQUFPLElBQUdHLEVBQUUsbUJBQWtCakMsR0FBRW9CO2dCQUFFO1lBQUM7UUFBQyxJQUFJakIsS0FBRzhCLEVBQUUsYUFBWWxDLElBQUd5TCxJQUFFO1lBQUNyTCxLQUFHK0ssR0FBR25MLEdBQUUsR0FBRTtZQUFHc0ksR0FBSSxDQUFDdkksR0FBRUMsR0FBRUk7Z0JBQUssSUFBSSxJQUFJWSxJQUFFLEdBQUVBLElBQUUrSixFQUFFcEgsTUFBTSxFQUFDM0MsSUFBSTtvQkFBQyxNQUFNSyxJQUFFMEosQ0FBQyxDQUFDL0osRUFBRTtvQkFBQyxJQUFHcVAsR0FBR3BRLEdBQUVvQixLQUFHakIsRUFBRVksQ0FBQyxDQUFDSyxFQUFFLEdBQUNNLENBQUMsQ0FBQ04sRUFBRSxDQUFDdEIsSUFBRyxPQUFPLEtBQUtxUSxHQUFHcFEsR0FBRXFCLEdBQUV0QixHQUFFSztnQkFBRTtnQkFBQ2dRLEdBQUdwUSxHQUFFLE1BQUtELEdBQUVLO1lBQUUsR0FBRztTQUFHO0lBQUEsT0FBTUgsRUFBRSxHQUFFO0lBQStDLE1BQU15TCxJQUFFMUssRUFBRTtRQUFDVixNQUFLO1lBQUNvRixJQUFHdEY7UUFBQztRQUFFSyxRQUFPYyxJQUFFLEVBQUUsR0FBQ0U7UUFBRUMsT0FBTUw7UUFBRUosTUFBS3dLO1FBQUU1SixRQUFPO1lBQUNVLFFBQU9rQixNQUFNdkMsSUFBSSxDQUFDNEo7UUFBRTtRQUFFOUksVUFBUztJQUFDO0lBQUcsSUFBR1QsS0FBR2dPLEdBQUduUCxHQUFFbUIsR0FBRUUsR0FBRSxNQUFLaUssR0FBRSxNQUFLdEwsR0FBRTZCLEdBQUUsR0FBRSxHQUFFLElBQUcsQ0FBQ08sR0FBRSxPQUFPbkI7QUFBQztBQUFDLFNBQVNrUCxFQUFFeFEsQ0FBQyxFQUFDLEVBQUMyQixPQUFNMUIsQ0FBQyxFQUFDb0QsUUFBT25ELENBQUMsRUFBQyxHQUFDLENBQUMsQ0FBQztJQUFFLElBQUcsQ0FBQ3FHLEVBQUV2RyxJQUFHLE9BQU9xTSxRQUFRb0UsTUFBTSxDQUFDLElBQUlyUSxNQUFNO0lBQWtDLElBQUcsQ0FBRWlPLENBQUFBLEdBQUdyTyxNQUFJMlAsRUFBRTNQLE1BQUlpTSxFQUFFak0sTUFBSTBRLEdBQUcxUSxFQUFDLEdBQUcsT0FBT3FNLFFBQVFvRSxNQUFNLENBQUMsSUFBSXJRLE1BQU07SUFBa0UsSUFBR3NRLEdBQUcxUSxJQUFHQyxJQUFFRDtTQUFPLElBQUcsQ0FBQzJRLEdBQUczUSxJQUFHO1FBQUMsTUFBTUMsSUFBRTRCLEVBQUUsY0FBYXZCLEVBQUVOLEdBQUdPLElBQUk7UUFBRSxPQUFPOEwsUUFBUW9FLE1BQU0sQ0FBQ3JRLE1BQU0sQ0FBQyxFQUFFSCxFQUFFLDJCQUEyQixDQUFDO0lBQUU7SUFBQyxNQUFNSSxJQUFFMEo7SUFBSTFKLEVBQUV1USxVQUFVLEdBQUN4TjtJQUFHLE1BQUssRUFBQzhDLFNBQVFqRixDQUFDLEVBQUMsR0FBQ2hCO0lBQUV5QyxHQUFHekIsRUFBRVUsS0FBSyxDQUFDa1AsTUFBTSxFQUFDeFE7SUFBRyxNQUFNbUIsSUFBRSxFQUFFLEVBQUNFLElBQUUsRUFBRTtJQUFDLE9BQU9nUCxHQUFHMVEsTUFBSzBDLENBQUFBLEdBQUdsQixHQUFFeEIsSUFBRzBDLEdBQUdoQixHQUFFMk0sR0FBR3JPLEtBQUc7UUFBQ3FELFFBQU9uRDtRQUFFa00sS0FBSTtZQUFDRSxJQUFHdE0sQ0FBQztnQkFBRUssRUFBRU0sS0FBSyxHQUFDO29CQUFDb00sUUFBTztvQkFBT3BNLE9BQU1YO2dCQUFDO1lBQUM7WUFBRXVNLElBQUd2TSxDQUFDO2dCQUFFSyxFQUFFTSxLQUFLLEdBQUM7b0JBQUNvTSxRQUFPO29CQUFPcE0sT0FBTVg7Z0JBQUM7WUFBQztRQUFDO0lBQUMsSUFBRUUsRUFBQyxHQUFHd0MsR0FBR2xCLEdBQUVQLElBQUd5QixHQUFHaEIsR0FBRSxPQUFNSixFQUFFO1FBQUNDLFFBQU9DO1FBQUU2QixRQUFPM0I7UUFBRUMsT0FBTTFCO0lBQUMsSUFBR0ksRUFBRStMLEdBQUc7QUFBQTtBQUFDLFNBQVMwRSxFQUFFOVEsQ0FBQyxFQUFDRSxDQUFDLEVBQUNHLENBQUM7SUFBRSxNQUFNWSxJQUFFLEVBQUU7SUFBRSxVQUFTakIsRUFBRXNCLENBQUM7UUFBRWdQLEdBQUdyUCxHQUFFSyxNQUFLb0IsQ0FBQUEsR0FBR3pCLEdBQUVLLElBQUcsWUFBVXVHLEVBQUV2RyxHQUFFLFNBQVFqQixDQUFBQSxLQUFHd0gsRUFBRXZHLEdBQUUsTUFBSyxLQUFJcEIsRUFBRW9CLEdBQUV1RyxFQUFFdkcsR0FBRSxTQUFRckIsRUFBRXFCLEVBQUV3QixJQUFJLEVBQUM5QyxJQUFHQyxFQUFFOEMsRUFBRXpCLElBQUd0QixJQUFHQyxFQUFFK0MsRUFBRTFCLElBQUd0QixFQUFDO0lBQUUsR0FBR0E7QUFBRTtBQUFDLFNBQVMrUSxFQUFFL1EsQ0FBQyxFQUFDSyxDQUFDO0lBQUUsTUFBTVksSUFBRXlDLE1BQU1DLE9BQU8sQ0FBQzNELEtBQUcsSUFBSW1LLElBQUluSyxLQUFHQSxHQUFFc0IsSUFBRSxJQUFJNkk7SUFBSSxJQUFJM0ksSUFBRTtJQUFFLElBQUdQLGFBQWFrSixLQUFJO1FBQUMsTUFBTW5LLElBQUUsQ0FBQztRQUFFLE9BQU9DLEVBQUVnQixHQUFHLENBQUNoQixHQUFFZ0I7WUFBS2YsRUFBRXFHLEVBQUV0RixJQUFHLDZCQUE0QlosS0FBR0EsRUFBRVksR0FBRWhCLElBQUdnQixFQUFFNkssR0FBRyxJQUFHN0ssQ0FBQUEsRUFBRTZLLEdBQUcsSUFBSTlMLEtBQUl3QixDQUFBQSxJQUFFLElBQUd4QixDQUFDLENBQUNpQixFQUFFNkssR0FBRyxDQUFDLEdBQUM3TCxDQUFBQSxHQUFHcUIsRUFBRW1JLEdBQUcsQ0FBQ3hJLEdBQUVoQjtRQUFFLElBQUk7WUFBQ29OLFFBQU9yTjtZQUFFb04sU0FBUTlMO1lBQUUwUCxlQUFjeFA7UUFBQztJQUFDO0lBQUMsT0FBTTtRQUFDNkwsUUFBT3BNO1FBQUVtTSxTQUFROUw7SUFBQztBQUFDO0FBQUMsU0FBUzJQLEVBQUVqUixDQUFDLEVBQUNLLENBQUM7SUFBRSxJQUFJaUIsR0FBRUUsSUFBRXhCO0lBQUVrUixHQUFHbFIsTUFBS3NKLENBQUFBLEdBQUcsR0FBRSxnQkFBZSxXQUFVaEksSUFBRXRCLEdBQUV3QixJQUFFbkIsQ0FBQUE7SUFBRyxNQUFNcUIsSUFBRSxDQUFDMUIsQ0FBQUE7UUFBSSxNQUFNRSxJQUFFZSxFQUFFO1lBQUNVLE9BQU07Z0JBQUNrUCxRQUFPLEVBQUU7Z0JBQUM3QyxVQUFTO2dCQUFFSCxNQUFLO1lBQUM7WUFBRTNNLE1BQUs7Z0JBQUN3SCxHQUFJLENBQUMxSSxHQUFFQyxHQUFFQztvQkFBS0EsRUFBRVEsTUFBTSxHQUFDLFVBQVFSLEVBQUVRLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDWCxJQUFJLENBQUMwRixhQUFhLEdBQUNoRyxFQUFFK04sUUFBUSxJQUFFLElBQUcvTixDQUFBQSxFQUFFK04sUUFBUSxJQUFFLEdBQUUvTixFQUFFNE4sSUFBSSxJQUFFLEtBQUc1TixFQUFFNE4sSUFBSSxJQUFFO2dCQUFDO2dCQUFJc0MsR0FBRztvQkFBQ3pMLFVBQVM7b0JBQVU0SyxPQUFNO2dCQUFDO2dCQUFHNUcsR0FBSSxDQUFDMUksR0FBRUU7b0JBQUssTUFBSyxFQUFDMlEsUUFBT3hRLENBQUMsRUFBQ3dOLE1BQUs1TSxDQUFDLEVBQUMsR0FBQ2Y7b0JBQUVBLEVBQUU4TixRQUFRLEdBQUMsS0FBRyxNQUFJM04sRUFBRXVELE1BQU0sSUFBRXlJLFFBQVE4RSxPQUFPLEdBQUd6RCxJQUFJLENBQUU7d0JBQUt4TixFQUFFMk4sSUFBSSxLQUFHNU0sS0FBR2hCLEVBQUVJLEVBQUVpTyxNQUFNLENBQUMsR0FBRWpPLEVBQUV1RCxNQUFNLEdBQUc1RCxDQUFBQTs0QkFBSStOLEdBQUcvTixFQUFFNFEsVUFBVSxHQUFFNVEsRUFBRXNNLEVBQUUsQ0FBQ3RNLEVBQUVXLEtBQUs7d0JBQUM7b0JBQUc7Z0JBQUcsR0FBRyxHQUFFO2FBQUc7UUFBQSxJQUFHTixJQUFFWSxFQUFFO1lBQUNDLE1BQUs7Z0JBQUN3SCxHQUFJLENBQUMxSSxHQUFFQyxHQUFFQztvQkFBSyxNQUFNRyxJQUFFSCxFQUFFUSxNQUFNO29CQUFDLElBQUdMLEdBQUU7d0JBQUMsTUFBTUosSUFBRUksRUFBRWEsSUFBSTt3QkFBQyxJQUFHa1EsR0FBRy9RLElBQUc7NEJBQUMsTUFBTUEsSUFBRW9ELEVBQUV2RCxJQUFHZSxJQUFFaEIsRUFBRU0sSUFBSSxDQUFDdUwsR0FBRzs0QkFBQ3pMLEVBQUVnUixRQUFRLENBQUNwUSxFQUFFLEdBQUNoQixFQUFFMEIsS0FBSyxDQUFDd0osS0FBSyxDQUFDMUssRUFBRSxFQUFDSixFQUFFNFAsTUFBTSxDQUFDNUMsTUFBTSxDQUFDcE0sRUFBRSxHQUFDakI7NEJBQUUsTUFBTXNCLElBQUVyQixFQUFFTSxJQUFJLENBQUMwTixTQUFTOzRCQUFDM00sS0FBR2pCLEVBQUVpUixvQkFBb0IsQ0FBQzdILEdBQUcsQ0FBQ3hJLEdBQUUsYUFBV0ssSUFBRTtnQ0FBQ2lRLFFBQU87NEJBQUMsSUFBRTtnQ0FBQ0EsUUFBTztnQ0FBRUMsT0FBTWxRLEVBQUVrUSxLQUFLOzRCQUFBO3dCQUFFO29CQUFDO2dCQUFDO2FBQUk7UUFBQSxJQUFHbFEsSUFBRUwsRUFBRTtZQUFDQyxNQUFLO2dCQUFDd0gsR0FBSSxDQUFDMUksR0FBRUMsR0FBRUM7b0JBQUssTUFBTUcsSUFBRW9ELEVBQUV2RDtvQkFBR0csS0FBR0gsRUFBRVEsTUFBTSxJQUFFMFEsR0FBR2xSLEVBQUVRLE1BQU0sS0FBSUwsQ0FBQUEsRUFBRStGLGFBQWEsR0FBQztnQkFBRTthQUFJO1FBQUEsSUFBRzVFLElBQUU7WUFBQ2lRLFNBQVF6UjtZQUFFdUUsS0FBSSxDQUFDO1lBQUUwTCxRQUFPO2dCQUFDNUMsUUFBTyxDQUFDO2dCQUFFcUUsT0FBTSxDQUFDO1lBQUM7WUFBRUwsVUFBUyxDQUFDO1lBQUVDLHNCQUFxQixJQUFJbkg7WUFBSUksVUFBU3ZLLENBQUM7Z0JBQUUsSUFBRyxhQUFZQSxHQUFFLE9BQU93RixHQUFHckMsSUFBRzNCLEdBQUV4QixHQUFFLEdBQUd5RixPQUFPO2dCQUFDLE1BQU14RixJQUFFSyxFQUFFTjtnQkFBRyxPQUFPd0YsR0FBR3JDLElBQUczQixHQUFFdkIsRUFBRTBCLEtBQUssQ0FBQ3dKLEtBQUssRUFBQyxHQUFHMUYsT0FBTztZQUFBO1lBQUVpSCxNQUFLO1lBQVExRSxVQUFTL0csRUFBRTtnQkFBQ2EsUUFBTztvQkFBQ0UsTUFBSztvQkFBU00sT0FBTTt3QkFBQ3BDO3dCQUFFRzt3QkFBRWlCO3FCQUFFO2dCQUFBO2dCQUFFZixNQUFLO29CQUFDb1IsTUFBSztnQkFBTTtnQkFBRWhRLE9BQU07b0JBQUNpUSxxQkFBb0IxUjtnQkFBQztZQUFDO1lBQUdvRyxpQkFBZ0IsQ0FBQztZQUFFcUIsVUFBUztnQkFBQzBGLFFBQU8sQ0FBQztnQkFBRUQsU0FBUSxJQUFJakQ7WUFBRztZQUFFakUsU0FBUWhHO1lBQUVpRyxhQUFZOUY7WUFBRWdHLG1CQUFrQi9FO1FBQUM7UUFBRSxPQUFPRTtJQUFDLEdBQUdGO0lBQUcsSUFBR0UsR0FBRTtRQUFDLElBQUdBLEVBQUV5TyxNQUFNLEVBQUM7WUFBQyxNQUFLLEVBQUM1QyxRQUFPck4sQ0FBQyxFQUFDb04sU0FBUS9NLENBQUMsRUFBQzJRLGVBQWMvUCxDQUFDLEVBQUMsR0FBQzhQLEVBQUV2UCxFQUFFeU8sTUFBTSxFQUFFalEsQ0FBQUEsSUFBR0UsRUFBRStMLEVBQUVqTSxNQUFJMlEsR0FBRzNRLElBQUc7WUFBeUQ0RyxPQUFPQyxNQUFNLENBQUNuRixFQUFFdU8sTUFBTSxDQUFDNUMsTUFBTSxFQUFDck4sSUFBR0MsRUFBRUksR0FBRyxDQUFDTCxHQUFFQztnQkFBSyxJQUFHeUIsRUFBRXVPLE1BQU0sQ0FBQ3lCLEtBQUssQ0FBQ3pSLEVBQUVxSyxRQUFRLENBQUM3SixFQUFFLENBQUMsR0FBQ1QsR0FBRTBCLEVBQUUyUCxRQUFRLENBQUN4SixFQUFFNUgsR0FBRSxPQUFPLEdBQUNBLEVBQUVxSyxRQUFRLENBQUM3SixFQUFFLEVBQUMsYUFBV29ILEVBQUU1SCxHQUFFLGNBQWE7b0JBQUMsTUFBTUQsSUFBRTZILEVBQUU1SCxHQUFFO29CQUFPeUIsRUFBRTRQLG9CQUFvQixDQUFDN0gsR0FBRyxDQUFDekosR0FBRTt3QkFBQ3VSLFFBQU87b0JBQUM7Z0JBQUU7WUFBQyxJQUFJN1AsRUFBRW1RLGFBQWEsR0FBQyxDQUFFbk8sQ0FBQUEsTUFBTUMsT0FBTyxDQUFDbkMsRUFBRXlPLE1BQU0sS0FBR3pPLEVBQUV5TyxNQUFNLFlBQVk5RixHQUFFLEdBQUd6SSxFQUFFc1AsYUFBYSxHQUFDL1A7UUFBQztRQUFDTyxFQUFFbUcsUUFBUSxJQUFHMkIsQ0FBQUEsR0FBRzlILEVBQUVtRyxRQUFRLFlBQVl3QyxPQUFLekcsTUFBTUMsT0FBTyxDQUFDbkMsRUFBRW1HLFFBQVEsR0FBRSx3QkFBdUIsVUFBU2pHLEVBQUVpRyxRQUFRLEdBQUNvSixFQUFFdlAsRUFBRW1HLFFBQVEsRUFBRTNILENBQUFBLElBQUdFLEVBQUVtTyxHQUFHck8sSUFBRyxpREFBaUQ7SUFBRTtJQUFDLE9BQU8wQjtBQUFDO0FBQUMsU0FBU29RLEVBQUU5UixDQUFDLEVBQUMsRUFBQ2lRLFFBQU81UCxDQUFDLEVBQUM7SUFBRUgsRUFBRXVILEdBQUdwSCxJQUFHO0lBQXVDLE1BQUssRUFBQ2dOLFFBQU9wTSxDQUFDLEVBQUNtTSxTQUFRNUwsQ0FBQyxFQUFDLEdBQUN1UCxFQUFFMVEsSUFBR3FCLElBQUVrRixPQUFPbUwsbUJBQW1CLENBQUM5USxJQUFHVyxJQUFFLENBQUM7SUFBRTNCLEVBQUV1QixHQUFHLENBQUN4QixHQUFFQztRQUFLMkIsQ0FBQyxDQUFDM0IsRUFBRXFLLFFBQVEsQ0FBQzdKLEVBQUUsQ0FBQyxHQUFDUjtJQUFDO0lBQUksTUFBTTRCLElBQUUsRUFBRSxFQUFDRSxJQUFFLEVBQUU7SUFBQyxJQUFJRyxHQUFFQyxHQUFFRTtJQUFFcU8sR0FBRzFRLEtBQUlrQyxDQUFBQSxJQUFFbEMsR0FBRXFDLElBQUUsR0FBRW5DLEVBQUVnQyxFQUFFdVAsT0FBTyxFQUFDLHdDQUF1Q25JLEdBQUcsR0FBRSxxQ0FBb0MscUJBQW9CbkgsSUFBRTdCLEVBQUU0QixFQUFFdVAsT0FBTyxLQUFHUCxHQUFHbFIsS0FBSXNKLENBQUFBLEdBQUcsR0FBRSwrQkFBOEIscUJBQW9CbkgsSUFBRTdCLEVBQUVOLEVBQUMsSUFBR0UsRUFBRSxHQUFFLHdEQUF1RDRRLEVBQUUzTyxHQUFHLENBQUNuQyxHQUFFQztRQUFLLElBQUdBLEtBQUdxUSxHQUFHNU8sR0FBRXpCLElBQUc7WUFBQ3lDLEdBQUdiLEdBQUU3QjtZQUFHLE1BQU1FLElBQUUySCxFQUFFN0gsR0FBRTtZQUFhRSxLQUFHLGFBQVdBLEtBQUllLENBQUFBLENBQUMsQ0FBQ2hCLEVBQUUsR0FBQ0MsRUFBRThSLElBQUksQ0FBQy9RLENBQUMsQ0FBQ2hCLEVBQUUsSUFBR3lDLEdBQUdYLEdBQUVkLENBQUMsQ0FBQ2hCLEVBQUU7UUFBQyxPQUFNRCxFQUFFMkIsS0FBSyxDQUFDd0osS0FBSyxDQUFDMUssRUFBRSxJQUFJbUIsS0FBSWMsQ0FBQUEsR0FBR2IsR0FBRTdCLElBQUcwQyxHQUFHWCxHQUFFUCxFQUFFbUosR0FBRyxDQUFDL0ksQ0FBQyxDQUFDNUIsRUFBRTJCLEtBQUssQ0FBQ3dKLEtBQUssQ0FBQzFLLEVBQUUsQ0FBQyxFQUFDO0lBQUUsR0FBRyxJQUFHYSxFQUFFO1FBQUNDLFFBQU9NO1FBQUV3QixRQUFPdEI7UUFBRUosT0FBTU87SUFBQyxJQUFHRyxLQUFHdUUsT0FBT0MsTUFBTSxDQUFDM0UsRUFBRStOLE1BQU0sQ0FBQzVDLE1BQU0sRUFBQ3BNO0FBQUU7QUFBQyxTQUFTZ1IsRUFBRWpTLENBQUMsRUFBQyxFQUFDMkIsT0FBTTFCLENBQUMsRUFBQzRGLE1BQUt4RixDQUFDLEVBQUMsR0FBQyxDQUFDLENBQUM7SUFBRUgsRUFBRUQsS0FBR21ELE1BQUkvQyxHQUFFO0lBQThCLE1BQU1ZLElBQUVoQixLQUFHbUQ7SUFBRyxPQUFPbkQsQ0FBQUE7UUFBSSxTQUFTQztZQUFJNk4sR0FBR3ZNO1FBQUU7UUFBQyxJQUFJbkIsR0FBRWlCLElBQUU7UUFBRSxNQUFNRSxJQUFFNEI7UUFBRzJLLEdBQUc5TTtRQUFHLElBQUc7WUFBQ1osSUFBRUwsRUFBRUM7UUFBRSxFQUFDLE9BQU1ELEdBQUU7WUFBQ0ssSUFBRUwsR0FBRXNCLElBQUU7UUFBQztRQUFDLElBQUdwQixLQUFJb0IsR0FBRSxNQUFNakI7UUFBRSxPQUFPQSxhQUFhZ00sV0FBU2hNLEVBQUVxTixJQUFJLENBQUN4TixHQUFFQSxJQUFHRztJQUFDO0FBQUM7QUFBQyxTQUFTNlIsRUFBRWpTLENBQUMsRUFBQ0ksSUFBRSxDQUFDLENBQUM7SUFBRUosRUFBRW1HLGFBQWEsSUFBRWlGLFFBQVFDLEtBQUssQ0FBQyxxRUFBb0VwTCxFQUFFLENBQUNELEVBQUUrUSxhQUFhLEVBQUM7SUFBcUMsTUFBTS9QLElBQUVaLEVBQUVrUixNQUFNLEdBQUNsUixFQUFFa1IsTUFBTSxDQUFDbEosR0FBRyxDQUFFLENBQUMsRUFBQ3lELEtBQUk5TCxDQUFDLEVBQUMsR0FBR0EsS0FBSSxFQUFFLEVBQUNzQixJQUFFLENBQUM7SUFBRSxPQUFPdEIsRUFBRUMsRUFBRWdRLE1BQU0sQ0FBQzVDLE1BQU0sRUFBRSxDQUFDck4sR0FBRUU7UUFBSyxJQUFJRztRQUFFLElBQUdpUSxHQUFHclAsR0FBRWYsSUFBRztRQUFPLE1BQU1zQixJQUFFdkIsRUFBRW9SLFFBQVEsQ0FBQ25SLEVBQUUsRUFBQ3dCLElBQUUsU0FBUXJCLENBQUFBLElBQUVKLEVBQUVxUixvQkFBb0IsQ0FBQzNHLEdBQUcsQ0FBQ3pLLEVBQUMsS0FBSSxLQUFLLE1BQUlHLElBQUVBLElBQUU7WUFBQ2tSLFFBQU87WUFBRUMsT0FBTVc7UUFBRTtRQUFFelEsRUFBRTZQLE1BQU0sSUFBR2pRLENBQUFBLENBQUMsQ0FBQ3BCLEVBQUUsR0FBQyxDQUFDLEdBQUV3QixFQUFFOFAsS0FBSyxFQUFFaFEsS0FBR0EsS0FBS3ZCLEVBQUVzRSxHQUFHLEdBQUN0RSxFQUFFc0UsR0FBRyxDQUFDL0MsRUFBRSxDQUFDaUUsT0FBTyxHQUFDekYsRUFBQztJQUFFLElBQUksaUJBQWdCSyxLQUFJaUosQ0FBQUEsR0FBRyxHQUFFLGdCQUFlakosRUFBRStSLFdBQVcsSUFBR2xTLENBQUFBLEVBQUVELEVBQUV3UixPQUFPLEVBQUMsd0NBQXVDWCxFQUFFeFEsRUFBRUwsRUFBRXdSLE9BQU8sR0FBRyxDQUFDelIsR0FBRUU7UUFBS0EsS0FBS29CLEtBQUdnUCxHQUFHclAsR0FBRWYsTUFBSTJILEVBQUU3SCxHQUFFLGdCQUFjLGFBQVc2SCxFQUFFN0gsR0FBRSxnQkFBZXNCLENBQUFBLENBQUMsQ0FBQ3BCLEVBQUUsR0FBQ0QsRUFBRXNLLFFBQVEsQ0FBQ3ZLLEVBQUM7SUFBRSxFQUFFLENBQUMsR0FBR3NCO0FBQUM7QUFBQyxTQUFTK1EsRUFBRSxFQUFDVixNQUFLM1IsQ0FBQyxFQUFDMEYsSUFBR3pGLENBQUMsRUFBQzBCLE9BQU16QixDQUFDLEVBQUNvUCxPQUFNalAsQ0FBQyxFQUFDO0lBQUUsTUFBTWlCLElBQUU7UUFBQ2dSLEdBQUdDLEdBQUcsQ0FBQztZQUFDN00sSUFBRzFGLENBQUFBLElBQUdDLEVBQUVEO1FBQUU7S0FBRztJQUFDSyxLQUFHaUIsRUFBRWtSLE9BQU8sQ0FBQ0YsR0FBR0csT0FBTyxDQUFDO1FBQUMvTixVQUFTO1FBQVU0SyxPQUFNO0lBQUMsS0FBSXJELEVBQUVqTSxNQUFJc0IsRUFBRWtSLE9BQU8sQ0FBQ0YsR0FBR0ksR0FBRyxDQUFDO1FBQUN2TixPQUFNbkYsRUFBRXNLLFFBQVE7UUFBQ2pKLElBQUc7SUFBTztJQUFJLE1BQU1HLElBQUVrQyxNQUFNQyxPQUFPLENBQUMzRCxLQUFHQSxJQUFFO1FBQUNBO0tBQUU7SUFBQyxJQUFHRSxHQUFFO1FBQUMsTUFBTUYsSUFBRSxFQUFFLEVBQUNDLElBQUVDLEVBQUVvRyxlQUFlO1FBQUMsT0FBTzlFLEVBQUVyQixPQUFPLENBQUVELENBQUFBO1lBQUksTUFBTUcsSUFBRUosQ0FBQyxDQUFDQyxFQUFFOEgsUUFBUSxDQUFDdkgsRUFBRSxDQUFDLElBQUUsRUFBRTtZQUFDUixDQUFDLENBQUNDLEVBQUU4SCxRQUFRLENBQUN2SCxFQUFFLENBQUMsR0FBQ0o7WUFBRSxNQUFNbUIsSUFBRVAsRUFBRTtnQkFBQ0MsTUFBS3lSLEVBQUVyUixHQUFFcEI7Z0JBQUdLLE1BQUs7b0JBQUNxUyxTQUFRMVMsRUFBRXdNLElBQUk7Z0JBQUE7WUFBQztZQUFHck0sRUFBRXdTLElBQUksQ0FBQ3JSLElBQUd4QixFQUFFNlMsSUFBSSxDQUFFO2dCQUFLLE1BQU03UyxJQUFFSyxFQUFFeVMsT0FBTyxDQUFDdFI7Z0JBQUcsQ0FBQyxNQUFJeEIsS0FBR0ssRUFBRWlPLE1BQU0sQ0FBQ3RPLEdBQUUsSUFBRytTLEdBQUd2UjtZQUFFO1FBQUcsSUFBSVUsRUFBRztZQUFLbEMsRUFBRUcsT0FBTyxDQUFFSCxDQUFBQSxJQUFHQTtRQUFLO0lBQUc7SUFBQztRQUFDLE1BQU1BLElBQUVpQixFQUFFO1lBQUNDLE1BQUtJO1lBQUVaLFFBQU9jO1lBQUVNLFFBQU87Z0JBQUNVLFFBQU9oQjtZQUFDO1FBQUM7UUFBRyxPQUFPVSxFQUFHO1lBQUs2USxHQUFHL1M7UUFBRTtJQUFHO0FBQUM7QUFBQyxTQUFTMlMsRUFBRTNTLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE9BQU9nTSxFQUFFaE0sS0FBRztRQUFDcVMsR0FBR0ksR0FBRyxDQUFDO1lBQUN2TixPQUFNbEYsRUFBRXFLLFFBQVE7WUFBQ2pKLElBQUc7UUFBTztXQUFNckI7S0FBRSxHQUFDQTtBQUFDO0FBQUMsTUFBTWdQLElBQUUsZUFBYSxPQUFPZ0UsVUFBUUEsT0FBT0MsVUFBVSxJQUFFLGdCQUFlM1MsSUFBRU4sQ0FBQUEsSUFBR0EsRUFBRWdJLFFBQVEsSUFBRWhJLEdBQUUrQyxJQUFFL0MsQ0FBQUEsSUFBR0EsRUFBRThCLE1BQU0sQ0FBQ1UsTUFBTSxFQUFDUSxJQUFFaEQsQ0FBQUEsSUFBR0EsRUFBRThCLE1BQU0sQ0FBQ1EsS0FBSyxFQUFDdUksSUFBRTdLLENBQUFBLElBQUdBLEVBQUVzSyxRQUFRLEVBQUNwSCxJQUFFbEQsQ0FBQUEsSUFBR0EsRUFBRVcsS0FBSyxFQUFDNkksSUFBRXhKLENBQUFBLElBQUdBLEVBQUVrSyxXQUFXLEVBQUNsSixJQUFFaEIsQ0FBQUEsSUFBR0EsRUFBRVUsTUFBTSxFQUFDK0MsSUFBRXpELENBQUFBLElBQUdBLEVBQUUyQixLQUFLLEVBQUNrRyxJQUFFLENBQUM3SCxHQUFFQyxJQUFJSyxFQUFFTixHQUFHTyxJQUFJLENBQUNOLEVBQUUsRUFBQ2tKLElBQUUsQ0FBQ25KLEdBQUVDLEdBQUVDLElBQUlJLEVBQUVOLEdBQUdPLElBQUksQ0FBQ04sRUFBRSxHQUFDQyxHQUFFc0csSUFBRXhHLENBQUFBLElBQUdBLEVBQUVtTixhQUFhLEVBQUM1RyxJQUFFdkcsQ0FBQUEsSUFBRyxDQUFDcUosR0FBR3JKLE1BQUl5SCxHQUFHekgsRUFBQyxLQUFJLFVBQVNBLEdBQUVrVCxJQUFFbFQsQ0FBQUEsSUFBR0MsQ0FBQUEsSUFBR3NHLEVBQUV0RyxNQUFJQSxFQUFFeU0sSUFBSSxLQUFHMU0sR0FBRWlNLElBQUVpSCxFQUFFLFVBQVN2RCxJQUFFdUQsRUFBRSxVQUFTN0UsS0FBRzZFLEVBQUUsV0FBVXZDLEtBQUczUSxDQUFBQSxJQUFHdUcsRUFBRXZHLE1BQUksQ0FBQyxDQUFDQSxFQUFFNkksVUFBVSxFQUFDcUksS0FBR2dDLEVBQUUsV0FBVXhDLEtBQUd3QyxFQUFFO0FBQVMsSUFBSUMsS0FBRztJQUFDQyxXQUFVO0lBQUt6QixNQUFLcEw7SUFBRXBCLE9BQU04RztJQUFFL0MsT0FBTXlHO0lBQUV4QixRQUFPRTtJQUFHeEYsWUFBVzhIO0lBQUczSCxRQUFPa0k7SUFBR3ZQLE9BQU0rTztJQUFHMkMsVUFBU3JULENBQUFBLElBQUdxTyxHQUFHck8sTUFBSSxLQUFHNkgsRUFBRTdILEdBQUU7QUFBVztBQUFFLE1BQU1zUSxLQUFHLENBQUN0USxHQUFFQyxJQUFJRCxFQUFFc1QsUUFBUSxDQUFDclQsSUFBR3NULEtBQUcsQ0FBQ3ZULEdBQUVDO0lBQUssTUFBTUMsSUFBRUYsRUFBRThTLE9BQU8sQ0FBQzdTO0lBQUcsQ0FBQyxNQUFJQyxLQUFHRixFQUFFc08sTUFBTSxDQUFDcE8sR0FBRTtBQUFFLEdBQUV3QyxLQUFHLENBQUMxQyxHQUFFQyxJQUFJRCxFQUFFNlMsSUFBSSxDQUFDNVMsSUFBR3FKLEtBQUcsQ0FBQ3RKLEdBQUVDLEdBQUVDLEdBQUVHLElBQUksQ0FBQ0wsS0FBR3FMLFFBQVFDLEtBQUssQ0FBQyxDQUFDLEVBQUVqTCxJQUFFQSxJQUFFLE9BQUssR0FBRyxFQUFFSixFQUFFLGNBQWMsRUFBRUMsSUFBRSxDQUFDLE1BQU0sRUFBRUEsRUFBRSxRQUFRLENBQUMsR0FBQyxHQUFHLENBQUMsR0FBRXNULEtBQUc7SUFBSyxJQUFJeFQsSUFBRTtJQUFFLE9BQU0sSUFBSSxLQUFJLEVBQUVBO0FBQUMsR0FBRXlULEtBQUdELE1BQUtFLEtBQUdGLE1BQUs1USxLQUFHNFEsTUFBSzFGLEtBQUcwRjtBQUFLLElBQUlHO0FBQUcsTUFBTUMsS0FBRzVULENBQUFBO0lBQUkyVCxLQUFHM1Q7QUFBQztBQUFFLElBQUlRLEtBQUc7QUFBSyxNQUFNTyxLQUFHZixDQUFBQTtJQUFJMlQsTUFBSUEsR0FBRzNULEdBQUVRO0FBQUcsR0FBRUssS0FBRyxJQUFJTCxNQUFJQSxHQUFHSSxRQUFRLEVBQUNpVCxLQUFHN1QsQ0FBQUEsSUFBSUEsQ0FBQUEsS0FBR1EsTUFBSUEsR0FBR00sT0FBTyxJQUFHZCxDQUFBQSxJQUFFLENBQUMsRUFBRVEsR0FBR00sT0FBTyxDQUFDLENBQUMsRUFBRWQsRUFBRSxDQUFDLEdBQUVBLENBQUFBLEdBQUc4VCxLQUFHLENBQUMsRUFBQ2hJLEtBQUk5TCxDQUFDLEVBQUNnSCxNQUFLL0csQ0FBQyxFQUFDaUgsS0FBSWhILENBQUMsRUFBQzZULFFBQU96UyxDQUFDLEVBQUNvRSxJQUFHbEUsQ0FBQyxFQUFDLEdBQUduQixFQUFFWSxFQUFFO1FBQUNWLE1BQUs7WUFBQ08sU0FBUStTLEdBQUc3VDtZQUFHOEwsS0FBSTlMO1lBQUVnSCxNQUFLL0c7WUFBRWlILEtBQUloSDtZQUFFNlQsUUFBT3pTO1lBQUVVLE1BQUs7UUFBUztJQUFDLElBQUdSLElBQUd5QixLQUFHLENBQUNqRCxHQUFFRTtJQUFLLE1BQU1HLElBQUVDLEVBQUVOO0lBQUdDLEVBQUVDLEdBQUdGLENBQUFBO1FBQUksTUFBTUMsSUFBRUssRUFBRU47UUFBRyxhQUFXSyxFQUFFeUIsTUFBTSxDQUFDRSxJQUFJLElBQUcvQixDQUFBQSxFQUFFNkIsTUFBTSxDQUFDRSxJQUFJLEdBQUMsV0FBVSxHQUFHVSxHQUFHSyxFQUFFOUMsSUFBR0ksSUFBR3FDLEdBQUdNLEVBQUUzQyxJQUFHSjtJQUFFO0FBQUcsR0FBRW1DLEtBQUcsQ0FBQ3BDLElBQUUsRUFBRSxHQUFHLENBQUMwRCxNQUFNQyxPQUFPLENBQUMzRCxLQUFHQSxJQUFFO1FBQUNBO0tBQUUsRUFBRWdVLElBQUksR0FBRzNMLEdBQUcsQ0FBQy9ILElBQUdtSCxLQUFHekgsQ0FBQUEsSUFBRyxZQUFVLE9BQU9BLEtBQUcsU0FBT0EsR0FBRXFKLEtBQUdySixDQUFBQSxJQUFHLGNBQVksT0FBT0EsR0FBRTJJLEtBQUczSSxDQUFBQSxJQUFHLEtBQUssTUFBSUEsR0FBRXNILEtBQUd0SCxDQUFBQSxJQUFHRSxFQUFFdUgsR0FBR3pILE1BQUlxSixHQUFHckosSUFBRyx1Q0FBc0NpVSxLQUFHLENBQUNqVSxHQUFFQyxHQUFFSSxHQUFFWSxJQUFJZixFQUFFLENBQUUsRUFBQ3VILEdBQUd6SCxNQUFJLENBQUNxSixHQUFHckosTUFBSSxDQUFFLGFBQVdBLENBQUFBLEtBQUksQ0FBRSxlQUFhQSxDQUFBQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxFQUFFLFNBQVMsRUFBRUksRUFBRSxzQ0FBc0MsRUFBRVksRUFBRSxDQUFDLEdBQUVtSSxLQUFHLENBQUNwSixHQUFFRSxHQUFFRztJQUFLcUQsTUFBTUMsT0FBTyxDQUFDM0QsS0FBR0MsRUFBRUQsR0FBRyxDQUFDQSxHQUFFQyxJQUFJZ1UsR0FBR2pVLEdBQUVFLEdBQUUsQ0FBQyxFQUFFRCxFQUFFLFNBQVMsRUFBRUksRUFBRSxDQUFDLEVBQUMsT0FBTTRULEdBQUdqVSxHQUFFRSxHQUFFRyxHQUFFO0FBQXFCLEdBQUUwUCxLQUFHLENBQUMvUCxHQUFFSyxHQUFFWSxJQUFFLFFBQVEsR0FBR2hCLEVBQUVtQyxHQUFHL0IsSUFBSUosQ0FBQUEsSUFBR0MsRUFBRSxDQUFDMkgsRUFBRTVILEdBQUUsWUFBVyxDQUFDLEVBQUVELEVBQUUsbUJBQW1CLEVBQUVpQixFQUFFLHdEQUF3RCxDQUFDLElBQUl1SyxLQUFHLENBQUN4TCxHQUFFLEVBQUMwRixJQUFHekYsQ0FBQyxFQUFDLEVBQUMsRUFBQ2dCLEdBQUVmLENBQUMsRUFBQyxHQUFHRCxFQUFFRCxHQUFFRSxJQUFHMEosS0FBRyxDQUFDNUosR0FBRSxFQUFDMEYsSUFBR3pGLENBQUMsRUFBQyxFQUFDLEVBQUNnQixHQUFFZixDQUFDLEVBQUMsR0FBR0QsRUFBRUMsR0FBRUYsSUFBR3dJLEtBQUcsQ0FBQ3hJLEdBQUUsRUFBQzBGLElBQUd6RixDQUFDLEVBQUMsR0FBR0EsRUFBRUQsSUFBR2tVLEtBQUcsQ0FBQ2xVLEdBQUVDLEdBQUVDLEdBQUVHO0lBQUssTUFBTVksSUFBRTtRQUFDUixJQUFHaVQ7UUFBSzFSLE1BQUtoQztRQUFFa0YsTUFBS2pGO0lBQUM7SUFBRSxPQUFPQyxLQUFJZSxDQUFBQSxFQUFFd0QsS0FBSyxHQUFDO1FBQUNDLFVBQVN4RTtJQUFDLEdBQUVHLEtBQUlZLENBQUFBLEVBQUV3RCxLQUFLLENBQUNFLFNBQVMsR0FBQyxFQUFFd1AsRUFBQyxDQUFDLEdBQUdsVDtBQUFDO0FBQUUsSUFBSWtULEtBQUc7QUFBRSxNQUFNMUksS0FBRyxDQUFDLEVBQUN0SyxNQUFLbkIsSUFBRSxPQUFPLEVBQUNtRixPQUFNbEYsQ0FBQyxFQUFDc0IsUUFBT3JCLENBQUMsRUFBQ21CLElBQUdoQixJQUFHSCxJQUFFLFVBQVEsT0FBUSxFQUFDb1AsT0FBTXJPLENBQUMsRUFBQ3lELFVBQVNwRCxDQUFDLEVBQUMsR0FBRzRTLEdBQUcsT0FBTTtRQUFDL1MsTUFBS25CO1FBQUVtRixPQUFNbEY7UUFBRW9CLElBQUdoQjtRQUFFa0IsUUFBT3JCO0lBQUMsR0FBRW9CLEdBQUVMLElBQUdrUCxLQUFHLENBQUMsRUFBQ3pLLElBQUcxRixDQUFDLEVBQUNzUCxPQUFNclAsQ0FBQyxFQUFDeUUsVUFBU3hFLENBQUMsRUFBQzJGLE1BQUt4RixJQUFFLENBQUMsRUFBQzBGLFFBQU85RSxJQUFFLENBQUMsRUFBQzJFLE1BQUt0RSxJQUFFLENBQUMsRUFBQyxHQUFHNFMsR0FBRyxXQUFVO1FBQUN4TyxJQUFHMUY7UUFBRTZGLE1BQUt4RjtRQUFFMEYsUUFBTzlFO1FBQUUyRSxNQUFLdEU7SUFBQyxHQUFFcEIsR0FBRUQsSUFBR21VLEtBQUcsQ0FBQyxFQUFDMU8sSUFBRzFGLENBQUMsRUFBQyxHQUFHbVEsR0FBRztRQUFDekssSUFBRzFGO1FBQUUwRSxVQUFTO0lBQVEsSUFBR2dFLEtBQUcsQ0FBQzFJLEdBQUVDLEdBQUVDLElBQUlpUSxHQUFHO1FBQUN6SyxJQUFHMUY7UUFBRTZGLE1BQUs7UUFBRUUsUUFBTzlGO1FBQUV5RSxVQUFTeEUsS0FBRztJQUFRLElBQUdrTCxLQUFHLENBQUNwTCxHQUFFQyxHQUFFQyxJQUFJdUwsR0FBRztRQUFDdEcsT0FBTW5GO1FBQUVxQixJQUFHcEIsSUFBRSxVQUFRO1FBQUl5RSxVQUFTeEUsS0FBRztRQUFVb1AsT0FBTTtJQUFDLElBQUcvRyxLQUFHLENBQUN2SSxJQUFFd0ksRUFBRSxFQUFDdkksSUFBSWtRLEdBQUc7UUFBQ3pLLElBQUcxRjtRQUFFNEYsTUFBSztRQUFFRyxRQUFPOUY7SUFBQyxJQUFHcVMsS0FBRztJQUFDSSxLQUFJakg7SUFBR2dILFNBQVF0QztJQUFHcEssUUFBTyxDQUFDLEVBQUNMLElBQUcxRixDQUFDLEVBQUM0RixNQUFLM0YsQ0FBQyxFQUFDLEdBQUdrUSxHQUFHO1lBQUN6SyxJQUFHMUY7WUFBRStGLFFBQU87WUFBRUgsTUFBSzNGO1FBQUM7SUFBR3NTLEtBQUk2QjtBQUFFLEdBQUV2SyxLQUFHN0osQ0FBQUEsSUFBSTtRQUFDUyxJQUFHaVQ7UUFBS2pPLFNBQVF6RjtRQUFFcVUsU0FBUXJVO0lBQUMsSUFBR3VGLEtBQUcsQ0FBQyxFQUFDRSxTQUFRekYsQ0FBQyxFQUFDLEdBQUdBLEdBQUU0SyxLQUFHLENBQUM1SyxHQUFFQztJQUFLRCxFQUFFc1UsTUFBTSxJQUFHdFUsQ0FBQUEsRUFBRXNVLE1BQU0sR0FBQyxFQUFFLEdBQUU1UixHQUFHMUMsRUFBRXNVLE1BQU0sRUFBQ3JVO0FBQUU7QUFBRSxJQUFJc1UsS0FBRztBQUFLLE1BQU1DLEtBQUcsQ0FBQ3hVLEdBQUVDO0lBQUssSUFBRyxDQUFDRCxHQUFFLE9BQU9DO0lBQUUsSUFBRyxDQUFDQSxHQUFFLE9BQU9EO0lBQUUsSUFBSUU7SUFBRSxPQUFNLENBQUNGLEVBQUUrSyxDQUFDLENBQUMvSSxJQUFJLEtBQUcvQixFQUFFOEssQ0FBQyxDQUFDL0ksSUFBSSxJQUFFaEMsRUFBRStLLENBQUMsQ0FBQ3RLLEVBQUUsR0FBQ1IsRUFBRThLLENBQUMsQ0FBQ3RLLEVBQUUsSUFBRWdVLEdBQUd6VSxFQUFFK0ssQ0FBQyxDQUFDL0ksSUFBSSxJQUFFeVMsR0FBR3hVLEVBQUU4SyxDQUFDLENBQUMvSSxJQUFJLE1BQUs5QixDQUFBQSxJQUFFRixHQUFFQSxJQUFFQyxHQUFFQSxJQUFFQyxDQUFBQSxHQUFHQSxJQUFFc1UsR0FBR3hVLEVBQUVFLENBQUMsRUFBQ0QsSUFBR0QsRUFBRUUsQ0FBQyxHQUFDRixFQUFFNkIsQ0FBQyxFQUFDN0IsRUFBRTZCLENBQUMsR0FBQzNCLEdBQUVGO0FBQUMsR0FBRTBVLEtBQUcsRUFBRTtBQUFDLElBQUlDLEtBQUc7QUFBRSxNQUFLQSxLQUFHLEdBQUdqUyxHQUFHZ1MsSUFBRztJQUFDRSxPQUFNO0lBQUtDLE1BQUs7SUFBS0MsTUFBSztBQUFDLElBQUdILE1BQUk7QUFBRSxNQUFNdFEsS0FBRztJQUFLLElBQUksSUFBSXJFLElBQUUsR0FBRUEsSUFBRSxHQUFFQSxJQUFJO1FBQUMsTUFBTUMsSUFBRXlVLEVBQUUsQ0FBQzFVLEVBQUU7UUFBQyxJQUFHQyxFQUFFNlUsSUFBSSxHQUFDLEdBQUU7WUFBQyxJQUFHLE1BQUk5VSxLQUFHLE1BQUlBLEdBQUU7Z0JBQUNDLEVBQUU2VSxJQUFJLElBQUU7Z0JBQUUsTUFBTTlVLElBQUV1VSxHQUFHeEosQ0FBQztnQkFBQyxPQUFPd0osS0FBR0MsR0FBR0QsR0FBRzFTLENBQUMsRUFBQzBTLEdBQUdyVSxDQUFDLEdBQUVGO1lBQUM7WUFBQyxNQUFJQyxFQUFFNlUsSUFBSSxJQUFHN1UsQ0FBQUEsRUFBRTRVLElBQUksR0FBQyxJQUFHO1lBQUcsTUFBTTNVLElBQUVELEVBQUUyVSxLQUFLO1lBQUMsT0FBTzNVLEVBQUUyVSxLQUFLLEdBQUMxVSxFQUFFQSxDQUFDLEVBQUNELEVBQUU2VSxJQUFJLElBQUUsR0FBRTVVLEVBQUU2SyxDQUFDO1FBQUE7SUFBQztBQUFDLEdBQUVsSCxLQUFHLENBQUM3RCxHQUFFQyxHQUFFQyxHQUFFRyxHQUFFWSxHQUFFSyxHQUFFRSxJQUFJd0QsR0FBRyxHQUFFO1FBQUMvRCxHQUFFO1FBQUtnSixHQUFFO1FBQUsvSSxNQUFLaEI7UUFBRVEsUUFBT0w7UUFBRU0sT0FBTU07UUFBRXNDLE1BQUt0RDtRQUFFMEIsT0FBTUw7UUFBRWYsTUFBS2lCO0lBQUMsR0FBRXhCLEdBQUUsSUFBR2dGLEtBQUcsQ0FBQ2hGLEdBQUVDLEdBQUVDLEdBQUVHO0lBQUssTUFBTVksSUFBRXdULEdBQUd2VSxJQUFHb0IsSUFBRW9ULEVBQUUsQ0FBQ3pULEVBQUUsRUFBQ08sSUFBRTtRQUFDdUosR0FBRTtZQUFDekcsS0FBSXRFO1lBQUV3RCxPQUFNdkQ7WUFBRStCLE1BQUs5QjtZQUFFTyxJQUFHSjtRQUFDO1FBQUV3QixHQUFFO1FBQUszQixHQUFFO0lBQUk7SUFBRSxNQUFJZSxLQUFHLE1BQUlBLElBQUVzVCxLQUFHQyxHQUFHRCxJQUFHL1MsS0FBSSxPQUFJRixFQUFFd1QsSUFBSSxHQUFDeFQsRUFBRXNULEtBQUssR0FBQ3BULElBQUVGLEVBQUV1VCxJQUFJLENBQUMzVSxDQUFDLEdBQUNzQixHQUFFRixFQUFFdVQsSUFBSSxHQUFDclQsQ0FBQUEsR0FBR0YsRUFBRXdULElBQUksSUFBRTtBQUFDLEdBQUVMLEtBQUd6VSxDQUFBQTtJQUFJLE9BQU9BO1FBQUcsS0FBSTtZQUFRLE9BQU87UUFBRSxLQUFJO1lBQU8sT0FBTztRQUFFLEtBQUk7WUFBTyxPQUFPO1FBQUUsS0FBSTtZQUFVLE9BQU87UUFBRSxLQUFJO1lBQVUsT0FBTztRQUFFLEtBQUk7WUFBUyxPQUFPO1FBQUU7WUFBUSxPQUFNLENBQUM7SUFBQztBQUFDLEdBQUU2RSxLQUFHLElBQUlpSztBQUFJLElBQUkxTCxJQUFHVSxLQUFHLEdBQUVJLEtBQUcsR0FBRUUsS0FBRyxHQUFFakIsS0FBRztBQUFLLE1BQU00SyxLQUFHL04sQ0FBQUE7SUFBSW9ELEtBQUdwRDtBQUFDLEdBQUU4SCxLQUFHOUgsQ0FBQUE7SUFBSW1ELEtBQUduRDtBQUFDLEdBQUVvRixLQUFHLENBQUNwRixHQUFFQztJQUFLLElBQUdELEdBQUU7UUFBQyxNQUFLQSxLQUFHLENBQUNBLEVBQUV1RSxHQUFHLENBQUN0RSxFQUFFLEVBQUVELElBQUVBLEVBQUVVLE1BQU07UUFBQyxJQUFHVixHQUFFLE9BQU9BO0lBQUM7SUFBQyxPQUFPO0FBQUksR0FBRXdGLEtBQUcsQ0FBQ3hGLEdBQUVDLEdBQUVDLEdBQUVHO0lBQUssTUFBTVksSUFBRW1FLEdBQUdwRixHQUFFRSxFQUFFTyxFQUFFO0lBQUUsT0FBT1EsSUFBRUEsRUFBRXNELEdBQUcsQ0FBQ3JFLEVBQUVPLEVBQUUsQ0FBQyxHQUFDUixJQUFHb0YsQ0FBQUEsR0FBR3BGLEdBQUVDLEdBQUVHLElBQUdKLEVBQUVzRSxHQUFHLENBQUNyRSxFQUFFTyxFQUFFLENBQUMsSUFBRVA7QUFBQztBQUFFLElBQUk4RjtBQUFHLE1BQU0rTyxLQUFHL1UsQ0FBQUE7SUFBSWdHLEtBQUdoRztBQUFDLEdBQUVnVixLQUFHaFYsQ0FBQUEsSUFBR0EsR0FBRXFGLEtBQUcsQ0FBQ3JGLEdBQUVFLEdBQUVHLEdBQUVZLEdBQUVLO0lBQUssTUFBTUUsSUFBRXhCLEVBQUV1RSxHQUFHO0lBQUMsSUFBRy9DLENBQUMsQ0FBQ3RCLEVBQUVPLEVBQUUsQ0FBQyxFQUFDO0lBQU8sTUFBTWlCLElBQUV4QixFQUFFNEwsR0FBRyxFQUFDbEssSUFBRTtRQUFDbkIsSUFBR1AsRUFBRU8sRUFBRTtRQUFDZ0YsU0FBUXZGLEVBQUVtVSxPQUFPO1FBQUM5VCxNQUFLTCxFQUFFSyxJQUFJO0lBQUE7SUFBRSxJQUFHcUIsRUFBRW5CLEVBQUUsSUFBSVQsRUFBRWlRLE1BQU0sQ0FBQ3lCLEtBQUssRUFBQzlQLEVBQUU2RCxPQUFPLEdBQUN6RixFQUFFaVEsTUFBTSxDQUFDeUIsS0FBSyxDQUFDOVAsRUFBRW5CLEVBQUUsQ0FBQztTQUFNLElBQUdpQixLQUFHQSxLQUFLMUIsRUFBRWlRLE1BQU0sQ0FBQzVDLE1BQU0sSUFBRSxDQUFFM0wsQ0FBQUEsS0FBSzFCLEVBQUVxUixRQUFRLEdBQUU7UUFBQyxJQUFJeFA7UUFBRSxNQUFNNUIsSUFBRSxRQUFNQyxLQUFHLFNBQVEyQixDQUFBQSxJQUFFM0IsRUFBRUssSUFBSSxLQUFHLEtBQUssTUFBSXNCLElBQUUsS0FBSyxJQUFFQSxFQUFFb00sU0FBUztRQUFDck0sRUFBRTZELE9BQU8sR0FBQyxDQUFDekYsRUFBRTZSLGFBQWEsSUFBRSxhQUFXNVIsS0FBSSxTQUFNQSxJQUFFLEtBQUssSUFBRUEsRUFBRStSLElBQUksS0FBR2dELEVBQUMsRUFBR2hWLEVBQUVpUSxNQUFNLENBQUM1QyxNQUFNLENBQUMzTCxFQUFFO0lBQUMsT0FBTSxJQUFHeEIsRUFBRW9VLE1BQU0sSUFBRSxDQUFDaFQsR0FBRTtRQUFDLElBQUlBLElBQUU7UUFBRSxNQUFNSSxJQUFFckIsS0FBRyxDQUFDSCxFQUFFNEssTUFBTSxJQUFFN0o7UUFBRWhCLEVBQUVDLEVBQUVvVSxNQUFNLEVBQUVyVSxDQUFBQTtZQUFJLE9BQU9BLEVBQUUrQixJQUFJO2dCQUFFLEtBQUk7b0JBQU07d0JBQUMsTUFBTTlCLElBQUVELEVBQUVrQixJQUFJO3dCQUFDLElBQUcsQ0FBQ2pCLEtBQUdELEVBQUV5RixFQUFFLEtBQUl4RixDQUFBQSxLQUFHbUYsR0FBR3JGLEdBQUVFLEdBQUVHLEdBQUVZLElBQUdTLENBQUFBLEdBQUc7NEJBQUMsTUFBTTFCLElBQUVFLEtBQUdzQixDQUFDLENBQUN0QixFQUFFTyxFQUFFLENBQUMsQ0FBQ2dGLE9BQU87NEJBQUM3RCxFQUFFNkQsT0FBTyxHQUFDeEYsRUFBRXlGLEVBQUUsR0FBQ3pGLEVBQUV5RixFQUFFLENBQUMxRixLQUFHQTt3QkFBQzt3QkFBQztvQkFBSztnQkFBQyxLQUFJO29CQUFRcUYsR0FBR3JGLEdBQUVDLEVBQUVrQixJQUFJLEVBQUNkLEdBQUVZLElBQUdLLEtBQUlBLENBQUFBLElBQUUsR0FBRU0sRUFBRTZELE9BQU8sR0FBQy9CLE1BQU1DLE9BQU8sQ0FBQy9CLEVBQUU2RCxPQUFPLElBQUU7MkJBQUk3RCxFQUFFNkQsT0FBTztxQkFBQyxHQUFDO3dCQUFDLEdBQUc3RCxFQUFFNkQsT0FBTztvQkFBQSxJQUFHL0QsS0FBSUUsQ0FBQUEsRUFBRTZELE9BQU8sQ0FBQ3hGLEVBQUVzUSxLQUFLLENBQUMsR0FBQy9PLENBQUMsQ0FBQ0EsQ0FBQyxDQUFDdkIsRUFBRWtCLElBQUksQ0FBQ1YsRUFBRSxDQUFDLENBQUNBLEVBQUUsQ0FBQyxDQUFDZ0YsT0FBTztZQUFDO1FBQUM7SUFBRztJQUFDL0QsS0FBSTFCLENBQUFBLEVBQUVxUixRQUFRLENBQUMzUCxFQUFFLEdBQUN4QixFQUFFTyxFQUFFLEdBQUVlLENBQUMsQ0FBQ3RCLEVBQUVPLEVBQUUsQ0FBQyxHQUFDbUI7QUFBQyxHQUFFa0UsS0FBRyxDQUFDOUYsR0FBRUMsR0FBRUM7SUFBSyxJQUFHO1FBQUMsT0FBT0QsRUFBRWlELEVBQUVoRCxJQUFHRixFQUFFMkIsS0FBSyxFQUFDekI7SUFBRSxFQUFDLE9BQU1ELEdBQUU7UUFBQ29MLFFBQVFDLEtBQUssQ0FBQ3JMLElBQUdELEVBQUV3RSxJQUFJLEdBQUMsR0FBRXhFLEVBQUVpVixVQUFVLEdBQUNoVjtJQUFDO0FBQUMsR0FBRTJILEtBQUcsQ0FBQzNILEdBQUVDLElBQUUsQ0FBQyxDQUFDLEdBQUl1SCxDQUFBQSxHQUFHeEgsTUFBSzJILENBQUFBLEdBQUczSCxFQUFFc0gsRUFBRSxFQUFDckgsSUFBR0YsRUFBRUMsR0FBRyxDQUFDRCxHQUFFQztRQUFLMEksR0FBRzNJLE1BQUksU0FBT0MsS0FBRyxVQUFRQSxLQUFJQyxDQUFBQSxDQUFDLENBQUNELEVBQUUsR0FBQ0QsQ0FBQUE7SUFBRSxJQUFJNEgsR0FBRzNILEVBQUV1SCxHQUFHLEVBQUN0SCxFQUFDLEdBQUdBLENBQUFBLEdBQUdnVixLQUFHLENBQUNsVixHQUFFQztJQUFLc1QsR0FBR3ZULEVBQUU4QyxJQUFJLEVBQUM3QyxJQUFHc1QsR0FBR3hRLEVBQUUvQyxJQUFHQyxJQUFHc1QsR0FBR3ZRLEVBQUVoRCxJQUFHQztBQUFFLEdBQUVrVixLQUFHLENBQUNuVixHQUFFQyxHQUFFQztJQUFLLElBQUlHO0lBQUVMLEVBQUU4QyxJQUFJLENBQUNjLE1BQU0sR0FBQyxHQUFFNUQsRUFBRTZDLEdBQUcsQ0FBQ2UsTUFBTSxHQUFDLEdBQUU1RCxFQUFFMkIsS0FBSyxHQUFDO0lBQUssSUFBSVYsSUFBRStCLEVBQUVoRDtJQUFHLE1BQUtLLElBQUVZLEVBQUVtVSxHQUFHLElBQUlGLEdBQUc3VSxHQUFFTCxJQUFHLENBQUNDLEtBQUdDLEtBQUcsYUFBV0YsRUFBRU8sSUFBSSxDQUFDb0YsRUFBRSxJQUFFLGdCQUFjdEYsRUFBRXlCLE1BQU0sQ0FBQ0UsSUFBSSxLQUFHbVQsR0FBRzlVLEdBQUVKLEdBQUUsU0FBT0ksRUFBRUUsSUFBSSxDQUFDb0YsRUFBRSxJQUFFekY7SUFBRyxJQUFJZSxJQUFFOEIsRUFBRS9DLElBQUdLLElBQUVZLEVBQUVtVSxHQUFHLElBQUlGLEdBQUc3VSxHQUFFTCxJQUFHRSxLQUFHLGdCQUFjRyxFQUFFeUIsTUFBTSxDQUFDRSxJQUFJLElBQUVtVCxHQUFHOVUsR0FBRUosR0FBRSxTQUFPSSxFQUFFRSxJQUFJLENBQUNvRixFQUFFLElBQUV6RjtBQUFFLEdBQUVtVixLQUFHclYsQ0FBQUEsSUFBR0EsRUFBRXNWLEtBQUssSUFBR3ZDLEtBQUcsQ0FBQy9TLEdBQUUsRUFBQ3VWLE1BQUt0VixDQUFDLEVBQUMsR0FBQyxDQUFDLENBQUM7SUFBSSxJQUFJQyxJQUFFO0lBQUUsSUFBR0YsRUFBRStPLFFBQVEsSUFBRS9PLEVBQUUrTyxRQUFRLENBQUM5SixNQUFNLENBQUNqRixJQUFHaU0sRUFBRWpNLElBQUdxVixHQUFHN0wsRUFBRXhKO1NBQVMsSUFBR2tSLEdBQUdsUixJQUFHO1FBQUNFLElBQUU7UUFBRSxNQUFNRCxJQUFFRCxFQUFFd08sT0FBTztRQUFDNkcsR0FBR3BWLEVBQUV1VixNQUFNLEdBQUVILEdBQUdwVixFQUFFd1YsT0FBTyxHQUFFSixHQUFHcFYsRUFBRXlWLE1BQU0sR0FBRUwsR0FBR3BWLEVBQUUwVixPQUFPO0lBQUM7SUFBQ1IsR0FBRzdVLEVBQUVOLElBQUcsQ0FBQyxDQUFDQyxHQUFFQztBQUFFLEdBQUV3SixLQUFHMUosQ0FBQUEsSUFBR2tDLEVBQUcsSUFBSTZRLEdBQUcvUyxLQUFLOEksS0FBRyxDQUFDOUksR0FBRUMsR0FBRUMsR0FBRUcsR0FBRWlCLElBQUlMLEVBQUU7UUFBQ0MsTUFBS2hCO1FBQUVRLFFBQU9WO1FBQUV5QixPQUFNeEI7UUFBRTBCLE9BQU07WUFBQytELElBQUdwRTtRQUFDO1FBQUVmLE1BQUs7WUFBQ29GLElBQUd0RjtRQUFDO1FBQUV5QixRQUFPO1lBQUNVLFFBQU87Z0JBQUN4QztnQkFBRUM7YUFBRTtZQUFDcUMsT0FBTXJDO1FBQUM7UUFBRWdDLFVBQVM7SUFBQyxJQUFHMlQsS0FBRzVWLENBQUFBO0lBQUksTUFBTUMsSUFBRSxXQUFVLENBQUMsRUFBQ2tCLE1BQUtqQixDQUFDLEVBQUNtQixJQUFHaEIsQ0FBQyxFQUFDLEVBQUNpQixFQUFFLEdBQUNTLEVBQUUvQixHQUFFLElBQUd3QixJQUFFSyxFQUFFNUIsR0FBRXFCO0lBQUcsT0FBT2dJLEdBQUcsR0FBRXJKLEdBQUUsVUFBU3VCLElBQUc0SCxHQUFHbEosR0FBRXNCLEdBQUUsV0FBVTRILEdBQUcvSSxHQUFFbUIsR0FBRSxTQUFRdU8sR0FBR3ZPLEdBQUVuQixHQUFFLE9BQU1xSixHQUFHekksRUFBRTtRQUFDUCxRQUFPUjtRQUFFdUIsT0FBTXBCO1FBQUVFLE1BQUs7WUFBQ29GLElBQUcxRjtZQUFFc08sUUFBT2pOO1FBQUM7UUFBRVEsUUFBTyxDQUFDO1FBQUVHLFVBQVM7SUFBQztBQUFHLEdBQUVtRyxLQUFHLENBQUNwSSxHQUFFQyxJQUFLQyxDQUFBQSxFQUFFbUosR0FBR3BKLElBQUcseUNBQXdDeUosR0FBR3pJLEVBQUU7UUFBQ1UsT0FBTTtZQUFDK0QsSUFBR3pGO1FBQUM7UUFBRWlCLE1BQUs7WUFBQ2tULEdBQUc7Z0JBQUMxTyxJQUFHOEM7WUFBRTtTQUFHO1FBQUM5SCxRQUFPVjtRQUFFTyxNQUFLO1lBQUNvRixJQUFHO1FBQU87UUFBRTdELFFBQU87WUFBQ1UsUUFBT3hDO1FBQUM7UUFBRWlDLFVBQVM7SUFBQyxHQUFFLEdBQUc4RyxLQUFHLENBQUMvSSxHQUFFQyxHQUFFQyxJQUFFLE9BQU87SUFBSWMsRUFBRWhCLE1BQUlnQixFQUFFaEIsR0FBR2lKLEtBQUssQ0FBQy9JLEVBQUUsQ0FBQ0Q7QUFBRSxHQUFFZ0ksS0FBRyxDQUFDakksR0FBRUMsR0FBRUM7SUFBSyxNQUFNRyxJQUFFdUgsR0FBRzFILElBQUdlLElBQUUsYUFBV2pCLEdBQUVzQixJQUFFbVMsTUFBSyxFQUFDM0gsS0FBSXRLLElBQUUsSUFBSSxFQUFDeUYsT0FBTXZGLElBQUUsSUFBSSxFQUFDc0gsUUFBT25ILElBQUUsSUFBSSxFQUFDbkIsUUFBT3FCLElBQUVGLENBQUMsRUFBQyxHQUFDeEIsR0FBRTZCLElBQUVSLEtBQUdyQixFQUFFMkcsSUFBSSxJQUFHL0YsQ0FBQUEsSUFBRSxLQUFHSyxDQUFBQSxHQUFHYSxJQUFFUCxFQUFFTSxHQUFFSCxJQUFHTSxJQUFFO1FBQUNzRCxJQUFHMUYsRUFBRXlNLElBQUksR0FBQzFNO1FBQUVnSCxNQUFLL0csRUFBRTBHLFNBQVMsR0FBQ3pFO1FBQUU0SixLQUFJN0wsRUFBRTZMLEdBQUcsR0FBQytILEdBQUdyUztRQUFHeUYsT0FBTXZGO1FBQUVtVSxRQUFPNVYsRUFBRVEsRUFBRSxHQUFDYTtRQUFFMk0sV0FBVTVOLEVBQUU0TixTQUFTO1FBQUNuRSxTQUFRekosRUFBRXlKLE9BQU87UUFBQ3lFLFFBQU9sTztJQUFDO0lBQUUsSUFBR0osRUFBRTRJLFVBQVUsR0FBQyxDQUFDeEksRUFBRXlKLE9BQU8sRUFBQzdKLEVBQUVTLE1BQU0sR0FBQ3FCLEdBQUU5QixFQUFFa04sYUFBYSxHQUFDaEwsR0FBRWxDLEVBQUVnTCxhQUFhLEdBQUM1SyxHQUFFSixFQUFFNlYsT0FBTyxHQUFDLElBQUt4TSxDQUFBQSxHQUFHLEdBQUUsV0FBVSwyQkFBMEJuSCxFQUFFc0UsUUFBUSxHQUFFLENBQUN4RixHQUFFO1FBQUNoQixFQUFFZ1AsU0FBUyxHQUFDalAsQ0FBQUEsSUFBSXNILENBQUFBLEdBQUd0SCxJQUFHQyxFQUFFa0ksS0FBSyxDQUFDa0IsR0FBR3JKLEtBQUdBLElBQUVDLENBQUFBLElBQUdELEVBQUU4QyxJQUFJLElBQUU5QyxFQUFFOEMsSUFBSSxDQUFDN0MsR0FBRSxHQUFHQSxDQUFDLENBQUMrTyxFQUFFLEdBQUMsSUFBSS9PO1FBQUUsTUFBTUQsSUFBRWE7UUFBS2IsS0FBSXFDLENBQUFBLEVBQUUwVCxjQUFjLEdBQUMvVixDQUFBQTtJQUFFO0lBQUMsT0FBT3FDO0FBQUMsR0FBRWlHLEtBQUcsQ0FBQ3RJLEdBQUVDLEdBQUVDLEdBQUVHO0lBQUssSUFBSVk7SUFBRXdHLEdBQUd2SCxNQUFLZSxDQUFBQSxJQUFFZixHQUFFQSxJQUFFQSxFQUFFd0YsRUFBRTtJQUFFLE1BQU1wRSxJQUFFZSxFQUFFO1FBQUMyRSxNQUFLLENBQUMsRUFBRWhILEVBQUUyRyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQUNtRCxTQUFRO1FBQUV0QyxLQUFJdkc7SUFBQztJQUFHLE9BQU82SCxHQUFHOUksR0FBRXNCLEdBQUVqQixHQUFFSixHQUFFQyxJQUFHb0I7QUFBQyxHQUFFaUssS0FBRyxnSEFBK0c1QixLQUFHLENBQUMzSixHQUFFQyxHQUFFQyxHQUFFRyxHQUFFWTtJQUFLLE1BQU1LLElBQUV1SixFQUFFNUssSUFBR3VCLElBQUVpSyxHQUFHO1FBQUN0RyxPQUFNN0Q7UUFBRUQsSUFBRztRQUFJcUQsVUFBUztJQUFNO0lBQUcsVUFBUXhFLEtBQUlzQixDQUFBQSxFQUFFMEQsSUFBSSxDQUFDSSxRQUFRLEdBQUM7SUFBRyxNQUFNNUQsSUFBRTtRQUFDRjtRQUFFK0csR0FBR2xJO0tBQUc7SUFBQyxPQUFPOEIsRUFBRSxjQUFhYixHQUFFSSxHQUFFdUssRUFBRWpNLE1BQUk2SyxFQUFFN0ssS0FBSThJLEdBQUc5SSxHQUFFQyxHQUFFeUIsR0FBRXhCLEdBQUVlO0FBQUUsR0FBRWtMLEtBQUcsQ0FBQ2xNLEdBQUVJLEdBQUVZLEdBQUVLLEdBQUVJLEdBQUVFO0lBQUssTUFBTUcsSUFBRUYsRUFBRSxXQUFVUCxJQUFHWSxJQUFFakMsSUFBRUQsQ0FBQUEsSUFBRztlQUFJQTtTQUFFLEdBQUNBLENBQUFBLElBQUk7WUFBQyxHQUFHQSxDQUFDO1FBQUEsSUFBR3FDLElBQUVwQyxJQUFFLEVBQUUsR0FBQyxDQUFDLEdBQUVzQyxJQUFFTCxFQUFFRyxJQUFHTSxJQUFFa0gsR0FBR3RILElBQUd3SCxJQUFFRixHQUFHO0lBQUdsSCxFQUFFWCxJQUFJLEdBQUMvQixJQUFFLFNBQU8sU0FBUTBDLEVBQUVtSSxNQUFNLEdBQUMsR0FBRTNJLEVBQUUsZUFBY1EsR0FBRW9IO0lBQUcsTUFBTUUsSUFBRXhILEVBQUVGLEdBQUU7UUFBQ3lFLE1BQUt4RixFQUFFUDtRQUFHNkksU0FBUTtRQUFFLEdBQUdsSSxDQUFDO1FBQUM0RixLQUFJbEc7SUFBQyxJQUFHeUosSUFBRUYsRUFBRVo7SUFBR2MsRUFBRUQsTUFBTSxHQUFDLEdBQUUzQixFQUFFYyxHQUFFLGFBQVk7SUFBRyxNQUFNZSxJQUFFSSxHQUFHekk7SUFBR3FJLEVBQUV2RyxLQUFLLEdBQUM7UUFBQ0MsVUFBUztJQUFTO0lBQUUsTUFBTWdILElBQUVELEdBQUc7UUFBQ3RHLE9BQU00RjtRQUFFMUosSUFBRztRQUFJcUQsVUFBUztJQUFNO0lBQUdnSCxFQUFFeEcsSUFBSSxDQUFDSSxRQUFRLEdBQUM7SUFBRSxNQUFNcUcsSUFBRTtRQUFDakQsR0FBSSxDQUFDMUksR0FBRUMsR0FBRUMsSUFBS0EsQ0FBQUEsRUFBRXlCLEtBQUssSUFBRSxDQUFDekIsRUFBRXlCLEtBQUssQ0FBQzRDLEdBQUcsQ0FBQzVCLEVBQUVsQyxFQUFFLENBQUMsSUFBR1AsQ0FBQUEsRUFBRTBCLENBQUMsR0FBQyxJQUFHNUIsQ0FBQUE7UUFBS2dMO1FBQUVTLEdBQUc7WUFBQ3RHLE9BQU00RTtZQUFFMUksSUFBRztRQUFHO1FBQUdxSCxHQUFJLENBQUMxSSxHQUFFLEVBQUNnVyxLQUFJL1YsQ0FBQyxFQUFDLEVBQUNDO1lBQUssSUFBR0EsRUFBRTBCLENBQUMsSUFBRTVCLE1BQUlFLEVBQUVlLENBQUMsQ0FBQ2hCLEVBQUUsRUFBQyxPQUFPSSxLQUFHSCxFQUFFK0osQ0FBQyxJQUFHL0osQ0FBQUEsRUFBRWUsQ0FBQyxHQUFDaUIsRUFBRWhDLEVBQUVlLENBQUMsSUFBR2YsRUFBRWUsQ0FBQyxDQUFDaEIsRUFBRSxHQUFDRCxHQUFFO1FBQUMsR0FBRztRQUFHeUwsR0FBRztZQUFDdEssTUFBSztZQUFJSSxRQUFPb0I7UUFBQztRQUFHOEksR0FBRztZQUFDdEssTUFBSztZQUFRZ0UsT0FBTTtZQUFFNUQsUUFBT3dJO1FBQUM7UUFBRzBCLEdBQUc7WUFBQ3RLLE1BQUs7WUFBUWdFLE9BQU07WUFBRTVELFFBQU93STtZQUFFckYsVUFBUztZQUFVNEssT0FBTTtRQUFDO1FBQUdsRSxHQUFHekksR0FBRSxHQUFFO1FBQUdqQixLQUFHNkc7UUFBS21EO0tBQUU7SUFBQyxJQUFHMUwsRUFBRWlCLEdBQUcsQ0FBQ2pCLEdBQUVDO1FBQUssSUFBRyxDQUFDZ00sRUFBRWpNLElBQUcsT0FBT0UsRUFBRSxDQUFDcUcsRUFBRXZHLE1BQUksQ0FBQzJJLEdBQUczSSxJQUFHLENBQUMsbUNBQW1DLEVBQUVDLEVBQUUsQ0FBQyxFQUFDOEIsSUFBRyxLQUFLUSxDQUFBQSxDQUFDLENBQUN0QyxFQUFFLEdBQUNvQyxDQUFDLENBQUNwQyxFQUFFLEdBQUNELENBQUFBO1FBQUdxQyxDQUFDLENBQUNwQyxFQUFFLEdBQUNELEVBQUVxSyxZQUFZLEVBQUM5SCxDQUFDLENBQUN0QyxFQUFFLEdBQUNELEVBQUV1SyxRQUFRO1FBQUcsTUFBTWxLLElBQUV5SSxHQUFHOUksR0FBRWlLLEdBQUUwQixHQUFFLFdBQVVqSztRQUFHckIsRUFBRXNCLEtBQUssQ0FBQ3FVLEdBQUcsR0FBQy9WO1FBQUUsTUFBTWdCLElBQUU0SixFQUFFN0s7UUFBRzRLLEdBQUdqSSxHQUFFO1lBQUNYLE1BQUs7WUFBUXVPLE9BQU10UTtZQUFFa0IsTUFBS0Y7UUFBQyxJQUFHa0IsRUFBRSxnQkFBZWxCLEdBQUVaO0lBQUUsSUFBSTRKLEVBQUVnTSxZQUFZLEdBQUNoVixHQUFFMkosR0FBR0csR0FBRTtRQUFDL0ksTUFBSztRQUFNYixNQUFLd0I7UUFBRStDLElBQUdoRTtJQUFDLElBQUcsQ0FBQ2IsTUFBSyxJQUFHYSxHQUFFO1FBQUMsTUFBTTFCLElBQUUwQixFQUFFYTtRQUFHLENBQUNvRyxHQUFHM0ksTUFBSTRCLEtBQUcsY0FBYUEsS0FBR3lKLFFBQVFDLEtBQUssQ0FBQyxDQUFDLEVBQUV2SixFQUFFLEVBQUUsRUFBRXdKLEdBQUcsQ0FBQyxHQUFFUixFQUFFdEYsT0FBTyxHQUFDekYsR0FBRStLLEVBQUVzSixPQUFPLEdBQUNyVSxHQUFFaUssRUFBRUksWUFBWSxHQUFDcks7SUFBQyxPQUFNaUssRUFBRUksWUFBWSxHQUFDaEk7SUFBRSxPQUFPNEg7QUFBQyxHQUFFd0QsS0FBRyxDQUFDek4sR0FBRUMsR0FBRUM7SUFBSyxJQUFHO1FBQUMsT0FBTTtZQUFDO1lBQUVGLEtBQUtFO1NBQUc7SUFBQSxFQUFDLE9BQU1GLEdBQUU7UUFBQyxPQUFPQyxFQUFFRCxJQUFHO1lBQUM7WUFBRTtTQUFLO0lBQUE7QUFBQyxHQUFFd04sS0FBRyxDQUFDeE4sR0FBRUMsR0FBRUMsR0FBRUcsR0FBRVksSUFBSU8sQ0FBQUE7UUFBSUYsRUFBRTtZQUFDQyxRQUFPO2dCQUFDbEI7Z0JBQUU2VjthQUFHO1lBQUM3UyxRQUFPO2dCQUFDbkQsSUFBRTtvQkFBQzZNLFFBQU87b0JBQU8xSixRQUFPckQ7b0JBQUVnTixRQUFPeEw7Z0JBQUMsSUFBRTtvQkFBQ3VMLFFBQU87b0JBQU8xSixRQUFPckQ7b0JBQUVzTCxPQUFNOUo7Z0JBQUM7Z0JBQUU7b0JBQUNiLE9BQU1hO29CQUFFa0UsSUFBR3hGLElBQUVELEVBQUVxTSxFQUFFLEdBQUNyTSxFQUFFc00sRUFBRTtnQkFBQTthQUFFO1lBQUNqSixPQUFNO1lBQUVDLE1BQUt0QyxFQUFFc0MsSUFBSTtZQUFDNUIsT0FBTVYsRUFBRVUsS0FBSztZQUFDcEIsTUFBS1UsRUFBRVYsSUFBSTtRQUFBO0lBQUUsR0FBRTJWLEtBQUdqVixFQUFFO0lBQUNDLE1BQUs7UUFBQ2tULEdBQUc7WUFBQzFPLElBQUcsQ0FBQyxFQUFDQSxJQUFHMUYsQ0FBQyxFQUFDVyxPQUFNVixDQUFDLEVBQUMsR0FBR0QsRUFBRUM7UUFBRTtLQUFHO0lBQUNNLE1BQUs7UUFBQ29GLElBQUc7UUFBS2dJLElBQUc7SUFBVztBQUFDLElBQUd3QixLQUFHO0lBQUM7SUFBUztJQUFRO0NBQVMsRUFBQ0MsS0FBRyxDQUFDcFAsR0FBRUMsSUFBSUQsSUFBRSxDQUFDLEVBQUUsRUFBRUMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFDdVAsS0FBRyxDQUFDeFAsR0FBRUMsR0FBRUksR0FBRVksR0FBRUssR0FBRUUsR0FBRUUsR0FBRUUsR0FBRUcsR0FBRUcsR0FBRUssR0FBRXdIO0lBQUssTUFBTUUsSUFBRXBJLEVBQUU3QixHQUFFNEIsSUFBR21KLElBQUUsQ0FBQyxDQUFDeko7SUFBRXBCLEVBQUUsQ0FBQ3lJLEdBQUd0SSxNQUFJLENBQUNzSSxHQUFHMUksSUFBR21QLEdBQUduRixHQUFFO0lBQTJCLElBQUllLElBQUU7SUFBRXJDLEdBQUd0SSxLQUFHMkssSUFBRSxJQUFFekUsRUFBRWxHLE1BQUtBLENBQUFBLElBQUVzQyxFQUFFdEMsRUFBQyxHQUFHc0ksR0FBRzFJLEtBQUdBLElBQUVJLElBQUcrSSxDQUFBQSxHQUFHbkosR0FBRWdLLEdBQUUsVUFBU3ZHLE1BQU1DLE9BQU8sQ0FBQzFELE1BQUtBLENBQUFBLElBQUUyTCxFQUFFM0wsRUFBQyxDQUFDLEdBQUcrSyxLQUFJM0ssQ0FBQUEsSUFBRUosQ0FBQUEsR0FBRzJCLEtBQUdGLEtBQUlBLENBQUFBLElBQUVyQixFQUFFc0csU0FBUztJQUFFLElBQUkrRSxJQUFFO0lBQVFuSixDQUFBQSxLQUFHdEIsQ0FBQUEsS0FBS3NGLENBQUFBLEVBQUV0RixLQUFHeUssSUFBRSxTQUFReEwsQ0FBQUEsRUFBRW1KLEdBQUdwSSxJQUFHLHdDQUF1Q3lLLElBQUUsSUFBRyxDQUFDLEdBQUdwSyxJQUFHOEgsQ0FBQUEsR0FBRzlILEdBQUUySSxHQUFFLFdBQVU4RixHQUFHOUYsR0FBRTNJLEVBQUMsSUFBRyxXQUFTb0ssS0FBR3hKLEtBQUcrSixFQUFFNUwsTUFBSTRMLEVBQUVoTSxLQUFHcUIsSUFBRW1CLEVBQUVqQixJQUFFQSxFQUFFK0QsR0FBR3NGLEVBQUV4SyxLQUFJa0YsR0FBR3NGLEVBQUU1SyxPQUFLc0YsR0FBR3NGLEVBQUV4SyxLQUFJO1FBQUMyRyxNQUFLdEY7UUFBRW9LLEtBQUkvQjtRQUFFeEMsSUFBRzNGO0lBQUMsS0FBSU4sQ0FBQUEsSUFBRWUsRUFBRTtRQUFDMkUsTUFBS3RGO1FBQUVvSSxTQUFRO1FBQUV2QyxJQUFHM0Y7SUFBQyxJQUFHTyxFQUFFLGdCQUFlN0IsRUFBRWdCLEdBQUU7SUFBRyxNQUFNcUssSUFBRTlCO0lBQUssSUFBSWdDLElBQUUsRUFBRTtJQUFDLElBQUcsV0FBU0gsR0FBRTtRQUFDLE1BQUssQ0FBQ3hMLEdBQUVHLEdBQUVtQixFQUFFLEdBQUMyVSxHQUFHbFYsR0FBRUssR0FBRXJCLEdBQUUwTCxHQUFFM0w7UUFBR3dCLEtBQUdxSyxFQUFFZ0gsSUFBSSxJQUFJdUQsR0FBRy9WLEtBQUl3TCxFQUFFZ0gsSUFBSSxJQUFJdUQsR0FBR2xXO0lBQUc7SUFBQyxNQUFNNkwsSUFBRSxFQUFFO0lBQUMsSUFBR2YsR0FBRWpKLEtBQUdnSyxFQUFFOEcsSUFBSSxDQUFDekgsR0FBR08sR0FBRSxHQUFFO1NBQVE7UUFBQyxNQUFLLENBQUN6TCxHQUFFZSxHQUFFTyxFQUFFLEdBQUMyVSxHQUFHOVYsR0FBRWlCLEdBQUVyQixHQUFFMEwsR0FBRTNMO1FBQUd3QixLQUFHdUssRUFBRThHLElBQUksSUFBSXVELEdBQUduVixLQUFJOEssRUFBRThHLElBQUksQ0FBQ3pILEdBQUdsTCxHQUFFLEdBQUU2QjtJQUFHO0lBQUMsTUFBTTBOLElBQUUzRyxHQUFHN0ksR0FBRXFCLEdBQUU7UUFBQ2EsRUFBRTtRQUFzQnNKLEdBQUc7WUFBQ3RLLE1BQUs7WUFBUUksUUFBT29LO1FBQUM7V0FBTUk7V0FBS0Y7UUFBRVQsR0FBR087UUFBRyxTQUFPRCxLQUFHbkQsR0FBSSxDQUFDdkksR0FBRUMsR0FBRSxFQUFDZ0IsR0FBRWYsQ0FBQyxFQUFDLEdBQUdlLEVBQUVqQixHQUFFRSxJQUFJO1FBQUdzQixLQUFHK0csR0FBR2lEO1FBQUlySixFQUFFLHNCQUFxQjRJO0tBQUcsRUFBQy9LLEdBQUV3QjtJQUFHLE9BQU95QixHQUFHNUMsR0FBRTtRQUFDb1A7S0FBRSxHQUFFN0ksT0FBT0MsTUFBTSxDQUFDNEksRUFBRWxQLElBQUksRUFBQ3FCLEdBQUU7UUFBQ3lVLE9BQU07SUFBQyxJQUFHL1U7QUFBQyxHQUFFOFUsS0FBR3BXLENBQUFBLElBQUc7UUFBQ29MLEdBQUdwTDtRQUFHMEksR0FBSSxDQUFDMUksR0FBRUMsR0FBRSxFQUFDZ0IsR0FBRWYsQ0FBQyxFQUFDLEdBQUdBLEdBQUc7S0FBRyxFQUFDaVcsS0FBRyxDQUFDblcsR0FBRUMsR0FBRUMsR0FBRUcsR0FBRWlCO0lBQUssTUFBTUUsSUFBRXlLLEVBQUVqTSxJQUFHMEIsSUFBRUYsSUFBRXFKLEVBQUU3SyxLQUFHNkosTUFBS2pJLElBQUVpSSxHQUFHckk7SUFBRyxPQUFPQSxLQUFHUCxFQUFFO1FBQUNQLFFBQU9WO1FBQUVrQixNQUFLO1lBQUN1SyxHQUFHO2dCQUFDdEssTUFBSztnQkFBUUksUUFBT0c7WUFBQztZQUFHK0osR0FBRztnQkFBQ3RLLE1BQUs7Z0JBQVFnRSxPQUFNO2dCQUFFNUQsUUFBT0s7WUFBQztTQUFHO1FBQUNFLFFBQU87WUFBQ1UsUUFBTztnQkFBQ3hDO2dCQUFFQztnQkFBRUM7YUFBRTtZQUFDb0MsT0FBTXJDO1FBQUM7UUFBRU0sTUFBSztZQUFDb0YsSUFBR3JFO1FBQUM7UUFBRVcsVUFBUztJQUFDLElBQUdFLEVBQUUsZ0JBQWVQLEdBQUVGLEdBQUVyQixJQUFHO1FBQUNxQjtRQUFFRTtRQUFFSjtLQUFFO0FBQUEsR0FBRTZPLEtBQUcsQ0FBQ3JRLEdBQUVDLEdBQUVDLEdBQUVHO0lBQUssTUFBTVksSUFBRWpCLENBQUMsQ0FBQ0MsRUFBRTtJQUFDZ0IsS0FBR0ssRUFBRTtRQUFDQyxRQUFPTjtRQUFFb0MsUUFBT0ssTUFBTUMsT0FBTyxDQUFDMUMsS0FBR0EsRUFBRW9ILEdBQUcsQ0FBRSxJQUFJbkksS0FBSUE7UUFBRW9ELE9BQU07UUFBRUUsT0FBTW5EO0lBQUM7QUFBRSxHQUFFaVcsS0FBRyxVQUFTbEYsS0FBR3BSLENBQUFBLElBQUcsQ0FBQ0EsRUFBRWtCLElBQUksQ0FBQ1gsSUFBSSxDQUFDZ1csU0FBUyxJQUFFdlcsRUFBRVUsTUFBTSxJQUFFLGNBQVlWLEVBQUVVLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDWCxJQUFJLENBQUNvRixFQUFFLEVBQUN3TSxLQUFHblMsQ0FBQUEsSUFBR0E7QUFBdWQsQ0FDOXkzQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvZWZmZWN0b3IvZWZmZWN0b3IubWpzPzEzNjgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZShlLHQpe2Zvcihjb25zdCByIGluIGUpdChlW3JdLHIpfWZ1bmN0aW9uIHQoZSx0KXtlLmZvckVhY2godCl9ZnVuY3Rpb24gcihlLHQscil7aWYoIWUpdGhyb3cgRXJyb3IoYCR7cj9yKyc6ICc6Jyd9JHt0fWApfWZ1bmN0aW9uIG4oZSx0KXtjb25zdCByPUUoZSkubWV0YXx8e307Z2U9e2lkOkUoZSkuaWQscGFyZW50OmdlLHZhbHVlOmUsdGVtcGxhdGU6ci50ZW1wbGF0ZXx8YmUoKSxzaWRSb290OnIuc2lkUm9vdHx8Z2UmJmdlLnNpZFJvb3QsbWV0YTpyfTt0cnl7cmV0dXJuIHQoKX1maW5hbGx5e3llKCdyZWdpb24nKSxnZT1IKGdlKX19ZnVuY3Rpb24gYSh7bm9kZTplPVtdLGZyb206cixzb3VyY2U6bixwYXJlbnQ6YT1yfHxuLHRvOm8sdGFyZ2V0OnMsY2hpbGQ6aT1vfHxzLHNjb3BlOmM9e30sbWV0YTpsPXt9LGZhbWlseTpkPXt0eXBlOidyZWd1bGFyJ30scmVnaW9uYWw6dX09e30pe2NvbnN0IGY9U2UoYSkscD1TZShkLmxpbmtzKSxtPVNlKGQub3duZXJzKSxoPVtdO3QoZSwoZT0+ZSYmaWUoaCxlKSkpO2NvbnN0IGc9e2lkOmZlKCksc2VxOmgsbmV4dDpTZShpKSxtZXRhOmwsc2NvcGU6YyxmYW1pbHk6e3R5cGU6ZC50eXBlfHxcImNyb3NzbGlua1wiLGxpbmtzOnAsb3duZXJzOm19fTtyZXR1cm4gdChwLChlPT5pZShWKGUpLGcpKSksdChtLChlPT5pZShUKGUpLGcpKSksdChmLChlPT5pZShlLm5leHQsZykpKSx1JiZnZSYmd2UoQihnZSksW2ddKSxnfWZ1bmN0aW9uIG8oZSxyLG4pe2xldCBhLG89YXQscz1udWxsLGk9ZXQ7aWYoZS50YXJnZXQmJihyPWUucGFyYW1zLG49ZS5kZWZlcixhPWUubWV0YSxvPSdwYWdlJ2luIGU/ZS5wYWdlOm8sZS5zdGFjayYmKHM9ZS5zdGFjayksaT1VKGUpfHxpLGU9ZS50YXJnZXQpLGkmJmV0JiZpIT09ZXQmJihldD1udWxsKSxBcnJheS5pc0FycmF5KGUpKWZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKVFlKCdwdXJlJyxvLEUoZVt0XSkscyxyW3RdLGksYSk7ZWxzZSBRZSgncHVyZScsbyxFKGUpLHMscixpLGEpO2lmKG4mJiF0dClyZXR1cm47Y29uc3QgYz17aXNSb290OnR0LGN1cnJlbnRQYWdlOmF0LHNjb3BlOmV0LGlzV2F0Y2g6cnQsaXNQdXJlOm50fTtsZXQgbCxkLHUsZixwLG07dHQ9MDtlOmZvcig7Zj1LZSgpOyl7Y29uc3R7aWR4OmUsc3RhY2s6cix0eXBlOm59PWY7dT1yLm5vZGUsYXQ9cD1yLnBhZ2UsZXQ9VShyKSxwP209cC5yZWc6ZXQmJihtPWV0LnJlZyk7Y29uc3QgYT0hIXAsbz0hIWV0LHM9e2ZhaWw6MCxzY29wZTp1LnNjb3BlfTtsPWQ9MDtmb3IobGV0IHQ9ZTt0PHUuc2VxLmxlbmd0aCYmIWw7dCsrKXtjb25zdCBpPXUuc2VxW3RdO2lmKGkub3JkZXIpe2NvbnN0e3ByaW9yaXR5OmEsYmFycmllcklEOm99PWkub3JkZXIscz1vP3A/YCR7cC5mdWxsSUR9XyR7b31gOm86MDtpZih0IT09ZXx8biE9PWEpe28/WmUuaGFzKHMpfHwoWmUuYWRkKHMpLFhlKHQscixhLG8pKTpYZSh0LHIsYSwwKTtjb250aW51ZSBlfW8mJlplLmRlbGV0ZShzKX1zd2l0Y2goaS50eXBlKXtjYXNlJ21vdic6e2NvbnN0IGU9aS5kYXRhO2xldCB0O3N3aXRjaChlLmZyb20pe2Nhc2Unc3RhY2snOnQ9QihyKTticmVhaztjYXNlJ2EnOmNhc2UnYic6dD1yW2UuZnJvbV07YnJlYWs7Y2FzZSd2YWx1ZSc6dD1lLnN0b3JlO2JyZWFrO2Nhc2Unc3RvcmUnOmlmKG0mJiFtW2Uuc3RvcmUuaWRdKWlmKGEpe2NvbnN0IHQ9Y3QocCxlLnN0b3JlLmlkKTtyLnBhZ2U9cD10LHQ/bT10LnJlZzpvPyhwdChldCxlLnN0b3JlLDAsMSxlLnNvZnRSZWFkKSxtPWV0LnJlZyk6bT12b2lkIDB9ZWxzZSBvJiZwdChldCxlLnN0b3JlLDAsMSxlLnNvZnRSZWFkKTt0PUJlKG0mJm1bZS5zdG9yZS5pZF18fGUuc3RvcmUpfXN3aXRjaChlLnRvKXtjYXNlJ3N0YWNrJzpyLnZhbHVlPXQ7YnJlYWs7Y2FzZSdhJzpjYXNlJ2InOnJbZS50b109dDticmVhaztjYXNlJ3N0b3JlJzpsdChwLGV0LGUudGFyZ2V0LDApLmN1cnJlbnQ9dH1icmVha31jYXNlJ2NvbXB1dGUnOmNvbnN0IGU9aS5kYXRhO2lmKGUuZm4pe3J0PSd3YXRjaCc9PT11Lm1ldGEub3AsbnQ9ZS5wdXJlO2NvbnN0IHQ9ZS5zYWZlPygwLGUuZm4pKEIocikscy5zY29wZSxyKTptdChzLGUuZm4scik7ZS5maWx0ZXI/ZD0hdDpyLnZhbHVlPXQscnQ9Yy5pc1dhdGNoLG50PWMuaXNQdXJlfX1sPXMuZmFpbHx8ZH1pZihkdCYmZHQocixzKSwhbCl7Y29uc3QgZT1CKHIpLG49VShyKTtpZih0KHUubmV4dCwodD0+e1FlKCdjaGlsZCcscCx0LHIsZSxuKX0pKSxuKXt1Lm1ldGEubmVlZEZ4Q291bnRlciYmUWUoJ2NoaWxkJyxwLG4uZnhDb3VudCxyLGUsbiksdS5tZXRhLnN0b3JlQ2hhbmdlJiZRZSgnY2hpbGQnLHAsbi5zdG9yZUNoYW5nZSxyLGUsbiksdS5tZXRhLndhcm5TZXJpYWxpemUmJlFlKCdjaGlsZCcscCxuLndhcm5TZXJpYWxpemVOb2RlLHIsZSxuKTtjb25zdCBhPW4uYWRkaXRpb25hbExpbmtzW3UuaWRdO2EmJnQoYSwodD0+e1FlKCdjaGlsZCcscCx0LHIsZSxuKX0pKX19fXR0PWMuaXNSb290LGF0PWMuY3VycmVudFBhZ2UsZXQ9VShjKX1mdW5jdGlvbiBzKHQscj1cImNvbWJpbmVcIil7bGV0IG49cisnKCcsYT0nJyxvPTA7cmV0dXJuIGUodCwoZT0+e288MjUmJihudWxsIT1lJiYobis9YSxuKz1RKGUpP0soZSkuZnVsbE5hbWU6ZS50b1N0cmluZygpKSxvKz0xLGE9JywgJyl9KSksbisnKSd9ZnVuY3Rpb24gaShlLHQpe2Uuc2hvcnROYW1lPXQsT2JqZWN0LmFzc2lnbihLKGUpLGModCxIKGUpKSl9ZnVuY3Rpb24gYyhlLHQpe2xldCByLG47Y29uc3QgYT1lO2lmKHQpe2NvbnN0IGE9Syh0KTswPT09ZS5sZW5ndGg/KHI9YS5wYXRoLG49YS5mdWxsTmFtZSk6KHI9YS5wYXRoLmNvbmNhdChbZV0pLG49MD09PWEuZnVsbE5hbWUubGVuZ3RoP2U6YS5mdWxsTmFtZSsnLycrZSl9ZWxzZSByPTA9PT1lLmxlbmd0aD9bXTpbZV0sbj1lO3JldHVybntzaG9ydE5hbWU6YSxmdWxsTmFtZTpuLHBhdGg6cn19ZnVuY3Rpb24gbChlLHQpe2lmKCF0KXJldHVybiBlO2lmKCF0Lm5hbWUmJiF0Lm5hbWVkJiYhdC5sb2MpcmV0dXJuIGU7bGV0IHI9YFske2V9XWA7Y29uc3Qgbj10Lm5hbWVkfHx0Lm5hbWU7biYmKHIrPWAgdW5pdCAnJHtufSdgKTtjb25zdCBhPXQubG9jO3JldHVybiFuJiZhJiYocis9YCAoJHthLmZpbGV9OiR7YS5saW5lfToke2EuY29sdW1ufSlgKSxyfWZ1bmN0aW9uIGQoZSx0KXtjb25zdCByPXQ/ZTplWzBdO3plKHIpO2xldCBuPXIub3I7Y29uc3QgYT1yLmFuZDtpZihhKXtjb25zdCByPXQ/YTphWzBdO2lmKCRlKHIpJiYnYW5kJ2luIHIpe2NvbnN0IHI9ZChhLHQpO2U9clswXSxuPXsuLi5uLC4uLnJbMV19fWVsc2UgZT1hfXJldHVybltlLG5dfWZ1bmN0aW9uIHUoZSl7Y29uc3QgdD0oKT0+ZSgpO3JldHVybiB0LnVuc3Vic2NyaWJlPSgpPT5lKCksdH1mdW5jdGlvbiBmKGUsLi4udCl7Y29uc3Qgcj1iZSgpO2lmKHIpe2NvbnN0IG49ci5oYW5kbGVyc1tlXTtpZihuKXJldHVybiBuKHIsLi4udCl9fWZ1bmN0aW9uIHAoZSx0KXtjb25zdCBuPWh0KHtvcjp0LGFuZDonc3RyaW5nJz09dHlwZW9mIGU/e25hbWU6ZX06ZX0pLHM9bCgnZXZlbnQnLG4pLGk9KGUsLi4udCk9PihyKCFHKGksJ2Rlcml2ZWQnKSwnY2FsbCBvZiBkZXJpdmVkIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSBjcmVhdGVFdmVudCBpbnN0ZWFkJyxzKSxyKCFudCwndW5pdCBjYWxsIGZyb20gcHVyZSBmdW5jdGlvbiBpcyBub3Qgc3VwcG9ydGVkLCB1c2Ugb3BlcmF0b3JzIGxpa2Ugc2FtcGxlIGluc3RlYWQnLHMpLGF0PygoZSx0LHIsbik9Pntjb25zdCBhPWF0O2xldCBvPW51bGw7aWYodClmb3Iobz1hdDtvJiZvLnRlbXBsYXRlIT09dDspbz1IKG8pO3N0KG8pO2NvbnN0IHM9ZS5jcmVhdGUocixuKTtyZXR1cm4gc3QoYSksc30pKGksYyxlLHQpOmkuY3JlYXRlKGUsdCkpLGM9YmUoKSxkPU9iamVjdC5hc3NpZ24oaSx7Z3JhcGhpdGU6YSh7bWV0YTp4dChuLmFjdHVhbE9wfHxcImV2ZW50XCIsaSxuKSxyZWdpb25hbDoxfSksY3JlYXRlOmU9PihvKHt0YXJnZXQ6aSxwYXJhbXM6ZSxzY29wZTpldH0pLGUpLHdhdGNoOmU9PiR0KGksZSksbWFwOmU9Pnp0KGksXCJtYXBcIixlLFtWZSgpXSksZmlsdGVyOmU9Pnp0KGksJ2ZpbHRlcicsZS5mbj9lOmUuZm4sW1ZlKE9lLDEpXSksZmlsdGVyTWFwOmU9Pnp0KGksJ2ZpbHRlck1hcCcsZSxbVmUoKSxfZSgoZT0+IXhlKGUpKSwxKV0pLHByZXBlbmQoZSl7cihpLnRhcmdldGFibGUsJy5wcmVwZW5kIG9mIGRlcml2ZWQgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCwgY2FsbCBzb3VyY2UgZXZlbnQgaW5zdGVhZCcscyk7Y29uc3QgdD1wKCcqIFxcdTIxOTIgJytpLnNob3J0TmFtZSx7cGFyZW50OkgoaSl9KTtyZXR1cm4gZignZXZlbnRQcmVwZW5kJyxFKHQpKSx3dCh0LGksW1ZlKCldLCdwcmVwZW5kJyxlKSxNdChpLHQpLHR9fSk7cmV0dXJuIG51bGwhPW4mJm4uZG9tYWluJiZuLmRvbWFpbi5ob29rcy5ldmVudChkKSxKKGQsJ2lkJyxkLmdyYXBoaXRlLmlkKSx5ZShkLmdyYXBoaXRlKSxkfWZ1bmN0aW9uIG0oZSxuLGEsbyxzKXtyZXR1cm4gamUoYSxgJHtzfSAke259YCwnZmlyc3QgYXJndW1lbnQnKSxyKE1lKG8pLCdzZWNvbmQgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24nLHMpLGNlKCFHKGUsJ2Rlcml2ZWQnKSxgJHtufSBpbiBkZXJpdmVkIHN0b3JlYCxgJHtufSBpbiBzdG9yZSBjcmVhdGVkIHZpYSBjcmVhdGVTdG9yZWAscyksdChBcnJheS5pc0FycmF5KGEpP2E6W2FdLCh0PT57ZS5vZmYodCksVyhlKS5zZXQodCxrdChqdCh0LGUsJ29uJyxJZSxvKSkpfSkpLGV9ZnVuY3Rpb24gaChlLG4pe2NvbnN0IHM9aHQobiksaT1MZShlKSxjPWwoJ3N0b3JlJyxzKSxkPXAoe25hbWVkOid1cGRhdGVzJyxkZXJpdmVkOjF9KTtmKCdzdG9yZUJhc2UnLGkpO2NvbnN0IHU9aS5pZCxnPSdza2lwVm9pZCdpbiBzLHk9ZyYmIXMuc2tpcFZvaWQ7Y2UoIShnJiZzLnNraXBWb2lkKSwne3NraXBWb2lkOiB0cnVlfScsJ3VwZGF0ZUZpbHRlcicsYyk7Y29uc3QgYj17c3Vic2NyaWJlcnM6bmV3IE1hcCx1cGRhdGVzOmQsZGVmYXVsdFN0YXRlOmUsc3RhdGVSZWY6aSxnZXRTdGF0ZSgpe2xldCBlLHQ9aTtpZihhdCl7bGV0IHQ9YXQ7Zm9yKDt0JiYhdC5yZWdbdV07KXQ9SCh0KTt0JiYoZT10KX1yZXR1cm4hZSYmZXQmJihwdChldCxpLDEpLGU9ZXQpLGUmJih0PWUucmVnW3VdKSxCZSh0KX0sc2V0U3RhdGU6ZT0+byh7dGFyZ2V0OmIscGFyYW1zOmUsZGVmZXI6MSxzY29wZTpldH0pLHJlc2V0OiguLi5lKT0+KHIoYi50YXJnZXRhYmxlLCcucmVzZXQgb2YgZGVyaXZlZCBzdG9yZSBpcyBub3Qgc3VwcG9ydGVkJyxjKSx0KGUsKGU9Pm0oYiwnLnJlc2V0JyxlLCgoKT0+Yi5kZWZhdWx0U3RhdGUpLGMpKSksYiksb246KGUsdCk9PihyKGIudGFyZ2V0YWJsZSwnLm9uIG9mIGRlcml2ZWQgc3RvcmUgaXMgbm90IHN1cHBvcnRlZCcsYyksbShiLCcub24nLGUsdCxjKSksb2ZmKGUpe2NvbnN0IHQ9VyhiKS5nZXQoZSk7cmV0dXJuIHQmJih0KCksVyhiKS5kZWxldGUoZSkpLGJ9LG1hcChlLHQpe2xldCByLG47JGUoZSkmJihyPWUsZT1lLmZuKTtjb25zdCBhPWIuZ2V0U3RhdGUoKSxvPXhlKGEpO2JlKCk/bj1udWxsOighb3x8byYmeSkmJihuPWUoYSkpO2NvbnN0IHM9aChuLHtuYW1lOmAke2Iuc2hvcnROYW1lfSBcXHUyMTkyICpgLGRlcml2ZWQ6MSwuLi50LGFuZDpyfSksYz1qdChiLHMsXCJtYXBcIixPZSxlKTtyZXR1cm4gV2UoTChzKSx7dHlwZTpcIm1hcFwiLGZuOmUsZnJvbTppfSksTChzKS5ub0luaXQ9MSxmKCdzdG9yZU1hcCcsaSxjKSxzfSx3YXRjaChlLHQpe2lmKGNlKCF0LCd3YXRjaCBzZWNvbmQgYXJndW1lbnQnLCdzYW1wbGUnLGMpLCF0fHwhUShlKSl7Y29uc3QgdD0kdChiLGUpO3JldHVybiBmKCdzdG9yZVdhdGNoJyxpLGUpfHxlKGIuZ2V0U3RhdGUoKSksdH1yZXR1cm4gcihNZSh0KSwnc2Vjb25kIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uJyxjKSxlLndhdGNoKChlPT50KGIuZ2V0U3RhdGUoKSxlKSkpfX0sdj14dChcInN0b3JlXCIsYixzKSxrPWIuZGVmYXVsdENvbmZpZy51cGRhdGVGaWx0ZXI7Yi5ncmFwaGl0ZT1hKHtzY29wZTp7c3RhdGU6aSxmbjprfSxub2RlOltfZSgoKGUsdCxyKT0+KHIuc2NvcGUmJiFyLnNjb3BlLnJlZ1tpLmlkXSYmKHIuYj0xKSxlKSkpLEVlKGkpLF9lKCgoZSx0LHthOnIsYjpufSk9Pntjb25zdCBhPXhlKGUpO3JldHVybiBhJiYhZyYmY29uc29sZS5lcnJvcihgJHtjfTogJHtBdH1gKSwoYSYmeXx8IWEpJiYoZSE9PXJ8fG4pfSksMSksayYmVmUoTmUsMSkscWUoe2Zyb206XCJzdGFja1wiLHRhcmdldDppfSldLGNoaWxkOmQsbWV0YTp7Li4udixkZWZhdWx0U3RhdGU6ZX0scmVnaW9uYWw6MX0pLEooYiwnaWQnLGIuZ3JhcGhpdGUuaWQpLEooYiwncm9vdFN0YXRlUmVmSWQnLHUpO2NvbnN0IHc9RyhiLCdzZXJpYWxpemUnKSxTPUcoYiwnZGVyaXZlZCcpLCQ9J2lnbm9yZSc9PT13LE09RyhiLCdzaWQnKTtNJiYoSihiLCdzdG9yZUNoYW5nZScsMSksaS5zaWQ9TSksTXx8JHx8U3x8SihiLCd3YXJuU2VyaWFsaXplJywxKTtjb25zdCB4PXhlKGUpO3JldHVybiByKFN8fCF4fHx4JiZ5LEF0LGMpLFMmJngmJiFnJiZjb25zb2xlLmVycm9yKGAke2N9OiAke0F0fWApLHdlKGIsW2RdKSxudWxsIT1zJiZzLmRvbWFpbiYmcy5kb21haW4uaG9va3Muc3RvcmUoYiksU3x8KGIucmVpbml0PXAoe25hbWVkOidyZWluaXQnfSksYi5yZXNldChiLnJlaW5pdCkpLGkubWV0YT1iLmdyYXBoaXRlLm1ldGEseWUoYi5ncmFwaGl0ZSksYn1mdW5jdGlvbiBnKC4uLmUpe2xldCB0LG4sYTtbZSxhXT1kKGUpO2NvbnN0IG89bCgnY29tYmluZScsYSkscz1lW2UubGVuZ3RoLTFdLGk9IVkocykmJiRlKHMpLGM9aSYmcyx1PWk/ZVtlLmxlbmd0aC0yXTpzO2xldCBmLHAsbTtpZihNZSh1KT8obj1lLnNsaWNlKDAsaT8tMjotMSksdD11KTpuPWUsMT09PW4ubGVuZ3RoKXtjb25zdCBlPW5bMF07WShlKXx8KGY9ZSxwPTEpfWlmKCFwJiYoZj1uLHQpKXttPTE7Y29uc3QgZT10O3Q9dD0+ZSguLi50KX1yZXR1cm4gcigkZShmKSxgJHtvfTogc2hhcGUgc2hvdWxkIGJlIGFuIG9iamVjdGApLEN0KEFycmF5LmlzQXJyYXkoZiksIW0sZixhLHQsYyl9ZnVuY3Rpb24geSgpe2NvbnN0IGU9e307cmV0dXJuIGUucmVxPW5ldyBQcm9taXNlKCgodCxyKT0+e2UucnM9dCxlLnJqPXJ9KSksZS5yZXEuY2F0Y2goKCgpPT57fSkpLGV9ZnVuY3Rpb24gYihlLHQ9e30pe2NvbnN0IG49aHQoTWUoZSk/e2hhbmRsZXI6ZX06ZSx0KSxzPWwoJ2VmZmVjdCcsbiksaT1wKE1lKGUpP3toYW5kbGVyOmV9OmUsey4uLnQsYWN0dWFsT3A6XCJlZmZlY3RcIn0pLGM9RShpKTtKKGMsJ29wJyxpLmtpbmQ9XCJlZmZlY3RcIiksaS51c2U9ZT0+KHIoTWUoZSksJy51c2UgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24nLHMpLGIuc2NvcGUuaGFuZGxlcj1lLGkpLGkudXNlLmdldEN1cnJlbnQ9KCk9PmIuc2NvcGUuaGFuZGxlcjtjb25zdCBkPWkuZmluYWxseT1wKHtuYW1lZDonZmluYWxseScsZGVyaXZlZDoxfSksdT1pLmRvbmU9ZC5maWx0ZXJNYXAoe25hbWVkOidkb25lJyxmbih7c3RhdHVzOmUscGFyYW1zOnQscmVzdWx0OnJ9KXtpZignZG9uZSc9PT1lKXJldHVybntwYXJhbXM6dCxyZXN1bHQ6cn19fSksZj1pLmZhaWw9ZC5maWx0ZXJNYXAoe25hbWVkOidmYWlsJyxmbih7c3RhdHVzOmUscGFyYW1zOnQsZXJyb3I6cn0pe2lmKCdmYWlsJz09PWUpcmV0dXJue3BhcmFtczp0LGVycm9yOnJ9fX0pLG09aS5kb25lRGF0YT11Lm1hcCh7bmFtZWQ6J2RvbmVEYXRhJyxmbjooe3Jlc3VsdDplfSk9PmV9KSxnPWkuZmFpbERhdGE9Zi5tYXAoe25hbWVkOidmYWlsRGF0YScsZm46KHtlcnJvcjplfSk9PmV9KSxiPWEoe3Njb3BlOntoYW5kbGVyOmkuZGVmYXVsdENvbmZpZy5oYW5kbGVyfHwoKCk9PnIoMCxgbm8gaGFuZGxlciB1c2VkIGluICR7aS5jb21wb3NpdGVOYW1lLmZ1bGxOYW1lfWApKX0sbm9kZTpbX2UoKChlLHQscik9PntsZXQgbj10LmhhbmRsZXI7Y29uc3QgYT1VKHIpO2lmKGEpe2NvbnN0IGU9YS5oYW5kbGVycy51bml0TWFwLmdldChpKXx8YS5oYW5kbGVycy5zaWRNYXBbaS5zaWRdO2UmJihuPWUpfXJldHVybiBlLmhhbmRsZXI9bixlfSksMCwxKSxfZSgoKGUsdCxyKT0+e2lmKHQucnVubmVyRm4mJiF0LnJ1bm5lckZuKGUsbnVsbCxyKSlyZXR1cm47Y29uc3R7cGFyYW1zOm4scmVxOmEsaGFuZGxlcjpvLGFyZ3M6cz1bbl19PWUsaT1JdChuLGEsMSxkLHIpLGM9SXQobixhLDAsZCxyKSxbbCx1XT1OdChvLGMscyk7bCYmKCRlKHUpJiZNZSh1LnRoZW4pP3UudGhlbihpLGMpOmkodSkpfSksMCwxKV0sbWV0YTp7b3A6J2Z4JyxmeDoncnVubmVyJ319KTtjLnNjb3BlLnJ1bm5lcj1iLGllKGMuc2VxLF9lKCgoZSx7cnVubmVyOnR9LHIpPT57Y29uc3Qgbj1IKHIpP3twYXJhbXM6ZSxyZXE6e3JzKGUpe30scmooZSl7fX19OmU7cmV0dXJuIHIubWV0YXx8KHIubWV0YT17ZnhJRDpwZSgpfSksbyh7dGFyZ2V0OnQscGFyYW1zOm4sZGVmZXI6MSxzY29wZTpVKHIpLG1ldGE6ci5tZXRhfSksbi5wYXJhbXN9KSkpLGkuY3JlYXRlPWU9Pntjb25zdCB0PXkoKSxyPXtwYXJhbXM6ZSxyZXE6dH07aWYoZXQmJiFydCl7Y29uc3QgZT1ldDt0LnJlcS5maW5hbGx5KCgoKT0+e290KGUpfSkpLmNhdGNoKCgoKT0+e30pKX1yZXR1cm4gbyh7dGFyZ2V0OmkscGFyYW1zOnIsc2NvcGU6ZXR9KSx0LnJlcX07Y29uc3Qgdj1pLmluRmxpZ2h0PWgoMCx7c2VyaWFsaXplOidpZ25vcmUnLG5hbWVkOihHKGksJ25hbWUnKXx8aS5ncmFwaGl0ZS5pZCkrJy5pbkZsaWdodCd9KS5vbihpLChlPT5lKzEpKS5vbihkLChlPT5lLTEpKS5tYXAoe2ZuOmU9PmUsbmFtZWQ6J2luRmxpZ2h0J30pO0ooZCwnbmVlZEZ4Q291bnRlcicsJ2RlYycpLEooaSwnbmVlZEZ4Q291bnRlcicsMSk7Y29uc3Qgaz1pLnBlbmRpbmc9di5tYXAoe2ZuOmU9PmU+MCxuYW1lZDoncGVuZGluZyd9KTtyZXR1cm4gd2UoaSxbZCx1LGYsbSxnLGssdl0pLG51bGwhPW4mJm4uZG9tYWluJiZuLmRvbWFpbi5ob29rcy5lZmZlY3QoaSksaX1mdW5jdGlvbiB2KGUpe2xldCB0O1tlLHRdPWQoZSwxKTtjb25zdCBuPWwoJ2F0dGFjaCcsdCk7bGV0e3NvdXJjZTphLGVmZmVjdDpzLG1hcFBhcmFtczppLGRvbWFpbjp1fT1lO2VlKHMpJiZyKHhlKHUpLCdgZG9tYWluYCBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBwbGFpbiBmdW5jdGlvbicsbik7Y29uc3QgZj1iKGUsdCk7SihmLCdhdHRhY2hlZCcsMSk7Y29uc3R7cnVubmVyOnB9PUUoZikuc2NvcGU7bGV0IG07Y29uc3QgaD0oZSx0LHIpPT57Y29uc3R7cGFyYW1zOm4scmVxOnMsaGFuZGxlcjpjfT1lLGw9Zi5maW5hbGx5LGQ9SXQobixzLDAsbCxyKSx1PXIuYSxwPWVlKGMpO2xldCBtLGg9MTtpZihpP1toLG1dPU50KGksZCxbbix1XSk6bT1hJiZwP3U6bixoKXtpZighcClyZXR1cm4gZS5hcmdzPVt1LG1dLDE7byh7dGFyZ2V0OmMscGFyYW1zOntwYXJhbXM6bSxyZXE6e3JzOkl0KG4scywxLGwscikscmo6ZH19LHBhZ2U6ci5wYWdlLGRlZmVyOjEsbWV0YTpyLm1ldGF9KX19O2lmKGEpe2xldCBlO3Auc2NvcGUucnVubmVyRm49aCxZKGEpPyhlPWEsd2UoZSxbZl0pKTooZT1nKGEpLHdlKGYsW2VdKSksbT1bX2UoKGU9PmUpLDAsMSksRWUoTChlKSldLGRlbGV0ZSBwLnNlcVsxXS5vcmRlcn1lbHNlIG09W19lKGgsMSwxKV07cC5zZXEuc3BsaWNlKDEsMCwuLi5tKSxmLnVzZShzKTtjb25zdCB5PUgocyk7cmV0dXJuIHkmJihPYmplY3QuYXNzaWduKEsoZiksYyhmLnNob3J0TmFtZSx5KSksZi5kZWZhdWx0Q29uZmlnLnBhcmVudD15KSxNdChzLGYsXCJlZmZlY3RcIiksZn1mdW5jdGlvbiBrKC4uLnQpe2xldFtbcixuXSxhXT1kKHQpO2NvbnN0IG89e307cmV0dXJuIGUobiwoKGUsdCk9Pntjb25zdCBuPW9bdF09cCh0LHtwYXJlbnQ6SChyKSxjb25maWc6YX0pO3Iub24obixlKSxNdChyLG4pfSkpLG99ZnVuY3Rpb24gdyhyLG4pe2NvbnN0IHM9aHQoe29yOm4sYW5kOidzdHJpbmcnPT10eXBlb2Ygcj97bmFtZTpyfTpyfSksaT1hKHtmYW1pbHk6e3R5cGU6XCJkb21haW5cIn0scmVnaW9uYWw6MSxwYXJlbnQ6KG51bGw9PXM/dm9pZCAwOnMuZG9tYWluKXx8KG51bGw9PXM/dm9pZCAwOnMucGFyZW50KX0pLGM9e2hpc3Rvcnk6e30sZ3JhcGhpdGU6aSxob29rczp7fX07aS5tZXRhPXh0KFwiZG9tYWluXCIsYyx7cGFyZW50OihudWxsPT1zP3ZvaWQgMDpzLmRvbWFpbil8fChudWxsPT1zP3ZvaWQgMDpzLnBhcmVudCksb3I6ey4uLnMsZGVyaXZlZDoxfX0pLGUoe0V2ZW50OnAsRWZmZWN0OmIsU3RvcmU6aCxEb21haW46d30sKChlLHIpPT57Y29uc3Qgbj1yLnRvTG93ZXJDYXNlKCksYT1wKHtuYW1lZDpgb24ke3J9YH0pO2MuaG9va3Nbbl09YTtjb25zdCBzPW5ldyBTZXQ7Yy5oaXN0b3J5W2Ake259c2BdPXMsYS5jcmVhdGU9ZT0+KG8oYSxlKSxlKSxpZShFKGEpLnNlcSxfZSgoKGUsdCxyKT0+KHIuc2NvcGU9bnVsbCxlKSkpKSxhLndhdGNoKChlPT57d2UoYyxbZV0pLHMuYWRkKGUpLGUub3duZXJTZXR8fChlLm93bmVyU2V0PXMpLEgoZSl8fChlLnBhcmVudD1jKX0pKSx3ZShjLFthXSksY1tgb25DcmVhdGUke3J9YF09ZT0+KHQocyxlKSxhLndhdGNoKGUpKSxjW2BjcmVhdGUke3J9YF09Y1tuXT0odCxyKT0+e2NvbnN0IG49aHQoe2FuZDpyLG9yOnR9KTtyZXR1cm4gbnVsbCE9biYmbi5kb21haW4/ZSh0LHIpOmEoZSh0LHtwYXJlbnQ6YyxvcjpufSkpfX0pKTtjb25zdCBsPUgoYyk7cmV0dXJuIGwmJmUoYy5ob29rcywoKGUsdCk9Pnd0KGUsbC5ob29rc1t0XSkpKSxudWxsIT1zJiZzLmRvbWFpbiYmcy5kb21haW4uaG9va3MuZG9tYWluKGMpLGN9ZnVuY3Rpb24gUyhlKXt6ZShlKTtjb25zdCB0PV8gaW4gZT9lW19dKCk6ZTtyKHQuc3Vic2NyaWJlLCdleHBlY3Qgb2JzZXJ2YWJsZSB0byBoYXZlIC5zdWJzY3JpYmUnKTtjb25zdCBuPXAoKSxhPWt0KG4pO3JldHVybiB0LnN1YnNjcmliZSh7bmV4dDpuLGVycm9yOmEsY29tcGxldGU6YX0pLG59ZnVuY3Rpb24gJChlLHQpe2NvbnN0IHI9bCgnbWVyZ2UnLHQpO2plKGUsciwnZmlyc3QgYXJndW1lbnQnKTtjb25zdCBuPXAoe25hbWU6cyhlLCdtZXJnZScpLGRlcml2ZWQ6MSxhbmQ6dH0pO3JldHVybiB3dChlLG4sW10sJ21lcmdlJyksbn1mdW5jdGlvbiBNKGUsbil7bGV0IGE9MDtyZXR1cm4gdChSdCwodD0+e3QgaW4gZSYmKHIobnVsbCE9ZVt0XSxGdChuLHQpKSxhPTEpfSkpLGF9ZnVuY3Rpb24geCguLi5lKXtsZXQgdCxyLG4sYSxbW28scyxpXSxjXT1kKGUpLHU9MTtjb25zdCBmPWwoJ3NhbXBsZScsYyk7cmV0dXJuIHhlKHMpJiYkZShvKSYmTShvLGYpJiYocz1vLmNsb2NrLGk9by5mbiwnYmF0Y2gnaW4gbz91PW8uYmF0Y2g6KGNlKCEoJ2dyZWVkeSdpbiBvKSwnZ3JlZWR5IGluIHNhbXBsZScsJ2JhdGNoJyxmKSx1PSFvLmdyZWVkeSksYT1vLmZpbHRlcix0PW8udGFyZ2V0LHI9by5uYW1lLG49by5zaWQsbz1vLnNvdXJjZSkscXQoJ3NhbXBsZScscyxvLGEsdCxpLHIsYyx1LDEsMCxuKX1mdW5jdGlvbiB6KC4uLmUpe2xldFtbdCxyXSxuXT1kKGUpO2NvbnN0IGE9bCgnZ3VhcmQnLG4pO3JldHVybiBjZSgwLCdndWFyZCcsJ3NhbXBsZScsYSkscnx8KHI9dCx0PXIuc291cmNlKSxNKHIsYSkscXQoJ2d1YXJkJyxyLmNsb2NrLHQsci5maWx0ZXIsci50YXJnZXQsbnVsbCxyLm5hbWUsbiwhci5ncmVlZHksMCwxKX1mdW5jdGlvbiBBKHQsbixhKXtjb25zdCBvPWwoJ3Jlc3RvcmUnLGEpO2lmKHIoIVkodCksJ3Jlc3RvcmUoJHN0b3JlKSBpcyBub3Qgc3VwcG9ydGVkJyxvKSxaKHQpfHxlZSh0KSl7Y29uc3QgZT1IKHQpLHI9aChuLHtwYXJlbnQ6ZSxuYW1lOnQuc2hvcnROYW1lLGFuZDphfSk7cmV0dXJuIHd0KGVlKHQpP3QuZG9uZURhdGE6dCxyKSxlJiZlLmhvb2tzLnN0b3JlKHIpLHJ9Y29uc3Qgcz1BcnJheS5pc0FycmF5KHQpP1tdOnt9O3JldHVybiBlKHQsKChlLHQpPT5zW3RdPVkoZSk/ZTpoKGUse25hbWU6dH0pKSksc31mdW5jdGlvbiBqKC4uLnQpe2NvbnN0IG49J3NwbGl0JztsZXQgbyxzLFtbaSxjXSx1XT1kKHQpO2NvbnN0IG09bChuLHUpLGg9IWM7aCYmKG89aS5jYXNlcyxjPWkubWF0Y2gscz1pLmNsb2NrLGk9aS5zb3VyY2UpO2NvbnN0IGc9WShjKSx5PSFRKGMpJiZNZShjKSxiPSFnJiYheSYmJGUoYyk7cihRKGkpLCdzb3VyY2UgbXVzdCBiZSBhIHVuaXQnLG0pLG98fChvPXt9KSxoP2UobywoKGUsdCk9PkNlKG0sZSxgY2FzZXMuJHt0fWApKSk6KHIoYiwnbWF0Y2ggc2hvdWxkIGJlIGFuIG9iamVjdCcsbSksZShjLCgoZSx0KT0+b1t0XT1wKHtkZXJpdmVkOjEsbmFtZWQ6YGNhc2VzLiR7dH1gLGFuZDp1fSkpKSxvLl9fPXAoe2Rlcml2ZWQ6MSxuYW1lZDonY2FzZXMuX18nLGFuZDp1fSkpO2NvbnN0IHY9bmV3IFNldChbXS5jb25jYXQoaSxzfHxbXSxPYmplY3QudmFsdWVzKG8pKSksaz1PYmplY3Qua2V5cyhnfHx5P286Yyk7bGV0IHc7aWYoZ3x8eSlnJiZ2LmFkZChjKSx3PVtnJiZFZShMKGMpLDAsMSksRGUoe3NhZmU6ZyxmaWx0ZXI6MSxwdXJlOiFnLGZuKGUsdCxyKXtjb25zdCBuPVN0cmluZyhnP3IuYTpjKGUpKTtfdCh0LG9lKGssbik/bjonX18nLGUscil9fSldO2Vsc2UgaWYoYil7Y29uc3QgdD1MZSh7fSk7dC50eXBlPSdzaGFwZSc7Y29uc3Qgcj1bXTtsZXQgbjtlKGMsKChlLGEpPT57aWYoUShlKSl7bj0xLGllKHIsYSksdi5hZGQoZSk7Y29uc3Qgbz13dChlLFtdLFtFZSh0KSxfZSgoKGUsdCx7YTpyfSk9PnJbYV09ZSkpXSk7aWYoWShlKSl7dC5jdXJyZW50W2FdPWUuZ2V0U3RhdGUoKTtjb25zdCByPUwoZSk7V2UodCx7ZnJvbTpyLGZpZWxkOmEsdHlwZTonZmllbGQnfSksZignc3BsaXRNYXRjaFN0b3JlJyxyLG8pfX19KSksbiYmZignc3BsaXRCYXNlJyx0KSx3PVtuJiZFZSh0LDAsMSksVmUoKChlLHQsbik9Pntmb3IobGV0IGE9MDthPGsubGVuZ3RoO2ErKyl7Y29uc3Qgbz1rW2FdO2lmKG9lKHIsbyk/bi5hW29dOmNbb10oZSkpcmV0dXJuIHZvaWQgX3QodCxvLGUsbil9X3QodCwnX18nLGUsbil9KSwxKV19ZWxzZSByKDAsJ2V4cGVjdCBtYXRjaCB0byBiZSB1bml0LCBmdW5jdGlvbiBvciBvYmplY3QnKTtjb25zdCBTPWEoe21ldGE6e29wOm59LHBhcmVudDpzP1tdOmksc2NvcGU6byxub2RlOncsZmFtaWx5Ontvd25lcnM6QXJyYXkuZnJvbSh2KX0scmVnaW9uYWw6MX0pO2lmKHMmJnF0KG4scyxpLG51bGwsUyxudWxsLG4sdSwwLDAsMCksIWgpcmV0dXJuIG99ZnVuY3Rpb24gQyhlLHtzY29wZTp0LHBhcmFtczpyfT17fSl7aWYoIVEoZSkpcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIHVuaXQnKSk7aWYoIShlZShlKXx8WihlKXx8WShlKXx8bmUoZSkpKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IGFjY2VwdHMgb25seSBlZmZlY3RzLCBldmVudHMsIHN0b3JlcyBvciBzY29wZXMnKSk7aWYobmUoZSkpdD1lO2Vsc2UgaWYoIXRlKGUpKXtjb25zdCB0PWwoJ2FsbFNldHRsZWQnLEUoZSkubWV0YSk7cmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKGAke3R9OiB1bml0IHNob3VsZCBiZSB0YXJnZXRhYmxlYCkpfWNvbnN0IG49eSgpO24ucGFyZW50Rm9yaz1ldDtjb25zdHtmeENvdW50OmF9PXQ7aWUoYS5zY29wZS5kZWZlcnMsbik7Y29uc3Qgcz1bXSxpPVtdO3JldHVybiBuZShlKXx8KGllKHMsZSksaWUoaSxlZShlKT97cGFyYW1zOnIscmVxOntycyhlKXtuLnZhbHVlPXtzdGF0dXM6J2RvbmUnLHZhbHVlOmV9fSxyaihlKXtuLnZhbHVlPXtzdGF0dXM6J2ZhaWwnLHZhbHVlOmV9fX19OnIpKSxpZShzLGEpLGllKGksbnVsbCksbyh7dGFyZ2V0OnMscGFyYW1zOmksc2NvcGU6dH0pLG4ucmVxfWZ1bmN0aW9uIE4oZSxyLG4pe2NvbnN0IGE9W107KGZ1bmN0aW9uIGUobyl7b2UoYSxvKXx8KGllKGEsbyksXCJzdG9yZVwiPT09RyhvLCdvcCcpJiYobnx8RyhvLCdzaWQnKSkmJnIobyxHKG8sJ3NpZCcpKSx0KG8ubmV4dCxlKSx0KFYobyksZSksdChUKG8pLGUpKX0pKGUpfWZ1bmN0aW9uIEkoZSxuKXtjb25zdCBhPUFycmF5LmlzQXJyYXkoZSk/bmV3IE1hcChlKTplLG89bmV3IE1hcDtsZXQgcz0wO2lmKGEgaW5zdGFuY2VvZiBNYXApe2NvbnN0IGU9e307cmV0dXJuIHQoYSwoKHQsYSk9PntyKFEoYSksJ01hcCBrZXkgc2hvdWxkIGJlIGEgdW5pdCcpLG4mJm4oYSx0KSxhLnNpZCYmKGEuc2lkIGluIGUmJihzPTEpLGVbYS5zaWRdPXQpLG8uc2V0KGEsdCl9KSkse3NpZE1hcDplLHVuaXRNYXA6byxoYXNTaWREb3VibGVzOnN9fXJldHVybntzaWRNYXA6YSx1bml0TWFwOm99fWZ1bmN0aW9uIE8oZSxuKXtsZXQgbyxzPWU7cmUoZSkmJihjZSgwLCdmb3JrKGRvbWFpbiknLCdmb3JrKCknKSxvPWUscz1uKTtjb25zdCBpPShlPT57Y29uc3Qgcj1hKHtzY29wZTp7ZGVmZXJzOltdLGluRmxpZ2h0OjAsZnhJRDowfSxub2RlOltfZSgoKGUsdCxyKT0+e3IucGFyZW50PydkZWMnPT09ci5wYXJlbnQubm9kZS5tZXRhLm5lZWRGeENvdW50ZXI/dC5pbkZsaWdodC09MToodC5pbkZsaWdodCs9MSx0LmZ4SUQrPTEpOnQuZnhJRCs9MX0pKSxEZSh7cHJpb3JpdHk6XCJzYW1wbGVyXCIsYmF0Y2g6MX0pLF9lKCgoZSxyKT0+e2NvbnN0e2RlZmVyczpuLGZ4SUQ6YX09cjtyLmluRmxpZ2h0PjB8fDA9PT1uLmxlbmd0aHx8UHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKCk9PntyLmZ4SUQ9PT1hJiZ0KG4uc3BsaWNlKDAsbi5sZW5ndGgpLChlPT57b3QoZS5wYXJlbnRGb3JrKSxlLnJzKGUudmFsdWUpfSkpfSkpfSksMCwxKV19KSxuPWEoe25vZGU6W19lKCgoZSx0LHIpPT57Y29uc3Qgbj1yLnBhcmVudDtpZihuKXtjb25zdCB0PW4ubm9kZTtpZihWdChuKSl7Y29uc3Qgbj1VKHIpLGE9dC5tZXRhLnNpZDtuLnNpZElkTWFwW2FdPXQuc2NvcGUuc3RhdGUuaWQsbi52YWx1ZXMuc2lkTWFwW2FdPWU7Y29uc3Qgbz10Lm1ldGEuc2VyaWFsaXplO28mJm4uc2lkU2VyaWFsaXplU2V0dGluZ3Muc2V0KGEsJ2lnbm9yZSc9PT1vP3tpZ25vcmU6MX06e2lnbm9yZTowLHdyaXRlOm8ud3JpdGV9KX19fSkpXX0pLG89YSh7bm9kZTpbX2UoKChlLHQscik9Pntjb25zdCBuPVUocik7biYmci5wYXJlbnQmJlZ0KHIucGFyZW50KSYmKG4ud2FyblNlcmlhbGl6ZT0xKX0pKV19KSxzPXtjbG9uZU9mOmUscmVnOnt9LHZhbHVlczp7c2lkTWFwOnt9LGlkTWFwOnt9fSxzaWRJZE1hcDp7fSxzaWRTZXJpYWxpemVTZXR0aW5nczpuZXcgTWFwLGdldFN0YXRlKGUpe2lmKCdjdXJyZW50J2luIGUpcmV0dXJuIGx0KGF0LHMsZSwwKS5jdXJyZW50O2NvbnN0IHQ9RShlKTtyZXR1cm4gbHQoYXQscyx0LnNjb3BlLnN0YXRlLDEpLmN1cnJlbnR9LGtpbmQ6XCJzY29wZVwiLGdyYXBoaXRlOmEoe2ZhbWlseTp7dHlwZTpcImRvbWFpblwiLGxpbmtzOltyLG4sb119LG1ldGE6e3VuaXQ6J2ZvcmsnfSxzY29wZTp7Zm9ya0luRmxpZ2h0Q291bnRlcjpyfX0pLGFkZGl0aW9uYWxMaW5rczp7fSxoYW5kbGVyczp7c2lkTWFwOnt9LHVuaXRNYXA6bmV3IE1hcH0sZnhDb3VudDpyLHN0b3JlQ2hhbmdlOm4sd2FyblNlcmlhbGl6ZU5vZGU6b307cmV0dXJuIHN9KShvKTtpZihzKXtpZihzLnZhbHVlcyl7Y29uc3R7c2lkTWFwOmUsdW5pdE1hcDpuLGhhc1NpZERvdWJsZXM6YX09SShzLnZhbHVlcywoZT0+cihZKGUpJiZ0ZShlKSwnVmFsdWVzIG1hcCBjYW4gY29udGFpbiBvbmx5IHdyaXRhYmxlIHN0b3JlcyBhcyBrZXlzJykpKTtPYmplY3QuYXNzaWduKGkudmFsdWVzLnNpZE1hcCxlKSx0KG4sKChlLHQpPT57aWYoaS52YWx1ZXMuaWRNYXBbdC5zdGF0ZVJlZi5pZF09ZSxpLnNpZElkTWFwW0codCwnc2lkJyldPXQuc3RhdGVSZWYuaWQsJ2lnbm9yZSc9PT1HKHQsJ3NlcmlhbGl6ZScpKXtjb25zdCBlPUcodCwnc2lkJyk7aS5zaWRTZXJpYWxpemVTZXR0aW5ncy5zZXQoZSx7aWdub3JlOjF9KX19KSksaS5mcm9tU2VyaWFsaXplPSEoQXJyYXkuaXNBcnJheShzLnZhbHVlcyl8fHMudmFsdWVzIGluc3RhbmNlb2YgTWFwKSxpLmhhc1NpZERvdWJsZXM9YX1zLmhhbmRsZXJzJiYoY2Uocy5oYW5kbGVycyBpbnN0YW5jZW9mIE1hcHx8QXJyYXkuaXNBcnJheShzLmhhbmRsZXJzKSwnb2JqZWN0IHdpdGggaGFuZGxlcnMnLCdhcnJheScpLGkuaGFuZGxlcnM9SShzLmhhbmRsZXJzLChlPT5yKGVlKGUpLFwiSGFuZGxlcnMgbWFwIGNhbiBjb250YWluIG9ubHkgZWZmZWN0cyBhcyBrZXlzXCIpKSkpfXJldHVybiBpfWZ1bmN0aW9uIFIoZSx7dmFsdWVzOm59KXtyKCRlKG4pLCd2YWx1ZXMgcHJvcGVydHkgc2hvdWxkIGJlIGFuIG9iamVjdCcpO2NvbnN0e3NpZE1hcDphLHVuaXRNYXA6c309SShuKSxpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGEpLGM9e307dChzLCgoZSx0KT0+e2NbdC5zdGF0ZVJlZi5pZF09dH0pKTtjb25zdCBsPVtdLGQ9W107bGV0IHUsZixwO25lKGUpPyh1PWUscD0xLHIodS5jbG9uZU9mLCdzY29wZSBzaG91bGQgYmUgY3JlYXRlZCBmcm9tIGRvbWFpbicpLGNlKDAsJ2h5ZHJhdGUoZm9yayhkb21haW4pLCB7IHZhbHVlcyB9KScsJ2ZvcmsoeyB2YWx1ZXMgfSknKSxmPUUodS5jbG9uZU9mKSk6cmUoZSk/KGNlKDAsJ2h5ZHJhdGUoZG9tYWluLCB7IHZhbHVlcyB9KScsJ2ZvcmsoeyB2YWx1ZXMgfSknKSxmPUUoZSkpOnIoMCwnZmlyc3QgYXJndW1lbnQgb2YgaHlkcmF0ZSBzaG91bGQgYmUgZG9tYWluIG9yIHNjb3BlJyksTihmLCgoZSx0KT0+e2lmKHQmJm9lKGksdCkpe2llKGwsZSk7Y29uc3Qgcj1HKGUsJ3NlcmlhbGl6ZScpO3ImJidpZ25vcmUnIT09ciYmKGFbdF09ci5yZWFkKGFbdF0pKSxpZShkLGFbdF0pfWVsc2UgZS5zY29wZS5zdGF0ZS5pZCBpbiBjJiYoaWUobCxlKSxpZShkLHMuZ2V0KGNbZS5zY29wZS5zdGF0ZS5pZF0pKSl9KSwxKSxvKHt0YXJnZXQ6bCxwYXJhbXM6ZCxzY29wZTp1fSkscCYmT2JqZWN0LmFzc2lnbih1LnZhbHVlcy5zaWRNYXAsYSl9ZnVuY3Rpb24gRihlLHtzY29wZTp0LHNhZmU6bn09e30pe3IodHx8ZXR8fG4sJ3Njb3BlQmluZDogc2NvcGUgbm90IGZvdW5kJyk7Y29uc3QgYT10fHxldDtyZXR1cm4gdD0+e2Z1bmN0aW9uIHIoKXtvdChzKX1sZXQgbixvPTA7Y29uc3Qgcz1ldDtvdChhKTt0cnl7bj1lKHQpfWNhdGNoKGUpe249ZSxvPTF9aWYocigpLG8pdGhyb3cgbjtyZXR1cm4gbiBpbnN0YW5jZW9mIFByb21pc2UmJm4udGhlbihyLHIpLG59fWZ1bmN0aW9uIHEodCxuPXt9KXt0Lndhcm5TZXJpYWxpemUmJmNvbnNvbGUuZXJyb3IoJ1RoZXJlIGlzIGEgc3RvcmUgd2l0aG91dCBzaWQgaW4gdGhpcyBzY29wZSwgaXRzIHZhbHVlIGlzIG9taXR0ZWQnKSxyKCF0Lmhhc1NpZERvdWJsZXMsJ2R1cGxpY2F0ZSBzaWQgZm91bmQgaW4gdGhpcyBzY29wZScpO2NvbnN0IGE9bi5pZ25vcmU/bi5pZ25vcmUubWFwKCgoe3NpZDplfSk9PmUpKTpbXSxvPXt9O3JldHVybiBlKHQudmFsdWVzLnNpZE1hcCwoKGUscik9Pnt2YXIgbjtpZihvZShhLHIpKXJldHVybjtjb25zdCBzPXQuc2lkSWRNYXBbcl0saT1udWxsIT09KG49dC5zaWRTZXJpYWxpemVTZXR0aW5ncy5nZXQocikpJiZ2b2lkIDAhPT1uP246e2lnbm9yZTowLHdyaXRlOlR0fTtpLmlnbm9yZXx8KG9bcl09KDAsaS53cml0ZSkocyYmcyBpbiB0LnJlZz90LnJlZ1tzXS5jdXJyZW50OmUpKX0pKSwnb25seUNoYW5nZXMnaW4gbiYmKGNlKDAsJ29ubHlDaGFuZ2VzJyksbi5vbmx5Q2hhbmdlc3x8KHIodC5jbG9uZU9mLCdzY29wZSBzaG91bGQgYmUgY3JlYXRlZCBmcm9tIGRvbWFpbicpLE4oRSh0LmNsb25lT2YpLCgoZSxyKT0+e3IgaW4gb3x8b2UoYSxyKXx8RyhlLCdpc0NvbWJpbmUnKXx8J2lnbm9yZSc9PT1HKGUsJ3NlcmlhbGl6ZScpfHwob1tyXT10LmdldFN0YXRlKGUpKX0pKSkpLG99ZnVuY3Rpb24gRCh7dW5pdDplLGZuOnQsc2NvcGU6cixiYXRjaDpufSl7Y29uc3Qgbz1bVGUucnVuKHtmbjplPT50KGUpfSldO24mJm8udW5zaGlmdChUZS5jb21wdXRlKHtwcmlvcml0eTonc2FtcGxlcicsYmF0Y2g6MX0pKSxZKGUpJiZvLnVuc2hpZnQoVGUubW92KHtzdG9yZTplLnN0YXRlUmVmLHRvOidzdGFjayd9KSk7Y29uc3Qgcz1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2lmKHIpe2NvbnN0IGU9W10sdD1yLmFkZGl0aW9uYWxMaW5rcztyZXR1cm4gcy5mb3JFYWNoKChyPT57Y29uc3Qgbj10W3IuZ3JhcGhpdGUuaWRdfHxbXTt0W3IuZ3JhcGhpdGUuaWRdPW47Y29uc3Qgcz1hKHtub2RlOlAobyxyKSxtZXRhOnt3YXRjaE9wOnIua2luZH19KTtuLnB1c2gocyksZS5wdXNoKCgoKT0+e2NvbnN0IGU9bi5pbmRleE9mKHMpOy0xIT09ZSYmbi5zcGxpY2UoZSwxKSx2dChzKX0pKX0pKSx1KCgoKT0+e2UuZm9yRWFjaCgoZT0+ZSgpKSl9KSl9e2NvbnN0IGU9YSh7bm9kZTpvLHBhcmVudDpzLGZhbWlseTp7b3duZXJzOnN9fSk7cmV0dXJuIHUoKCgpPT57dnQoZSl9KSl9fWZ1bmN0aW9uIFAoZSx0KXtyZXR1cm4gWSh0KT9bVGUubW92KHtzdG9yZTp0LnN0YXRlUmVmLHRvOidzdGFjayd9KSwuLi5lXTplfWNvbnN0IF89J3VuZGVmaW5lZCchPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5vYnNlcnZhYmxlfHwnQEBvYnNlcnZhYmxlJyxFPWU9PmUuZ3JhcGhpdGV8fGUsVj1lPT5lLmZhbWlseS5vd25lcnMsVD1lPT5lLmZhbWlseS5saW5rcyxMPWU9PmUuc3RhdGVSZWYsQj1lPT5lLnZhbHVlLFc9ZT0+ZS5zdWJzY3JpYmVycyxIPWU9PmUucGFyZW50LFU9ZT0+ZS5zY29wZSxHPShlLHQpPT5FKGUpLm1ldGFbdF0sSj0oZSx0LHIpPT5FKGUpLm1ldGFbdF09cixLPWU9PmUuY29tcG9zaXRlTmFtZSxRPWU9PihNZShlKXx8JGUoZSkpJiYna2luZCdpbiBlLFg9ZT0+dD0+USh0KSYmdC5raW5kPT09ZSxZPVgoXCJzdG9yZVwiKSxaPVgoXCJldmVudFwiKSxlZT1YKFwiZWZmZWN0XCIpLHRlPWU9PlEoZSkmJiEhZS50YXJnZXRhYmxlLHJlPVgoXCJkb21haW5cIiksbmU9WChcInNjb3BlXCIpO3ZhciBhZT17X19wcm90b19fOm51bGwsdW5pdDpRLHN0b3JlOlksZXZlbnQ6WixlZmZlY3Q6ZWUsdGFyZ2V0YWJsZTp0ZSxkb21haW46cmUsc2NvcGU6bmUsYXR0YWNoZWQ6ZT0+ZWUoZSkmJjE9PUcoZSwnYXR0YWNoZWQnKX07Y29uc3Qgb2U9KGUsdCk9PmUuaW5jbHVkZXModCksc2U9KGUsdCk9Pntjb25zdCByPWUuaW5kZXhPZih0KTstMSE9PXImJmUuc3BsaWNlKHIsMSl9LGllPShlLHQpPT5lLnB1c2godCksY2U9KGUsdCxyLG4pPT4hZSYmY29uc29sZS5lcnJvcihgJHtuP24rJzogJzonJ30ke3R9IGlzIGRlcHJlY2F0ZWQke3I/YCwgdXNlICR7cn0gaW5zdGVhZGA6Jyd9YCksbGU9KCk9PntsZXQgZT0wO3JldHVybigpPT5cIlwiKyArK2V9LGRlPWxlKCksdWU9bGUoKSxmZT1sZSgpLHBlPWxlKCk7bGV0IG1lO2NvbnN0IGhlPWU9PnttZT1lfTtsZXQgZ2U9bnVsbDtjb25zdCB5ZT1lPT57bWUmJm1lKGUsZ2UpfSxiZT0oKT0+Z2UmJmdlLnRlbXBsYXRlLHZlPWU9PihlJiZnZSYmZ2Uuc2lkUm9vdCYmKGU9YCR7Z2Uuc2lkUm9vdH18JHtlfWApLGUpLGtlPSh7c2lkOmUsbmFtZTp0LGxvYzpyLG1ldGhvZDpvLGZuOnN9KT0+bihhKHttZXRhOntzaWRSb290OnZlKGUpLHNpZDplLG5hbWU6dCxsb2M6cixtZXRob2Q6byx0eXBlOidmYWN0b3J5J319KSxzKSx3ZT0oZSxyKT0+e2NvbnN0IG49RShlKTt0KHIsKGU9Pntjb25zdCB0PUUoZSk7XCJkb21haW5cIiE9PW4uZmFtaWx5LnR5cGUmJih0LmZhbWlseS50eXBlPVwiY3Jvc3NsaW5rXCIpLGllKFYodCksbiksaWUoVChuKSx0KX0pKX0sU2U9KGU9W10pPT4oQXJyYXkuaXNBcnJheShlKT9lOltlXSkuZmxhdCgpLm1hcChFKSwkZT1lPT4nb2JqZWN0Jz09dHlwZW9mIGUmJm51bGwhPT1lLE1lPWU9PidmdW5jdGlvbic9PXR5cGVvZiBlLHhlPWU9PnZvaWQgMD09PWUsemU9ZT0+cigkZShlKXx8TWUoZSksJ2V4cGVjdCBmaXJzdCBhcmd1bWVudCBiZSBhbiBvYmplY3QnKSxBZT0oZSx0LG4sYSk9PnIoISghJGUoZSkmJiFNZShlKXx8ISgnZmFtaWx5J2luIGUpJiYhKCdncmFwaGl0ZSdpbiBlKSksYCR7dH06IGV4cGVjdCAke259IHRvIGJlIGEgdW5pdCAoc3RvcmUsIGV2ZW50IG9yIGVmZmVjdCkke2F9YCksamU9KGUscixuKT0+e0FycmF5LmlzQXJyYXkoZSk/dChlLCgoZSx0KT0+QWUoZSxyLGAke3R9IGl0ZW0gb2YgJHtufWAsJycpKSk6QWUoZSxyLG4sJyBvciBhcnJheSBvZiB1bml0cycpfSxDZT0oZSxuLGE9XCJ0YXJnZXRcIik9PnQoU2UobiksKHQ9PnIoIUcodCwnZGVyaXZlZCcpLGAke2V9OiBkZXJpdmVkIHVuaXQgaW4gXCIke2F9XCIgaXMgbm90IHN1cHBvcnRlZCwgdXNlIGNyZWF0ZVN0b3JlL2NyZWF0ZUV2ZW50IGluc3RlYWRcImApKSksTmU9KGUse2ZuOnR9LHthOnJ9KT0+dChlLHIpLEllPShlLHtmbjp0fSx7YTpyfSk9PnQocixlKSxPZT0oZSx7Zm46dH0pPT50KGUpLFJlPShlLHQscixuKT0+e2NvbnN0IGE9e2lkOnVlKCksdHlwZTplLGRhdGE6dH07cmV0dXJuIHImJihhLm9yZGVyPXtwcmlvcml0eTpyfSxuJiYoYS5vcmRlci5iYXJyaWVySUQ9KytGZSkpLGF9O2xldCBGZT0wO2NvbnN0IHFlPSh7ZnJvbTplPVwic3RvcmVcIixzdG9yZTp0LHRhcmdldDpyLHRvOm49KHI/XCJzdG9yZVwiOlwic3RhY2tcIiksYmF0Y2g6YSxwcmlvcml0eTpvfSk9PlJlKCdtb3YnLHtmcm9tOmUsc3RvcmU6dCx0bzpuLHRhcmdldDpyfSxvLGEpLERlPSh7Zm46ZSxiYXRjaDp0LHByaW9yaXR5OnIsc2FmZTpuPTAsZmlsdGVyOmE9MCxwdXJlOm89MH0pPT5SZSgnY29tcHV0ZScse2ZuOmUsc2FmZTpuLGZpbHRlcjphLHB1cmU6b30scix0KSxQZT0oe2ZuOmV9KT0+RGUoe2ZuOmUscHJpb3JpdHk6XCJlZmZlY3RcIn0pLF9lPShlLHQscik9PkRlKHtmbjplLHNhZmU6MSxmaWx0ZXI6dCxwcmlvcml0eTpyJiZcImVmZmVjdFwifSksRWU9KGUsdCxyKT0+cWUoe3N0b3JlOmUsdG86dD9cInN0YWNrXCI6XCJhXCIscHJpb3JpdHk6ciYmXCJzYW1wbGVyXCIsYmF0Y2g6MX0pLFZlPShlPU9lLHQpPT5EZSh7Zm46ZSxwdXJlOjEsZmlsdGVyOnR9KSxUZT17bW92OnFlLGNvbXB1dGU6RGUsZmlsdGVyOih7Zm46ZSxwdXJlOnR9KT0+RGUoe2ZuOmUsZmlsdGVyOjEscHVyZTp0fSkscnVuOlBlfSxMZT1lPT4oe2lkOnVlKCksY3VycmVudDplLGluaXRpYWw6ZX0pLEJlPSh7Y3VycmVudDplfSk9PmUsV2U9KGUsdCk9PntlLmJlZm9yZXx8KGUuYmVmb3JlPVtdKSxpZShlLmJlZm9yZSx0KX07bGV0IEhlPW51bGw7Y29uc3QgVWU9KGUsdCk9PntpZighZSlyZXR1cm4gdDtpZighdClyZXR1cm4gZTtsZXQgcjtyZXR1cm4oZS52LnR5cGU9PT10LnYudHlwZSYmZS52LmlkPnQudi5pZHx8WWUoZS52LnR5cGUpPlllKHQudi50eXBlKSkmJihyPWUsZT10LHQ9cikscj1VZShlLnIsdCksZS5yPWUubCxlLmw9cixlfSxHZT1bXTtsZXQgSmU9MDtmb3IoO0plPDY7KWllKEdlLHtmaXJzdDpudWxsLGxhc3Q6bnVsbCxzaXplOjB9KSxKZSs9MTtjb25zdCBLZT0oKT0+e2ZvcihsZXQgZT0wO2U8NjtlKyspe2NvbnN0IHQ9R2VbZV07aWYodC5zaXplPjApe2lmKDM9PT1lfHw0PT09ZSl7dC5zaXplLT0xO2NvbnN0IGU9SGUudjtyZXR1cm4gSGU9VWUoSGUubCxIZS5yKSxlfTE9PT10LnNpemUmJih0Lmxhc3Q9bnVsbCk7Y29uc3Qgcj10LmZpcnN0O3JldHVybiB0LmZpcnN0PXIucix0LnNpemUtPTEsci52fX19LFFlPShlLHQscixuLGEsbyxzKT0+WGUoMCx7YTpudWxsLGI6bnVsbCxub2RlOnIscGFyZW50Om4sdmFsdWU6YSxwYWdlOnQsc2NvcGU6byxtZXRhOnN9LGUsMCksWGU9KGUsdCxyLG4pPT57Y29uc3QgYT1ZZShyKSxvPUdlW2FdLHM9e3Y6e2lkeDplLHN0YWNrOnQsdHlwZTpyLGlkOm59LGw6bnVsbCxyOm51bGx9OzM9PT1hfHw0PT09YT9IZT1VZShIZSxzKTooMD09PW8uc2l6ZT9vLmZpcnN0PXM6by5sYXN0LnI9cyxvLmxhc3Q9cyksby5zaXplKz0xfSxZZT1lPT57c3dpdGNoKGUpe2Nhc2UnY2hpbGQnOnJldHVybiAwO2Nhc2UncHVyZSc6cmV0dXJuIDE7Y2FzZSdyZWFkJzpyZXR1cm4gMjtjYXNlJ2JhcnJpZXInOnJldHVybiAzO2Nhc2Unc2FtcGxlcic6cmV0dXJuIDQ7Y2FzZSdlZmZlY3QnOnJldHVybiA1O2RlZmF1bHQ6cmV0dXJuLTF9fSxaZT1uZXcgU2V0O2xldCBldCx0dD0xLHJ0PTAsbnQ9MCxhdD1udWxsO2NvbnN0IG90PWU9PntldD1lfSxzdD1lPT57YXQ9ZX0sY3Q9KGUsdCk9PntpZihlKXtmb3IoO2UmJiFlLnJlZ1t0XTspZT1lLnBhcmVudDtpZihlKXJldHVybiBlfXJldHVybiBudWxsfSxsdD0oZSx0LHIsbik9Pntjb25zdCBhPWN0KGUsci5pZCk7cmV0dXJuIGE/YS5yZWdbci5pZF06dD8ocHQodCxyLG4pLHQucmVnW3IuaWRdKTpyfTtsZXQgZHQ7Y29uc3QgdXQ9ZT0+e2R0PWV9LGZ0PWU9PmUscHQ9KGUscixuLGEsbyk9Pntjb25zdCBzPWUucmVnO2lmKHNbci5pZF0pcmV0dXJuO2NvbnN0IGk9ci5zaWQsYz17aWQ6ci5pZCxjdXJyZW50OnIuaW5pdGlhbCxtZXRhOnIubWV0YX07aWYoYy5pZCBpbiBlLnZhbHVlcy5pZE1hcCljLmN1cnJlbnQ9ZS52YWx1ZXMuaWRNYXBbYy5pZF07ZWxzZSBpZihpJiZpIGluIGUudmFsdWVzLnNpZE1hcCYmIShpIGluIGUuc2lkSWRNYXApKXt2YXIgbDtjb25zdCB0PW51bGw9PXJ8fG51bGw9PT0obD1yLm1ldGEpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnNlcmlhbGl6ZTtjLmN1cnJlbnQ9KGUuZnJvbVNlcmlhbGl6ZSYmJ2lnbm9yZSchPT10JiYobnVsbD09dD92b2lkIDA6dC5yZWFkKXx8ZnQpKGUudmFsdWVzLnNpZE1hcFtpXSl9ZWxzZSBpZihyLmJlZm9yZSYmIW8pe2xldCBvPTA7Y29uc3QgaT1ufHwhci5ub0luaXR8fGE7dChyLmJlZm9yZSwodD0+e3N3aXRjaCh0LnR5cGUpe2Nhc2UnbWFwJzp7Y29uc3Qgcj10LmZyb207aWYoKHJ8fHQuZm4pJiYociYmcHQoZSxyLG4sYSksaSkpe2NvbnN0IGU9ciYmc1tyLmlkXS5jdXJyZW50O2MuY3VycmVudD10LmZuP3QuZm4oZSk6ZX1icmVha31jYXNlJ2ZpZWxkJzpwdChlLHQuZnJvbSxuLGEpLG98fChvPTEsYy5jdXJyZW50PUFycmF5LmlzQXJyYXkoYy5jdXJyZW50KT9bLi4uYy5jdXJyZW50XTp7Li4uYy5jdXJyZW50fSksaSYmKGMuY3VycmVudFt0LmZpZWxkXT1zW3NbdC5mcm9tLmlkXS5pZF0uY3VycmVudCl9fSkpfWkmJihlLnNpZElkTWFwW2ldPXIuaWQpLHNbci5pZF09Y30sbXQ9KGUsdCxyKT0+e3RyeXtyZXR1cm4gdChCKHIpLGUuc2NvcGUscil9Y2F0Y2godCl7Y29uc29sZS5lcnJvcih0KSxlLmZhaWw9MSxlLmZhaWxSZWFzb249dH19LGh0PSh0LHI9e30pPT4oJGUodCkmJihodCh0Lm9yLHIpLGUodCwoKGUsdCk9Pnt4ZShlKXx8J29yJz09PXR8fCdhbmQnPT09dHx8KHJbdF09ZSl9KSksaHQodC5hbmQscikpLHIpLGd0PShlLHQpPT57c2UoZS5uZXh0LHQpLHNlKFYoZSksdCksc2UoVChlKSx0KX0seXQ9KGUsdCxyKT0+e2xldCBuO2UubmV4dC5sZW5ndGg9MCxlLnNlcS5sZW5ndGg9MCxlLnNjb3BlPW51bGw7bGV0IGE9VChlKTtmb3IoO249YS5wb3AoKTspZ3QobixlKSwodHx8ciYmJ3NhbXBsZSchPT1lLm1ldGEub3B8fFwiY3Jvc3NsaW5rXCI9PT1uLmZhbWlseS50eXBlKSYmeXQobix0LCdvbichPT1uLm1ldGEub3AmJnIpO2ZvcihhPVYoZSk7bj1hLnBvcCgpOylndChuLGUpLHImJlwiY3Jvc3NsaW5rXCI9PT1uLmZhbWlseS50eXBlJiZ5dChuLHQsJ29uJyE9PW4ubWV0YS5vcCYmcil9LGJ0PWU9PmUuY2xlYXIoKSx2dD0oZSx7ZGVlcDp0fT17fSk9PntsZXQgcj0wO2lmKGUub3duZXJTZXQmJmUub3duZXJTZXQuZGVsZXRlKGUpLFkoZSkpYnQoVyhlKSk7ZWxzZSBpZihyZShlKSl7cj0xO2NvbnN0IHQ9ZS5oaXN0b3J5O2J0KHQuZXZlbnRzKSxidCh0LmVmZmVjdHMpLGJ0KHQuc3RvcmVzKSxidCh0LmRvbWFpbnMpfXl0KEUoZSksISF0LHIpfSxrdD1lPT51KCgoKT0+dnQoZSkpKSx3dD0oZSx0LHIsbixvKT0+YSh7bm9kZTpyLHBhcmVudDplLGNoaWxkOnQsc2NvcGU6e2ZuOm99LG1ldGE6e29wOm59LGZhbWlseTp7b3duZXJzOltlLHRdLGxpbmtzOnR9LHJlZ2lvbmFsOjF9KSxTdD1lPT57Y29uc3QgdD0nZm9yd2FyZCcsW3tmcm9tOnIsdG86bn0sb109ZChlLDEpLHM9bCh0LG8pO3JldHVybiBjZSgwLHQsJ3NhbXBsZScscyksamUocixzLCdcImZyb21cIicpLGplKG4scywnXCJ0b1wiJyksQ2UocyxuLCd0bycpLGt0KGEoe3BhcmVudDpyLGNoaWxkOm4sbWV0YTp7b3A6dCxjb25maWc6b30sZmFtaWx5Ont9LHJlZ2lvbmFsOjF9KSl9LCR0PShlLHQpPT4ocihNZSh0KSwnLndhdGNoIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uJyksa3QoYSh7c2NvcGU6e2ZuOnR9LG5vZGU6W1BlKHtmbjpPZX0pXSxwYXJlbnQ6ZSxtZXRhOntvcDond2F0Y2gnfSxmYW1pbHk6e293bmVyczplfSxyZWdpb25hbDoxfSkpKSxNdD0oZSx0LHI9XCJldmVudFwiKT0+e0goZSkmJkgoZSkuaG9va3Nbcl0odCl9LHh0PShlLHQscik9Pntjb25zdCBuPWh0KHIpLGE9XCJkb21haW5cIj09PWUsbz1kZSgpLHtzaWQ6cz1udWxsLG5hbWVkOmk9bnVsbCxkb21haW46bD1udWxsLHBhcmVudDpkPWx9PW4sdT1pfHxuLm5hbWV8fChhPycnOm8pLGY9Yyh1LGQpLHA9e29wOnQua2luZD1lLG5hbWU6dC5zaG9ydE5hbWU9dSxzaWQ6dC5zaWQ9dmUocyksbmFtZWQ6aSx1bml0SWQ6dC5pZD1vLHNlcmlhbGl6ZTpuLnNlcmlhbGl6ZSxkZXJpdmVkOm4uZGVyaXZlZCxjb25maWc6bn07aWYodC50YXJnZXRhYmxlPSFuLmRlcml2ZWQsdC5wYXJlbnQ9ZCx0LmNvbXBvc2l0ZU5hbWU9Zix0LmRlZmF1bHRDb25maWc9bix0LmdldFR5cGU9KCk9PihjZSgwLCdnZXRUeXBlJywnY29tcG9zaXRlTmFtZS5mdWxsTmFtZScpLGYuZnVsbE5hbWUpLCFhKXt0LnN1YnNjcmliZT1lPT4oemUoZSksdC53YXRjaChNZShlKT9lOnQ9PmUubmV4dCYmZS5uZXh0KHQpKSksdFtfXT0oKT0+dDtjb25zdCBlPWJlKCk7ZSYmKHAubmF0aXZlVGVtcGxhdGU9ZSl9cmV0dXJuIHB9LHp0PShlLHQscixuKT0+e2xldCBhOyRlKHIpJiYoYT1yLHI9ci5mbik7Y29uc3Qgbz1wKHtuYW1lOmAke2Uuc2hvcnROYW1lfSBcXHUyMTkyICpgLGRlcml2ZWQ6MSxhbmQ6YX0pO3JldHVybiB3dChlLG8sbix0LHIpLG99LEF0PSd1bmRlZmluZWQgaXMgdXNlZCB0byBza2lwIHVwZGF0ZXMuIFRvIGFsbG93IHVuZGVmaW5lZCBhcyBhIHZhbHVlIHByb3ZpZGUgZXhwbGljaXQgeyBza2lwVm9pZDogZmFsc2UgfSBvcHRpb24nLGp0PShlLHQscixuLGEpPT57Y29uc3Qgbz1MKHQpLHM9cWUoe3N0b3JlOm8sdG86XCJhXCIscHJpb3JpdHk6J3JlYWQnfSk7XCJtYXBcIj09PXImJihzLmRhdGEuc29mdFJlYWQ9MSk7Y29uc3QgaT1bcyxWZShuKV07cmV0dXJuIGYoJ3N0b3JlT25NYXAnLG8saSxZKGUpJiZMKGUpKSx3dChlLHQsaSxyLGEpfSxDdD0odCxuLGEsbyxpLGMpPT57Y29uc3QgZD1sKCdjb21iaW5lJyxvKSx1PXQ/ZT0+Wy4uLmVdOmU9Pih7Li4uZX0pLHA9dD9bXTp7fSxtPXUocCksZz1MZShtKSx5PUxlKDEpO2cudHlwZT10PydsaXN0Jzonc2hhcGUnLGcubm9Jbml0PTEsZignY29tYmluZUJhc2UnLGcseSk7Y29uc3QgYj1oKG0se25hbWU6cyhhKSxkZXJpdmVkOjEsLi4uYyxhbmQ6b30pLHY9TChiKTt2Lm5vSW5pdD0xLEooYiwnaXNDb21iaW5lJywxKTtjb25zdCBrPUVlKGcpO2sub3JkZXI9e3ByaW9yaXR5OidiYXJyaWVyJ307Y29uc3Qgdz1xZSh7c3RvcmU6dix0bzonYicscHJpb3JpdHk6J3JlYWQnfSk7dy5kYXRhLnNvZnRSZWFkPTE7Y29uc3QgUz1bX2UoKChlLHQscik9PihyLnNjb3BlJiYhci5zY29wZS5yZWdbZy5pZF0mJihyLmM9MSksZSkpKSxrLHFlKHtzdG9yZTp5LHRvOidiJ30pLF9lKCgoZSx7a2V5OnR9LHIpPT57aWYoci5jfHxlIT09ci5hW3RdKXJldHVybiBuJiZyLmImJihyLmE9dShyLmEpKSxyLmFbdF09ZSwxfSksMSkscWUoe2Zyb206XCJhXCIsdGFyZ2V0Omd9KSxxZSh7ZnJvbTpcInZhbHVlXCIsc3RvcmU6MCx0YXJnZXQ6eX0pLHFlKHtmcm9tOlwidmFsdWVcIixzdG9yZToxLHRhcmdldDp5LHByaW9yaXR5OidiYXJyaWVyJyxiYXRjaDoxfSksRWUoZywxLDEpLGkmJlZlKCksd107aWYoZShhLCgoZSx0KT0+e2lmKCFZKGUpKXJldHVybiByKCFRKGUpJiYheGUoZSksYGNvbWJpbmUgZXhwZWN0cyBhIHN0b3JlIGluIGEgZmllbGQgJHt0fWAsZCksdm9pZChtW3RdPXBbdF09ZSk7cFt0XT1lLmRlZmF1bHRTdGF0ZSxtW3RdPWUuZ2V0U3RhdGUoKTtjb25zdCBuPXd0KGUsYixTLCdjb21iaW5lJyxpKTtuLnNjb3BlLmtleT10O2NvbnN0IGE9TChlKTtXZShnLHt0eXBlOidmaWVsZCcsZmllbGQ6dCxmcm9tOmF9KSxmKCdjb21iaW5lRmllbGQnLGEsbil9KSksYi5kZWZhdWx0U2hhcGU9YSxXZSh2LHt0eXBlOlwibWFwXCIsZnJvbTpnLGZuOml9KSwhYmUoKSlpZihpKXtjb25zdCBlPWkobSk7IXhlKGUpfHxjJiYnc2tpcFZvaWQnaW4gY3x8Y29uc29sZS5lcnJvcihgJHtkfTogJHtBdH1gKSx2LmN1cnJlbnQ9ZSx2LmluaXRpYWw9ZSxiLmRlZmF1bHRTdGF0ZT1lfWVsc2UgYi5kZWZhdWx0U3RhdGU9cDtyZXR1cm4gYn0sTnQ9KGUsdCxyKT0+e3RyeXtyZXR1cm5bMSxlKC4uLnIpXX1jYXRjaChlKXtyZXR1cm4gdChlKSxbMCxudWxsXX19LEl0PShlLHQscixuLGEpPT5zPT57byh7dGFyZ2V0OltuLE90XSxwYXJhbXM6W3I/e3N0YXR1czonZG9uZScscGFyYW1zOmUscmVzdWx0OnN9OntzdGF0dXM6J2ZhaWwnLHBhcmFtczplLGVycm9yOnN9LHt2YWx1ZTpzLGZuOnI/dC5yczp0LnJqfV0sZGVmZXI6MSxwYWdlOmEucGFnZSxzY29wZTphLnNjb3BlLG1ldGE6YS5tZXRhfSl9LE90PWEoe25vZGU6W1BlKHtmbjooe2ZuOmUsdmFsdWU6dH0pPT5lKHQpfSldLG1ldGE6e29wOidmeCcsZng6J3NpZGVjaGFpbid9fSksUnQ9Wydzb3VyY2UnLCdjbG9jaycsJ3RhcmdldCddLEZ0PShlLHQpPT5lK2A6ICR7dH0gc2hvdWxkIGJlIGRlZmluZWRgLHF0PShlLHQsbixhLG8scyxpLGMsZCx1LG0seSk9Pntjb25zdCBiPWwoZSxjKSx2PSEhbztyKCF4ZShuKXx8IXhlKHQpLEZ0KGIsJ2VpdGhlciBzb3VyY2Ugb3IgY2xvY2snKSk7bGV0IGs9MDt4ZShuKT9rPTE6UShuKXx8KG49ZyhuKSkseGUodCk/dD1uOihqZSh0LGIsJ2Nsb2NrJyksQXJyYXkuaXNBcnJheSh0KSYmKHQ9JCh0KSkpLGsmJihuPXQpLGN8fGl8fChpPW4uc2hvcnROYW1lKTtsZXQgdz0nbm9uZSc7KG18fGEpJiYoUShhKT93PSd1bml0JzoocihNZShhKSwnYGZpbHRlcmAgc2hvdWxkIGJlIGZ1bmN0aW9uIG9yIHVuaXQnKSx3PSdmbicpKSxvPyhqZShvLGIsJ3RhcmdldCcpLENlKGIsbykpOidub25lJz09PXcmJnUmJlkobikmJlkodCk/bz1oKHM/cyhCZShMKG4pKSxCZShMKHQpKSk6QmUoTChuKSkse25hbWU6aSxzaWQ6eSxvcjpjfSk6KG89cCh7bmFtZTppLGRlcml2ZWQ6MSxvcjpjfSksZignc2FtcGxlVGFyZ2V0JyxFKG8pKSk7Y29uc3QgUz1MZSgpO2xldCBNPVtdO2lmKCd1bml0Jz09PXcpe2NvbnN0W3IsbixzXT1QdChhLG8sdCxTLGUpO3N8fE0ucHVzaCguLi5EdChuKSksTS5wdXNoKC4uLkR0KHIpKX1jb25zdCB4PVtdO2lmKGspZCYmeC5wdXNoKEVlKFMsMSwxKSk7ZWxzZXtjb25zdFtyLGEsc109UHQobixvLHQsUyxlKTtzfHx4LnB1c2goLi4uRHQoYSkpLHgucHVzaChFZShyLDEsZCkpfWNvbnN0IHo9d3QodCxvLFtmKCdzYW1wbGVTb3VyY2VMb2FkZXInKSxxZSh7ZnJvbTpcInN0YWNrXCIsdGFyZ2V0OlN9KSwuLi54LC4uLk0sRWUoUyksJ2ZuJz09PXcmJlZlKCgoZSx0LHthOnJ9KT0+YShlLHIpKSwxKSxzJiZWZShOZSksZignc2FtcGxlU291cmNlVXB3YXJkJyx2KV0sZSxzKTtyZXR1cm4gd2Uobixbel0pLE9iamVjdC5hc3NpZ24oei5tZXRhLGMse2pvaW50OjF9KSxvfSxEdD1lPT5bRWUoZSksX2UoKChlLHQse2E6cn0pPT5yKSwxKV0sUHQ9KGUsdCxyLG4sbyk9Pntjb25zdCBzPVkoZSksaT1zP0woZSk6TGUoKSxjPUxlKHMpO3JldHVybiBzfHxhKHtwYXJlbnQ6ZSxub2RlOltxZSh7ZnJvbTpcInN0YWNrXCIsdGFyZ2V0Oml9KSxxZSh7ZnJvbTpcInZhbHVlXCIsc3RvcmU6MSx0YXJnZXQ6Y30pXSxmYW1pbHk6e293bmVyczpbZSx0LHJdLGxpbmtzOnR9LG1ldGE6e29wOm99LHJlZ2lvbmFsOjF9KSxmKCdzYW1wbGVTb3VyY2UnLGMsaSxuKSxbaSxjLHNdfSxfdD0oZSx0LHIsbik9Pntjb25zdCBhPWVbdF07YSYmbyh7dGFyZ2V0OmEscGFyYW1zOkFycmF5LmlzQXJyYXkoYSk/YS5tYXAoKCgpPT5yKSk6cixkZWZlcjoxLHN0YWNrOm59KX0sRXQ9XCIyMy4yLjBcIixWdD1lPT4hZS5ub2RlLm1ldGEuaXNDb21iaW5lfHxlLnBhcmVudCYmJ2NvbWJpbmUnIT09ZS5wYXJlbnQubm9kZS5tZXRhLm9wLFR0PWU9PmU7ZXhwb3J0e0MgYXMgYWxsU2V0dGxlZCx2IGFzIGF0dGFjaCx2dCBhcyBjbGVhck5vZGUsZyBhcyBjb21iaW5lLGsgYXMgY3JlYXRlQXBpLHcgYXMgY3JlYXRlRG9tYWluLGIgYXMgY3JlYXRlRWZmZWN0LHAgYXMgY3JlYXRlRXZlbnQsYSBhcyBjcmVhdGVOb2RlLGggYXMgY3JlYXRlU3RvcmUsRCBhcyBjcmVhdGVXYXRjaCxPIGFzIGZvcmssU3QgYXMgZm9yd2FyZCxTIGFzIGZyb21PYnNlcnZhYmxlLHogYXMgZ3VhcmQsUiBhcyBoeWRyYXRlLGFlIGFzIGlzLG8gYXMgbGF1bmNoLCQgYXMgbWVyZ2UsQSBhcyByZXN0b3JlLHggYXMgc2FtcGxlLEYgYXMgc2NvcGVCaW5kLHEgYXMgc2VyaWFsaXplLGhlIGFzIHNldEdyYXBoSW5zcGVjdG9yLHV0IGFzIHNldEluc3BlY3RvcixpIGFzIHNldFN0b3JlTmFtZSxqIGFzIHNwbGl0LFRlIGFzIHN0ZXAsRXQgYXMgdmVyc2lvbixrZSBhcyB3aXRoRmFjdG9yeSxuIGFzIHdpdGhSZWdpb259O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0b3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJ0IiwiciIsImZvckVhY2giLCJFcnJvciIsIm4iLCJFIiwibWV0YSIsImdlIiwiaWQiLCJwYXJlbnQiLCJ2YWx1ZSIsInRlbXBsYXRlIiwiYmUiLCJzaWRSb290IiwieWUiLCJIIiwiYSIsIm5vZGUiLCJmcm9tIiwic291cmNlIiwidG8iLCJvIiwidGFyZ2V0IiwicyIsImNoaWxkIiwiaSIsInNjb3BlIiwiYyIsImwiLCJmYW1pbHkiLCJkIiwidHlwZSIsInJlZ2lvbmFsIiwidSIsImYiLCJTZSIsInAiLCJsaW5rcyIsIm0iLCJvd25lcnMiLCJoIiwiaWUiLCJnIiwiZmUiLCJzZXEiLCJuZXh0IiwiViIsIlQiLCJ3ZSIsIkIiLCJhdCIsImV0IiwicGFyYW1zIiwiZGVmZXIiLCJwYWdlIiwic3RhY2siLCJVIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiUWUiLCJ0dCIsImlzUm9vdCIsImN1cnJlbnRQYWdlIiwiaXNXYXRjaCIsInJ0IiwiaXNQdXJlIiwibnQiLCJLZSIsImlkeCIsInJlZyIsImZhaWwiLCJvcmRlciIsInByaW9yaXR5IiwiYmFycmllcklEIiwiZnVsbElEIiwiWmUiLCJoYXMiLCJhZGQiLCJYZSIsImRlbGV0ZSIsImRhdGEiLCJzdG9yZSIsImN0IiwicHQiLCJzb2Z0UmVhZCIsIkJlIiwibHQiLCJjdXJyZW50IiwiZm4iLCJvcCIsInB1cmUiLCJzYWZlIiwibXQiLCJmaWx0ZXIiLCJkdCIsIm5lZWRGeENvdW50ZXIiLCJmeENvdW50Iiwic3RvcmVDaGFuZ2UiLCJ3YXJuU2VyaWFsaXplIiwid2FyblNlcmlhbGl6ZU5vZGUiLCJhZGRpdGlvbmFsTGlua3MiLCJRIiwiSyIsImZ1bGxOYW1lIiwidG9TdHJpbmciLCJzaG9ydE5hbWUiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiY29uY2F0IiwibmFtZSIsIm5hbWVkIiwibG9jIiwiZmlsZSIsImxpbmUiLCJjb2x1bW4iLCJ6ZSIsIm9yIiwiYW5kIiwiJGUiLCJ1bnN1YnNjcmliZSIsImhhbmRsZXJzIiwiaHQiLCJHIiwic3QiLCJjcmVhdGUiLCJncmFwaGl0ZSIsInh0IiwiYWN0dWFsT3AiLCJ3YXRjaCIsIiR0IiwibWFwIiwienQiLCJWZSIsIk9lIiwiZmlsdGVyTWFwIiwiX2UiLCJ4ZSIsInByZXBlbmQiLCJ0YXJnZXRhYmxlIiwid3QiLCJNdCIsImRvbWFpbiIsImhvb2tzIiwiZXZlbnQiLCJKIiwiamUiLCJNZSIsImNlIiwib2ZmIiwiVyIsInNldCIsImt0IiwianQiLCJJZSIsIkxlIiwiZGVyaXZlZCIsInkiLCJza2lwVm9pZCIsImIiLCJzdWJzY3JpYmVycyIsIk1hcCIsInVwZGF0ZXMiLCJkZWZhdWx0U3RhdGUiLCJzdGF0ZVJlZiIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJyZXNldCIsIm9uIiwiZ2V0IiwiV2UiLCJMIiwibm9Jbml0IiwidiIsImsiLCJkZWZhdWx0Q29uZmlnIiwidXBkYXRlRmlsdGVyIiwic3RhdGUiLCJFZSIsImNvbnNvbGUiLCJlcnJvciIsIkF0IiwiTmUiLCJxZSIsInciLCJTIiwiJCIsIk0iLCJzaWQiLCJ4IiwicmVpbml0IiwiWSIsInNsaWNlIiwiQ3QiLCJyZXEiLCJQcm9taXNlIiwicnMiLCJyaiIsImNhdGNoIiwiaGFuZGxlciIsImtpbmQiLCJ1c2UiLCJnZXRDdXJyZW50IiwiZmluYWxseSIsImRvbmUiLCJzdGF0dXMiLCJyZXN1bHQiLCJkb25lRGF0YSIsImZhaWxEYXRhIiwiY29tcG9zaXRlTmFtZSIsInVuaXRNYXAiLCJzaWRNYXAiLCJydW5uZXJGbiIsImFyZ3MiLCJJdCIsIk50IiwidGhlbiIsImZ4IiwicnVubmVyIiwiZnhJRCIsInBlIiwib3QiLCJpbkZsaWdodCIsInNlcmlhbGl6ZSIsInBlbmRpbmciLCJlZmZlY3QiLCJtYXBQYXJhbXMiLCJlZSIsInNwbGljZSIsImNvbmZpZyIsImhpc3RvcnkiLCJFdmVudCIsIkVmZmVjdCIsIlN0b3JlIiwiRG9tYWluIiwidG9Mb3dlckNhc2UiLCJTZXQiLCJvd25lclNldCIsIl8iLCJzdWJzY3JpYmUiLCJjb21wbGV0ZSIsIlJ0IiwiRnQiLCJjbG9jayIsImJhdGNoIiwiZ3JlZWR5IiwicXQiLCJ6IiwiQSIsIloiLCJqIiwiY2FzZXMiLCJtYXRjaCIsIkNlIiwiX18iLCJ2YWx1ZXMiLCJrZXlzIiwiRGUiLCJTdHJpbmciLCJfdCIsIm9lIiwiZmllbGQiLCJDIiwicmVqZWN0IiwibmUiLCJ0ZSIsInBhcmVudEZvcmsiLCJkZWZlcnMiLCJOIiwiSSIsImhhc1NpZERvdWJsZXMiLCJPIiwicmUiLCJyZXNvbHZlIiwiVnQiLCJzaWRJZE1hcCIsInNpZFNlcmlhbGl6ZVNldHRpbmdzIiwiaWdub3JlIiwid3JpdGUiLCJjbG9uZU9mIiwiaWRNYXAiLCJ1bml0IiwiZm9ya0luRmxpZ2h0Q291bnRlciIsImZyb21TZXJpYWxpemUiLCJSIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInJlYWQiLCJGIiwicSIsIlR0Iiwib25seUNoYW5nZXMiLCJEIiwiVGUiLCJydW4iLCJ1bnNoaWZ0IiwiY29tcHV0ZSIsIm1vdiIsIlAiLCJ3YXRjaE9wIiwicHVzaCIsImluZGV4T2YiLCJ2dCIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJYIiwiYWUiLCJfX3Byb3RvX18iLCJhdHRhY2hlZCIsImluY2x1ZGVzIiwic2UiLCJsZSIsImRlIiwidWUiLCJtZSIsImhlIiwidmUiLCJrZSIsIm1ldGhvZCIsImZsYXQiLCJBZSIsIlJlIiwiRmUiLCJQZSIsImluaXRpYWwiLCJiZWZvcmUiLCJIZSIsIlVlIiwiWWUiLCJHZSIsIkplIiwiZmlyc3QiLCJsYXN0Iiwic2l6ZSIsInV0IiwiZnQiLCJmYWlsUmVhc29uIiwiZ3QiLCJ5dCIsInBvcCIsImJ0IiwiY2xlYXIiLCJkZWVwIiwiZXZlbnRzIiwiZWZmZWN0cyIsInN0b3JlcyIsImRvbWFpbnMiLCJTdCIsInVuaXRJZCIsImdldFR5cGUiLCJuYXRpdmVUZW1wbGF0ZSIsImtleSIsImRlZmF1bHRTaGFwZSIsIk90IiwiUHQiLCJEdCIsImpvaW50IiwiRXQiLCJpc0NvbWJpbmUiLCJhbGxTZXR0bGVkIiwiYXR0YWNoIiwiY2xlYXJOb2RlIiwiY29tYmluZSIsImNyZWF0ZUFwaSIsImNyZWF0ZURvbWFpbiIsImNyZWF0ZUVmZmVjdCIsImNyZWF0ZUV2ZW50IiwiY3JlYXRlTm9kZSIsImNyZWF0ZVN0b3JlIiwiY3JlYXRlV2F0Y2giLCJmb3JrIiwiZm9yd2FyZCIsImZyb21PYnNlcnZhYmxlIiwiZ3VhcmQiLCJoeWRyYXRlIiwiaXMiLCJsYXVuY2giLCJtZXJnZSIsInJlc3RvcmUiLCJzYW1wbGUiLCJzY29wZUJpbmQiLCJzZXRHcmFwaEluc3BlY3RvciIsInNldEluc3BlY3RvciIsInNldFN0b3JlTmFtZSIsInNwbGl0Iiwic3RlcCIsInZlcnNpb24iLCJ3aXRoRmFjdG9yeSIsIndpdGhSZWdpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/effector/effector.mjs\n");

/***/ })

};
;